
ADC_OnInterrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00002a5a  00002aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000066  0080200e  0080200e  00002afc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000388  00000000  00000000  00002b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008ffd  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014a7  00000000  00000000  0000bedd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000045d9  00000000  00000000  0000d384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000013a8  00000000  00000000  00011960  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002c6b4  00000000  00000000  00012d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004297  00000000  00000000  0003f3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000320  00000000  00000000  00043658  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a08f  00000000  00000000  00043978  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	9d c1       	rjmp	.+826    	; 0x340 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c1       	rjmp	.+822    	; 0x340 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c1       	rjmp	.+818    	; 0x340 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c1       	rjmp	.+814    	; 0x340 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c1       	rjmp	.+810    	; 0x340 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c1       	rjmp	.+806    	; 0x340 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c1       	rjmp	.+802    	; 0x340 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c1       	rjmp	.+798    	; 0x340 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c1       	rjmp	.+794    	; 0x340 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c1       	rjmp	.+790    	; 0x340 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c1       	rjmp	.+786    	; 0x340 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c1       	rjmp	.+782    	; 0x340 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c1       	rjmp	.+778    	; 0x340 <__bad_interrupt>
      36:	00 00       	nop
      38:	0f c2       	rjmp	.+1054   	; 0x458 <__vector_14>
      3a:	00 00       	nop
      3c:	3a c2       	rjmp	.+1140   	; 0x4b2 <__vector_15>
      3e:	00 00       	nop
      40:	65 c2       	rjmp	.+1226   	; 0x50c <__vector_16>
      42:	00 00       	nop
      44:	90 c2       	rjmp	.+1312   	; 0x566 <__vector_17>
      46:	00 00       	nop
      48:	bb c2       	rjmp	.+1398   	; 0x5c0 <__vector_18>
      4a:	00 00       	nop
      4c:	e6 c2       	rjmp	.+1484   	; 0x61a <__vector_19>
      4e:	00 00       	nop
      50:	11 c3       	rjmp	.+1570   	; 0x674 <__vector_20>
      52:	00 00       	nop
      54:	3c c3       	rjmp	.+1656   	; 0x6ce <__vector_21>
      56:	00 00       	nop
      58:	67 c3       	rjmp	.+1742   	; 0x728 <__vector_22>
      5a:	00 00       	nop
      5c:	92 c3       	rjmp	.+1828   	; 0x782 <__vector_23>
      5e:	00 00       	nop
      60:	6f c1       	rjmp	.+734    	; 0x340 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c1       	rjmp	.+730    	; 0x340 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c1       	rjmp	.+726    	; 0x340 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c1       	rjmp	.+722    	; 0x340 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c1       	rjmp	.+718    	; 0x340 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c1       	rjmp	.+714    	; 0x340 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c1       	rjmp	.+710    	; 0x340 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c1       	rjmp	.+706    	; 0x340 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c1       	rjmp	.+702    	; 0x340 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c1       	rjmp	.+698    	; 0x340 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c1       	rjmp	.+694    	; 0x340 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c1       	rjmp	.+690    	; 0x340 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c1       	rjmp	.+686    	; 0x340 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c1       	rjmp	.+682    	; 0x340 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c1       	rjmp	.+678    	; 0x340 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__vector_39>
      a0:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_40>
      a4:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_41>
      a8:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_42>
      ac:	49 c1       	rjmp	.+658    	; 0x340 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c1       	rjmp	.+654    	; 0x340 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c1       	rjmp	.+650    	; 0x340 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c1       	rjmp	.+646    	; 0x340 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	51 c5       	rjmp	.+2722   	; 0xb60 <__vector_47>
      be:	00 00       	nop
      c0:	7c c5       	rjmp	.+2808   	; 0xbba <__vector_48>
      c2:	00 00       	nop
      c4:	a7 c5       	rjmp	.+2894   	; 0xc14 <__vector_49>
      c6:	00 00       	nop
      c8:	d2 c5       	rjmp	.+2980   	; 0xc6e <__vector_50>
      ca:	00 00       	nop
      cc:	fd c5       	rjmp	.+3066   	; 0xcc8 <__vector_51>
      ce:	00 00       	nop
      d0:	28 c6       	rjmp	.+3152   	; 0xd22 <__vector_52>
      d2:	00 00       	nop
      d4:	53 c6       	rjmp	.+3238   	; 0xd7c <__vector_53>
      d6:	00 00       	nop
      d8:	7e c6       	rjmp	.+3324   	; 0xdd6 <__vector_54>
      da:	00 00       	nop
      dc:	a9 c6       	rjmp	.+3410   	; 0xe30 <__vector_55>
      de:	00 00       	nop
      e0:	d4 c6       	rjmp	.+3496   	; 0xe8a <__vector_56>
      e2:	00 00       	nop
      e4:	2d c1       	rjmp	.+602    	; 0x340 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	2b c1       	rjmp	.+598    	; 0x340 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	29 c1       	rjmp	.+594    	; 0x340 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	27 c1       	rjmp	.+590    	; 0x340 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	25 c1       	rjmp	.+586    	; 0x340 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	23 c1       	rjmp	.+582    	; 0x340 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	21 c1       	rjmp	.+578    	; 0x340 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1f c1       	rjmp	.+574    	; 0x340 <__bad_interrupt>
     102:	00 00       	nop
     104:	1d c1       	rjmp	.+570    	; 0x340 <__bad_interrupt>
     106:	00 00       	nop
     108:	1b c1       	rjmp	.+566    	; 0x340 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	19 c1       	rjmp	.+562    	; 0x340 <__bad_interrupt>
     10e:	00 00       	nop
     110:	17 c1       	rjmp	.+558    	; 0x340 <__bad_interrupt>
     112:	00 00       	nop
     114:	15 c1       	rjmp	.+554    	; 0x340 <__bad_interrupt>
     116:	00 00       	nop
     118:	13 c1       	rjmp	.+550    	; 0x340 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_71>
     120:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_72>
     124:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <__vector_73>
     128:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__vector_74>
     12c:	09 c1       	rjmp	.+530    	; 0x340 <__bad_interrupt>
     12e:	00 00       	nop
     130:	07 c1       	rjmp	.+526    	; 0x340 <__bad_interrupt>
     132:	00 00       	nop
     134:	53 c3       	rjmp	.+1702   	; 0x7dc <__vector_77>
     136:	00 00       	nop
     138:	7e c3       	rjmp	.+1788   	; 0x836 <__vector_78>
     13a:	00 00       	nop
     13c:	a9 c3       	rjmp	.+1874   	; 0x890 <__vector_79>
     13e:	00 00       	nop
     140:	d4 c3       	rjmp	.+1960   	; 0x8ea <__vector_80>
     142:	00 00       	nop
     144:	ff c3       	rjmp	.+2046   	; 0x944 <__vector_81>
     146:	00 00       	nop
     148:	2a c4       	rjmp	.+2132   	; 0x99e <__vector_82>
     14a:	00 00       	nop
     14c:	55 c4       	rjmp	.+2218   	; 0x9f8 <__vector_83>
     14e:	00 00       	nop
     150:	80 c4       	rjmp	.+2304   	; 0xa52 <__vector_84>
     152:	00 00       	nop
     154:	ab c4       	rjmp	.+2390   	; 0xaac <__vector_85>
     156:	00 00       	nop
     158:	d6 c4       	rjmp	.+2476   	; 0xb06 <__vector_86>
     15a:	00 00       	nop
     15c:	f1 c0       	rjmp	.+482    	; 0x340 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ef c0       	rjmp	.+478    	; 0x340 <__bad_interrupt>
     162:	00 00       	nop
     164:	ed c0       	rjmp	.+474    	; 0x340 <__bad_interrupt>
     166:	00 00       	nop
     168:	eb c0       	rjmp	.+470    	; 0x340 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e9 c0       	rjmp	.+466    	; 0x340 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e7 c0       	rjmp	.+462    	; 0x340 <__bad_interrupt>
     172:	00 00       	nop
     174:	e5 c0       	rjmp	.+458    	; 0x340 <__bad_interrupt>
     176:	00 00       	nop
     178:	e3 c0       	rjmp	.+454    	; 0x340 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e1 c0       	rjmp	.+450    	; 0x340 <__bad_interrupt>
     17e:	00 00       	nop
     180:	df c0       	rjmp	.+446    	; 0x340 <__bad_interrupt>
     182:	00 00       	nop
     184:	dd c0       	rjmp	.+442    	; 0x340 <__bad_interrupt>
     186:	00 00       	nop
     188:	db c0       	rjmp	.+438    	; 0x340 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d9 c0       	rjmp	.+434    	; 0x340 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d7 c0       	rjmp	.+430    	; 0x340 <__bad_interrupt>
     192:	00 00       	nop
     194:	d5 c0       	rjmp	.+426    	; 0x340 <__bad_interrupt>
     196:	00 00       	nop
     198:	d3 c0       	rjmp	.+422    	; 0x340 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d1 c0       	rjmp	.+418    	; 0x340 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	cf c0       	rjmp	.+414    	; 0x340 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	cd c0       	rjmp	.+410    	; 0x340 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cb c0       	rjmp	.+406    	; 0x340 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c9 c0       	rjmp	.+402    	; 0x340 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	99 c6       	rjmp	.+3378   	; 0xee4 <__vector_108>
     1b2:	00 00       	nop
     1b4:	c4 c6       	rjmp	.+3464   	; 0xf3e <__vector_109>
     1b6:	00 00       	nop
     1b8:	ef c6       	rjmp	.+3550   	; 0xf98 <__vector_110>
     1ba:	00 00       	nop
     1bc:	1a c7       	rjmp	.+3636   	; 0xff2 <__vector_111>
     1be:	00 00       	nop
     1c0:	45 c7       	rjmp	.+3722   	; 0x104c <__vector_112>
     1c2:	00 00       	nop
     1c4:	70 c7       	rjmp	.+3808   	; 0x10a6 <__vector_113>
     1c6:	00 00       	nop
     1c8:	bb c0       	rjmp	.+374    	; 0x340 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b9 c0       	rjmp	.+370    	; 0x340 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b7 c0       	rjmp	.+366    	; 0x340 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b5 c0       	rjmp	.+362    	; 0x340 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b3 c0       	rjmp	.+358    	; 0x340 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b1 c0       	rjmp	.+354    	; 0x340 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	af c0       	rjmp	.+350    	; 0x340 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ad c0       	rjmp	.+346    	; 0x340 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ab c0       	rjmp	.+342    	; 0x340 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a9 c0       	rjmp	.+338    	; 0x340 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a7 c0       	rjmp	.+334    	; 0x340 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a5 c0       	rjmp	.+330    	; 0x340 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a3 c0       	rjmp	.+326    	; 0x340 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2159>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e5       	ldi	r29, 0x5F	; 95
     308:	de bf       	out	0x3e, r29	; 62
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60

0000030e <__do_copy_data>:
     30e:	10 e2       	ldi	r17, 0x20	; 32
     310:	a0 e0       	ldi	r26, 0x00	; 0
     312:	b0 e2       	ldi	r27, 0x20	; 32
     314:	ea e5       	ldi	r30, 0x5A	; 90
     316:	fa e2       	ldi	r31, 0x2A	; 42
     318:	00 e0       	ldi	r16, 0x00	; 0
     31a:	0b bf       	out	0x3b, r16	; 59
     31c:	02 c0       	rjmp	.+4      	; 0x322 <__do_copy_data+0x14>
     31e:	07 90       	elpm	r0, Z+
     320:	0d 92       	st	X+, r0
     322:	ae 30       	cpi	r26, 0x0E	; 14
     324:	b1 07       	cpc	r27, r17
     326:	d9 f7       	brne	.-10     	; 0x31e <__do_copy_data+0x10>

00000328 <__do_clear_bss>:
     328:	20 e2       	ldi	r18, 0x20	; 32
     32a:	ae e0       	ldi	r26, 0x0E	; 14
     32c:	b0 e2       	ldi	r27, 0x20	; 32
     32e:	01 c0       	rjmp	.+2      	; 0x332 <.do_clear_bss_start>

00000330 <.do_clear_bss_loop>:
     330:	1d 92       	st	X+, r1

00000332 <.do_clear_bss_start>:
     332:	a4 37       	cpi	r26, 0x74	; 116
     334:	b2 07       	cpc	r27, r18
     336:	e1 f7       	brne	.-8      	; 0x330 <.do_clear_bss_loop>
     338:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <main>
     33c:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <_exit>

00000340 <__bad_interrupt>:
     340:	5f ce       	rjmp	.-834    	; 0x0 <__vectors>

00000342 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	1f 92       	push	r1
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     34c:	80 91 60 20 	lds	r24, 0x2060
     350:	90 91 61 20 	lds	r25, 0x2061
     354:	e0 91 58 20 	lds	r30, 0x2058
     358:	f0 91 59 20 	lds	r31, 0x2059
     35c:	be 01       	movw	r22, r28
     35e:	6f 5f       	subi	r22, 0xFF	; 255
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	19 95       	eicall
	return c;
     364:	89 81       	ldd	r24, Y+1	; 0x01
}
     366:	99 27       	eor	r25, r25
     368:	87 fd       	sbrc	r24, 7
     36a:	90 95       	com	r25
     36c:	0f 90       	pop	r0
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     374:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     376:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     378:	28 2f       	mov	r18, r24
     37a:	39 2f       	mov	r19, r25
     37c:	21 15       	cp	r18, r1
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	38 07       	cpc	r19, r24
     382:	29 f4       	brne	.+10     	; 0x38e <adc_set_callback+0x1a>
		adca_callback = callback;
     384:	60 93 5c 20 	sts	0x205C, r22
     388:	70 93 5d 20 	sts	0x205D, r23
     38c:	07 c0       	rjmp	.+14     	; 0x39c <adc_set_callback+0x28>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     38e:	20 34       	cpi	r18, 0x40	; 64
     390:	32 40       	sbci	r19, 0x02	; 2
     392:	21 f4       	brne	.+8      	; 0x39c <adc_set_callback+0x28>
		adcb_callback = callback;
     394:	60 93 5a 20 	sts	0x205A, r22
     398:	70 93 5b 20 	sts	0x205B, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     39c:	4f bf       	out	0x3f, r20	; 63
     39e:	08 95       	ret

000003a0 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     3a0:	81 15       	cp	r24, r1
     3a2:	22 e0       	ldi	r18, 0x02	; 2
     3a4:	92 07       	cpc	r25, r18
     3a6:	69 f4       	brne	.+26     	; 0x3c2 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     3a8:	80 91 0f 20 	lds	r24, 0x200F
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	98 0f       	add	r25, r24
     3b0:	90 93 0f 20 	sts	0x200F, r25
     3b4:	81 11       	cpse	r24, r1
     3b6:	14 c0       	rjmp	.+40     	; 0x3e0 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     3b8:	62 e0       	ldi	r22, 0x02	; 2
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <sysclk_enable_module>
     3c0:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     3c2:	80 34       	cpi	r24, 0x40	; 64
     3c4:	92 40       	sbci	r25, 0x02	; 2
     3c6:	61 f4       	brne	.+24     	; 0x3e0 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     3c8:	80 91 0e 20 	lds	r24, 0x200E
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	98 0f       	add	r25, r24
     3d0:	90 93 0e 20 	sts	0x200E, r25
     3d4:	81 11       	cpse	r24, r1
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     3d8:	62 e0       	ldi	r22, 0x02	; 2
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <sysclk_enable_module>
     3e0:	08 95       	ret

000003e2 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     3e2:	81 15       	cp	r24, r1
     3e4:	22 e0       	ldi	r18, 0x02	; 2
     3e6:	92 07       	cpc	r25, r18
     3e8:	61 f4       	brne	.+24     	; 0x402 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     3ea:	80 91 0f 20 	lds	r24, 0x200F
     3ee:	81 50       	subi	r24, 0x01	; 1
     3f0:	80 93 0f 20 	sts	0x200F, r24
     3f4:	81 11       	cpse	r24, r1
     3f6:	13 c0       	rjmp	.+38     	; 0x41e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     3f8:	62 e0       	ldi	r22, 0x02	; 2
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <sysclk_disable_module>
     400:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     402:	80 34       	cpi	r24, 0x40	; 64
     404:	92 40       	sbci	r25, 0x02	; 2
     406:	59 f4       	brne	.+22     	; 0x41e <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     408:	80 91 0e 20 	lds	r24, 0x200E
     40c:	81 50       	subi	r24, 0x01	; 1
     40e:	80 93 0e 20 	sts	0x200E, r24
     412:	81 11       	cpse	r24, r1
     414:	04 c0       	rjmp	.+8      	; 0x41e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <sysclk_disable_module>
     41e:	08 95       	ret

00000420 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     428:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     42a:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     42c:	b9 df       	rcall	.-142    	; 0x3a0 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     42e:	88 81       	ld	r24, Y
     430:	81 60       	ori	r24, 0x01	; 1
     432:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     434:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     436:	80 91 63 20 	lds	r24, 0x2063
     43a:	8f 3f       	cpi	r24, 0xFF	; 255
     43c:	09 f4       	brne	.+2      	; 0x440 <adc_enable+0x20>
     43e:	ff cf       	rjmp	.-2      	; 0x43e <adc_enable+0x1e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     440:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     442:	f8 94       	cli
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     444:	e3 e6       	ldi	r30, 0x63	; 99
     446:	f0 e2       	ldi	r31, 0x20	; 32
     448:	90 81       	ld	r25, Z
     44a:	9f 5f       	subi	r25, 0xFF	; 255
     44c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     44e:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	08 95       	ret

00000458 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	0b b6       	in	r0, 0x3b	; 59
     464:	0f 92       	push	r0
     466:	2f 93       	push	r18
     468:	3f 93       	push	r19
     46a:	4f 93       	push	r20
     46c:	5f 93       	push	r21
     46e:	6f 93       	push	r22
     470:	7f 93       	push	r23
     472:	8f 93       	push	r24
     474:	9f 93       	push	r25
     476:	af 93       	push	r26
     478:	bf 93       	push	r27
     47a:	ef 93       	push	r30
     47c:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     47e:	e0 91 56 20 	lds	r30, 0x2056
     482:	f0 91 57 20 	lds	r31, 0x2057
     486:	30 97       	sbiw	r30, 0x00	; 0
     488:	09 f0       	breq	.+2      	; 0x48c <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     48a:	19 95       	eicall
	}
}
     48c:	ff 91       	pop	r31
     48e:	ef 91       	pop	r30
     490:	bf 91       	pop	r27
     492:	af 91       	pop	r26
     494:	9f 91       	pop	r25
     496:	8f 91       	pop	r24
     498:	7f 91       	pop	r23
     49a:	6f 91       	pop	r22
     49c:	5f 91       	pop	r21
     49e:	4f 91       	pop	r20
     4a0:	3f 91       	pop	r19
     4a2:	2f 91       	pop	r18
     4a4:	0f 90       	pop	r0
     4a6:	0b be       	out	0x3b, r0	; 59
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	0b b6       	in	r0, 0x3b	; 59
     4be:	0f 92       	push	r0
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     4d8:	e0 91 54 20 	lds	r30, 0x2054
     4dc:	f0 91 55 20 	lds	r31, 0x2055
     4e0:	30 97       	sbiw	r30, 0x00	; 0
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <__vector_15+0x34>
		tc_tcc0_err_callback();
     4e4:	19 95       	eicall
	}
}
     4e6:	ff 91       	pop	r31
     4e8:	ef 91       	pop	r30
     4ea:	bf 91       	pop	r27
     4ec:	af 91       	pop	r26
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	7f 91       	pop	r23
     4f4:	6f 91       	pop	r22
     4f6:	5f 91       	pop	r21
     4f8:	4f 91       	pop	r20
     4fa:	3f 91       	pop	r19
     4fc:	2f 91       	pop	r18
     4fe:	0f 90       	pop	r0
     500:	0b be       	out	0x3b, r0	; 59
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	0b b6       	in	r0, 0x3b	; 59
     518:	0f 92       	push	r0
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     532:	e0 91 52 20 	lds	r30, 0x2052
     536:	f0 91 53 20 	lds	r31, 0x2053
     53a:	30 97       	sbiw	r30, 0x00	; 0
     53c:	09 f0       	breq	.+2      	; 0x540 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     53e:	19 95       	eicall
	}
}
     540:	ff 91       	pop	r31
     542:	ef 91       	pop	r30
     544:	bf 91       	pop	r27
     546:	af 91       	pop	r26
     548:	9f 91       	pop	r25
     54a:	8f 91       	pop	r24
     54c:	7f 91       	pop	r23
     54e:	6f 91       	pop	r22
     550:	5f 91       	pop	r21
     552:	4f 91       	pop	r20
     554:	3f 91       	pop	r19
     556:	2f 91       	pop	r18
     558:	0f 90       	pop	r0
     55a:	0b be       	out	0x3b, r0	; 59
     55c:	0f 90       	pop	r0
     55e:	0f be       	out	0x3f, r0	; 63
     560:	0f 90       	pop	r0
     562:	1f 90       	pop	r1
     564:	18 95       	reti

00000566 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     566:	1f 92       	push	r1
     568:	0f 92       	push	r0
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	0f 92       	push	r0
     56e:	11 24       	eor	r1, r1
     570:	0b b6       	in	r0, 0x3b	; 59
     572:	0f 92       	push	r0
     574:	2f 93       	push	r18
     576:	3f 93       	push	r19
     578:	4f 93       	push	r20
     57a:	5f 93       	push	r21
     57c:	6f 93       	push	r22
     57e:	7f 93       	push	r23
     580:	8f 93       	push	r24
     582:	9f 93       	push	r25
     584:	af 93       	push	r26
     586:	bf 93       	push	r27
     588:	ef 93       	push	r30
     58a:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     58c:	e0 91 50 20 	lds	r30, 0x2050
     590:	f0 91 51 20 	lds	r31, 0x2051
     594:	30 97       	sbiw	r30, 0x00	; 0
     596:	09 f0       	breq	.+2      	; 0x59a <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     598:	19 95       	eicall
	}
}
     59a:	ff 91       	pop	r31
     59c:	ef 91       	pop	r30
     59e:	bf 91       	pop	r27
     5a0:	af 91       	pop	r26
     5a2:	9f 91       	pop	r25
     5a4:	8f 91       	pop	r24
     5a6:	7f 91       	pop	r23
     5a8:	6f 91       	pop	r22
     5aa:	5f 91       	pop	r21
     5ac:	4f 91       	pop	r20
     5ae:	3f 91       	pop	r19
     5b0:	2f 91       	pop	r18
     5b2:	0f 90       	pop	r0
     5b4:	0b be       	out	0x3b, r0	; 59
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	0b b6       	in	r0, 0x3b	; 59
     5cc:	0f 92       	push	r0
     5ce:	2f 93       	push	r18
     5d0:	3f 93       	push	r19
     5d2:	4f 93       	push	r20
     5d4:	5f 93       	push	r21
     5d6:	6f 93       	push	r22
     5d8:	7f 93       	push	r23
     5da:	8f 93       	push	r24
     5dc:	9f 93       	push	r25
     5de:	af 93       	push	r26
     5e0:	bf 93       	push	r27
     5e2:	ef 93       	push	r30
     5e4:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     5e6:	e0 91 4e 20 	lds	r30, 0x204E
     5ea:	f0 91 4f 20 	lds	r31, 0x204F
     5ee:	30 97       	sbiw	r30, 0x00	; 0
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     5f2:	19 95       	eicall
	}
}
     5f4:	ff 91       	pop	r31
     5f6:	ef 91       	pop	r30
     5f8:	bf 91       	pop	r27
     5fa:	af 91       	pop	r26
     5fc:	9f 91       	pop	r25
     5fe:	8f 91       	pop	r24
     600:	7f 91       	pop	r23
     602:	6f 91       	pop	r22
     604:	5f 91       	pop	r21
     606:	4f 91       	pop	r20
     608:	3f 91       	pop	r19
     60a:	2f 91       	pop	r18
     60c:	0f 90       	pop	r0
     60e:	0b be       	out	0x3b, r0	; 59
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     61a:	1f 92       	push	r1
     61c:	0f 92       	push	r0
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	0f 92       	push	r0
     622:	11 24       	eor	r1, r1
     624:	0b b6       	in	r0, 0x3b	; 59
     626:	0f 92       	push	r0
     628:	2f 93       	push	r18
     62a:	3f 93       	push	r19
     62c:	4f 93       	push	r20
     62e:	5f 93       	push	r21
     630:	6f 93       	push	r22
     632:	7f 93       	push	r23
     634:	8f 93       	push	r24
     636:	9f 93       	push	r25
     638:	af 93       	push	r26
     63a:	bf 93       	push	r27
     63c:	ef 93       	push	r30
     63e:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     640:	e0 91 4c 20 	lds	r30, 0x204C
     644:	f0 91 4d 20 	lds	r31, 0x204D
     648:	30 97       	sbiw	r30, 0x00	; 0
     64a:	09 f0       	breq	.+2      	; 0x64e <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     64c:	19 95       	eicall
	}
}
     64e:	ff 91       	pop	r31
     650:	ef 91       	pop	r30
     652:	bf 91       	pop	r27
     654:	af 91       	pop	r26
     656:	9f 91       	pop	r25
     658:	8f 91       	pop	r24
     65a:	7f 91       	pop	r23
     65c:	6f 91       	pop	r22
     65e:	5f 91       	pop	r21
     660:	4f 91       	pop	r20
     662:	3f 91       	pop	r19
     664:	2f 91       	pop	r18
     666:	0f 90       	pop	r0
     668:	0b be       	out	0x3b, r0	; 59
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	0b b6       	in	r0, 0x3b	; 59
     680:	0f 92       	push	r0
     682:	2f 93       	push	r18
     684:	3f 93       	push	r19
     686:	4f 93       	push	r20
     688:	5f 93       	push	r21
     68a:	6f 93       	push	r22
     68c:	7f 93       	push	r23
     68e:	8f 93       	push	r24
     690:	9f 93       	push	r25
     692:	af 93       	push	r26
     694:	bf 93       	push	r27
     696:	ef 93       	push	r30
     698:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     69a:	e0 91 4a 20 	lds	r30, 0x204A
     69e:	f0 91 4b 20 	lds	r31, 0x204B
     6a2:	30 97       	sbiw	r30, 0x00	; 0
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     6a6:	19 95       	eicall
	}
}
     6a8:	ff 91       	pop	r31
     6aa:	ef 91       	pop	r30
     6ac:	bf 91       	pop	r27
     6ae:	af 91       	pop	r26
     6b0:	9f 91       	pop	r25
     6b2:	8f 91       	pop	r24
     6b4:	7f 91       	pop	r23
     6b6:	6f 91       	pop	r22
     6b8:	5f 91       	pop	r21
     6ba:	4f 91       	pop	r20
     6bc:	3f 91       	pop	r19
     6be:	2f 91       	pop	r18
     6c0:	0f 90       	pop	r0
     6c2:	0b be       	out	0x3b, r0	; 59
     6c4:	0f 90       	pop	r0
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	0f 90       	pop	r0
     6ca:	1f 90       	pop	r1
     6cc:	18 95       	reti

000006ce <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     6ce:	1f 92       	push	r1
     6d0:	0f 92       	push	r0
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
     6d8:	0b b6       	in	r0, 0x3b	; 59
     6da:	0f 92       	push	r0
     6dc:	2f 93       	push	r18
     6de:	3f 93       	push	r19
     6e0:	4f 93       	push	r20
     6e2:	5f 93       	push	r21
     6e4:	6f 93       	push	r22
     6e6:	7f 93       	push	r23
     6e8:	8f 93       	push	r24
     6ea:	9f 93       	push	r25
     6ec:	af 93       	push	r26
     6ee:	bf 93       	push	r27
     6f0:	ef 93       	push	r30
     6f2:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     6f4:	e0 91 48 20 	lds	r30, 0x2048
     6f8:	f0 91 49 20 	lds	r31, 0x2049
     6fc:	30 97       	sbiw	r30, 0x00	; 0
     6fe:	09 f0       	breq	.+2      	; 0x702 <__vector_21+0x34>
		tc_tcc1_err_callback();
     700:	19 95       	eicall
	}
}
     702:	ff 91       	pop	r31
     704:	ef 91       	pop	r30
     706:	bf 91       	pop	r27
     708:	af 91       	pop	r26
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	7f 91       	pop	r23
     710:	6f 91       	pop	r22
     712:	5f 91       	pop	r21
     714:	4f 91       	pop	r20
     716:	3f 91       	pop	r19
     718:	2f 91       	pop	r18
     71a:	0f 90       	pop	r0
     71c:	0b be       	out	0x3b, r0	; 59
     71e:	0f 90       	pop	r0
     720:	0f be       	out	0x3f, r0	; 63
     722:	0f 90       	pop	r0
     724:	1f 90       	pop	r1
     726:	18 95       	reti

00000728 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     728:	1f 92       	push	r1
     72a:	0f 92       	push	r0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	0f 92       	push	r0
     730:	11 24       	eor	r1, r1
     732:	0b b6       	in	r0, 0x3b	; 59
     734:	0f 92       	push	r0
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     74e:	e0 91 46 20 	lds	r30, 0x2046
     752:	f0 91 47 20 	lds	r31, 0x2047
     756:	30 97       	sbiw	r30, 0x00	; 0
     758:	09 f0       	breq	.+2      	; 0x75c <__vector_22+0x34>
		tc_tcc1_cca_callback();
     75a:	19 95       	eicall
	}
}
     75c:	ff 91       	pop	r31
     75e:	ef 91       	pop	r30
     760:	bf 91       	pop	r27
     762:	af 91       	pop	r26
     764:	9f 91       	pop	r25
     766:	8f 91       	pop	r24
     768:	7f 91       	pop	r23
     76a:	6f 91       	pop	r22
     76c:	5f 91       	pop	r21
     76e:	4f 91       	pop	r20
     770:	3f 91       	pop	r19
     772:	2f 91       	pop	r18
     774:	0f 90       	pop	r0
     776:	0b be       	out	0x3b, r0	; 59
     778:	0f 90       	pop	r0
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	0f 90       	pop	r0
     77e:	1f 90       	pop	r1
     780:	18 95       	reti

00000782 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     782:	1f 92       	push	r1
     784:	0f 92       	push	r0
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	0f 92       	push	r0
     78a:	11 24       	eor	r1, r1
     78c:	0b b6       	in	r0, 0x3b	; 59
     78e:	0f 92       	push	r0
     790:	2f 93       	push	r18
     792:	3f 93       	push	r19
     794:	4f 93       	push	r20
     796:	5f 93       	push	r21
     798:	6f 93       	push	r22
     79a:	7f 93       	push	r23
     79c:	8f 93       	push	r24
     79e:	9f 93       	push	r25
     7a0:	af 93       	push	r26
     7a2:	bf 93       	push	r27
     7a4:	ef 93       	push	r30
     7a6:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     7a8:	e0 91 44 20 	lds	r30, 0x2044
     7ac:	f0 91 45 20 	lds	r31, 0x2045
     7b0:	30 97       	sbiw	r30, 0x00	; 0
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     7b4:	19 95       	eicall
	}
}
     7b6:	ff 91       	pop	r31
     7b8:	ef 91       	pop	r30
     7ba:	bf 91       	pop	r27
     7bc:	af 91       	pop	r26
     7be:	9f 91       	pop	r25
     7c0:	8f 91       	pop	r24
     7c2:	7f 91       	pop	r23
     7c4:	6f 91       	pop	r22
     7c6:	5f 91       	pop	r21
     7c8:	4f 91       	pop	r20
     7ca:	3f 91       	pop	r19
     7cc:	2f 91       	pop	r18
     7ce:	0f 90       	pop	r0
     7d0:	0b be       	out	0x3b, r0	; 59
     7d2:	0f 90       	pop	r0
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	0f 90       	pop	r0
     7d8:	1f 90       	pop	r1
     7da:	18 95       	reti

000007dc <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	0b b6       	in	r0, 0x3b	; 59
     7e8:	0f 92       	push	r0
     7ea:	2f 93       	push	r18
     7ec:	3f 93       	push	r19
     7ee:	4f 93       	push	r20
     7f0:	5f 93       	push	r21
     7f2:	6f 93       	push	r22
     7f4:	7f 93       	push	r23
     7f6:	8f 93       	push	r24
     7f8:	9f 93       	push	r25
     7fa:	af 93       	push	r26
     7fc:	bf 93       	push	r27
     7fe:	ef 93       	push	r30
     800:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     802:	e0 91 42 20 	lds	r30, 0x2042
     806:	f0 91 43 20 	lds	r31, 0x2043
     80a:	30 97       	sbiw	r30, 0x00	; 0
     80c:	09 f0       	breq	.+2      	; 0x810 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     80e:	19 95       	eicall
	}
}
     810:	ff 91       	pop	r31
     812:	ef 91       	pop	r30
     814:	bf 91       	pop	r27
     816:	af 91       	pop	r26
     818:	9f 91       	pop	r25
     81a:	8f 91       	pop	r24
     81c:	7f 91       	pop	r23
     81e:	6f 91       	pop	r22
     820:	5f 91       	pop	r21
     822:	4f 91       	pop	r20
     824:	3f 91       	pop	r19
     826:	2f 91       	pop	r18
     828:	0f 90       	pop	r0
     82a:	0b be       	out	0x3b, r0	; 59
     82c:	0f 90       	pop	r0
     82e:	0f be       	out	0x3f, r0	; 63
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	2f 93       	push	r18
     846:	3f 93       	push	r19
     848:	4f 93       	push	r20
     84a:	5f 93       	push	r21
     84c:	6f 93       	push	r22
     84e:	7f 93       	push	r23
     850:	8f 93       	push	r24
     852:	9f 93       	push	r25
     854:	af 93       	push	r26
     856:	bf 93       	push	r27
     858:	ef 93       	push	r30
     85a:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     85c:	e0 91 40 20 	lds	r30, 0x2040
     860:	f0 91 41 20 	lds	r31, 0x2041
     864:	30 97       	sbiw	r30, 0x00	; 0
     866:	09 f0       	breq	.+2      	; 0x86a <__vector_78+0x34>
		tc_tcd0_err_callback();
     868:	19 95       	eicall
	}
}
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	bf 91       	pop	r27
     870:	af 91       	pop	r26
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	7f 91       	pop	r23
     878:	6f 91       	pop	r22
     87a:	5f 91       	pop	r21
     87c:	4f 91       	pop	r20
     87e:	3f 91       	pop	r19
     880:	2f 91       	pop	r18
     882:	0f 90       	pop	r0
     884:	0b be       	out	0x3b, r0	; 59
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti

00000890 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     890:	1f 92       	push	r1
     892:	0f 92       	push	r0
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	0f 92       	push	r0
     898:	11 24       	eor	r1, r1
     89a:	0b b6       	in	r0, 0x3b	; 59
     89c:	0f 92       	push	r0
     89e:	2f 93       	push	r18
     8a0:	3f 93       	push	r19
     8a2:	4f 93       	push	r20
     8a4:	5f 93       	push	r21
     8a6:	6f 93       	push	r22
     8a8:	7f 93       	push	r23
     8aa:	8f 93       	push	r24
     8ac:	9f 93       	push	r25
     8ae:	af 93       	push	r26
     8b0:	bf 93       	push	r27
     8b2:	ef 93       	push	r30
     8b4:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     8b6:	e0 91 3e 20 	lds	r30, 0x203E
     8ba:	f0 91 3f 20 	lds	r31, 0x203F
     8be:	30 97       	sbiw	r30, 0x00	; 0
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <__vector_79+0x34>
		tc_tcd0_cca_callback();
     8c2:	19 95       	eicall
	}
}
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	7f 91       	pop	r23
     8d2:	6f 91       	pop	r22
     8d4:	5f 91       	pop	r21
     8d6:	4f 91       	pop	r20
     8d8:	3f 91       	pop	r19
     8da:	2f 91       	pop	r18
     8dc:	0f 90       	pop	r0
     8de:	0b be       	out	0x3b, r0	; 59
     8e0:	0f 90       	pop	r0
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	0f 90       	pop	r0
     8e6:	1f 90       	pop	r1
     8e8:	18 95       	reti

000008ea <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	11 24       	eor	r1, r1
     8f4:	0b b6       	in	r0, 0x3b	; 59
     8f6:	0f 92       	push	r0
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     910:	e0 91 3c 20 	lds	r30, 0x203C
     914:	f0 91 3d 20 	lds	r31, 0x203D
     918:	30 97       	sbiw	r30, 0x00	; 0
     91a:	09 f0       	breq	.+2      	; 0x91e <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     91c:	19 95       	eicall
	}
}
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	0b be       	out	0x3b, r0	; 59
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	0b b6       	in	r0, 0x3b	; 59
     950:	0f 92       	push	r0
     952:	2f 93       	push	r18
     954:	3f 93       	push	r19
     956:	4f 93       	push	r20
     958:	5f 93       	push	r21
     95a:	6f 93       	push	r22
     95c:	7f 93       	push	r23
     95e:	8f 93       	push	r24
     960:	9f 93       	push	r25
     962:	af 93       	push	r26
     964:	bf 93       	push	r27
     966:	ef 93       	push	r30
     968:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     96a:	e0 91 3a 20 	lds	r30, 0x203A
     96e:	f0 91 3b 20 	lds	r31, 0x203B
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	09 f0       	breq	.+2      	; 0x978 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     976:	19 95       	eicall
	}
}
     978:	ff 91       	pop	r31
     97a:	ef 91       	pop	r30
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	7f 91       	pop	r23
     986:	6f 91       	pop	r22
     988:	5f 91       	pop	r21
     98a:	4f 91       	pop	r20
     98c:	3f 91       	pop	r19
     98e:	2f 91       	pop	r18
     990:	0f 90       	pop	r0
     992:	0b be       	out	0x3b, r0	; 59
     994:	0f 90       	pop	r0
     996:	0f be       	out	0x3f, r0	; 63
     998:	0f 90       	pop	r0
     99a:	1f 90       	pop	r1
     99c:	18 95       	reti

0000099e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     99e:	1f 92       	push	r1
     9a0:	0f 92       	push	r0
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	0f 92       	push	r0
     9a6:	11 24       	eor	r1, r1
     9a8:	0b b6       	in	r0, 0x3b	; 59
     9aa:	0f 92       	push	r0
     9ac:	2f 93       	push	r18
     9ae:	3f 93       	push	r19
     9b0:	4f 93       	push	r20
     9b2:	5f 93       	push	r21
     9b4:	6f 93       	push	r22
     9b6:	7f 93       	push	r23
     9b8:	8f 93       	push	r24
     9ba:	9f 93       	push	r25
     9bc:	af 93       	push	r26
     9be:	bf 93       	push	r27
     9c0:	ef 93       	push	r30
     9c2:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     9c4:	e0 91 38 20 	lds	r30, 0x2038
     9c8:	f0 91 39 20 	lds	r31, 0x2039
     9cc:	30 97       	sbiw	r30, 0x00	; 0
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     9d0:	19 95       	eicall
	}
}
     9d2:	ff 91       	pop	r31
     9d4:	ef 91       	pop	r30
     9d6:	bf 91       	pop	r27
     9d8:	af 91       	pop	r26
     9da:	9f 91       	pop	r25
     9dc:	8f 91       	pop	r24
     9de:	7f 91       	pop	r23
     9e0:	6f 91       	pop	r22
     9e2:	5f 91       	pop	r21
     9e4:	4f 91       	pop	r20
     9e6:	3f 91       	pop	r19
     9e8:	2f 91       	pop	r18
     9ea:	0f 90       	pop	r0
     9ec:	0b be       	out	0x3b, r0	; 59
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	0f 90       	pop	r0
     9f4:	1f 90       	pop	r1
     9f6:	18 95       	reti

000009f8 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     9f8:	1f 92       	push	r1
     9fa:	0f 92       	push	r0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	0b b6       	in	r0, 0x3b	; 59
     a04:	0f 92       	push	r0
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     a1e:	e0 91 36 20 	lds	r30, 0x2036
     a22:	f0 91 37 20 	lds	r31, 0x2037
     a26:	30 97       	sbiw	r30, 0x00	; 0
     a28:	09 f0       	breq	.+2      	; 0xa2c <__vector_83+0x34>
		tc_tcd1_ovf_callback();
     a2a:	19 95       	eicall
	}
}
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	0f 90       	pop	r0
     a46:	0b be       	out	0x3b, r0	; 59
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	0b b6       	in	r0, 0x3b	; 59
     a5e:	0f 92       	push	r0
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	af 93       	push	r26
     a72:	bf 93       	push	r27
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     a78:	e0 91 34 20 	lds	r30, 0x2034
     a7c:	f0 91 35 20 	lds	r31, 0x2035
     a80:	30 97       	sbiw	r30, 0x00	; 0
     a82:	09 f0       	breq	.+2      	; 0xa86 <__vector_84+0x34>
		tc_tcd1_err_callback();
     a84:	19 95       	eicall
	}
}
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	bf 91       	pop	r27
     a8c:	af 91       	pop	r26
     a8e:	9f 91       	pop	r25
     a90:	8f 91       	pop	r24
     a92:	7f 91       	pop	r23
     a94:	6f 91       	pop	r22
     a96:	5f 91       	pop	r21
     a98:	4f 91       	pop	r20
     a9a:	3f 91       	pop	r19
     a9c:	2f 91       	pop	r18
     a9e:	0f 90       	pop	r0
     aa0:	0b be       	out	0x3b, r0	; 59
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	0f 90       	pop	r0
     aa8:	1f 90       	pop	r1
     aaa:	18 95       	reti

00000aac <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     aac:	1f 92       	push	r1
     aae:	0f 92       	push	r0
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	0f 92       	push	r0
     ab4:	11 24       	eor	r1, r1
     ab6:	0b b6       	in	r0, 0x3b	; 59
     ab8:	0f 92       	push	r0
     aba:	2f 93       	push	r18
     abc:	3f 93       	push	r19
     abe:	4f 93       	push	r20
     ac0:	5f 93       	push	r21
     ac2:	6f 93       	push	r22
     ac4:	7f 93       	push	r23
     ac6:	8f 93       	push	r24
     ac8:	9f 93       	push	r25
     aca:	af 93       	push	r26
     acc:	bf 93       	push	r27
     ace:	ef 93       	push	r30
     ad0:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     ad2:	e0 91 32 20 	lds	r30, 0x2032
     ad6:	f0 91 33 20 	lds	r31, 0x2033
     ada:	30 97       	sbiw	r30, 0x00	; 0
     adc:	09 f0       	breq	.+2      	; 0xae0 <__vector_85+0x34>
		tc_tcd1_cca_callback();
     ade:	19 95       	eicall
	}
}
     ae0:	ff 91       	pop	r31
     ae2:	ef 91       	pop	r30
     ae4:	bf 91       	pop	r27
     ae6:	af 91       	pop	r26
     ae8:	9f 91       	pop	r25
     aea:	8f 91       	pop	r24
     aec:	7f 91       	pop	r23
     aee:	6f 91       	pop	r22
     af0:	5f 91       	pop	r21
     af2:	4f 91       	pop	r20
     af4:	3f 91       	pop	r19
     af6:	2f 91       	pop	r18
     af8:	0f 90       	pop	r0
     afa:	0b be       	out	0x3b, r0	; 59
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	0b b6       	in	r0, 0x3b	; 59
     b12:	0f 92       	push	r0
     b14:	2f 93       	push	r18
     b16:	3f 93       	push	r19
     b18:	4f 93       	push	r20
     b1a:	5f 93       	push	r21
     b1c:	6f 93       	push	r22
     b1e:	7f 93       	push	r23
     b20:	8f 93       	push	r24
     b22:	9f 93       	push	r25
     b24:	af 93       	push	r26
     b26:	bf 93       	push	r27
     b28:	ef 93       	push	r30
     b2a:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     b2c:	e0 91 30 20 	lds	r30, 0x2030
     b30:	f0 91 31 20 	lds	r31, 0x2031
     b34:	30 97       	sbiw	r30, 0x00	; 0
     b36:	09 f0       	breq	.+2      	; 0xb3a <__vector_86+0x34>
		tc_tcd1_ccb_callback();
     b38:	19 95       	eicall
	}
}
     b3a:	ff 91       	pop	r31
     b3c:	ef 91       	pop	r30
     b3e:	bf 91       	pop	r27
     b40:	af 91       	pop	r26
     b42:	9f 91       	pop	r25
     b44:	8f 91       	pop	r24
     b46:	7f 91       	pop	r23
     b48:	6f 91       	pop	r22
     b4a:	5f 91       	pop	r21
     b4c:	4f 91       	pop	r20
     b4e:	3f 91       	pop	r19
     b50:	2f 91       	pop	r18
     b52:	0f 90       	pop	r0
     b54:	0b be       	out	0x3b, r0	; 59
     b56:	0f 90       	pop	r0
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	0f 90       	pop	r0
     b5c:	1f 90       	pop	r1
     b5e:	18 95       	reti

00000b60 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     b60:	1f 92       	push	r1
     b62:	0f 92       	push	r0
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	0f 92       	push	r0
     b68:	11 24       	eor	r1, r1
     b6a:	0b b6       	in	r0, 0x3b	; 59
     b6c:	0f 92       	push	r0
     b6e:	2f 93       	push	r18
     b70:	3f 93       	push	r19
     b72:	4f 93       	push	r20
     b74:	5f 93       	push	r21
     b76:	6f 93       	push	r22
     b78:	7f 93       	push	r23
     b7a:	8f 93       	push	r24
     b7c:	9f 93       	push	r25
     b7e:	af 93       	push	r26
     b80:	bf 93       	push	r27
     b82:	ef 93       	push	r30
     b84:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     b86:	e0 91 2e 20 	lds	r30, 0x202E
     b8a:	f0 91 2f 20 	lds	r31, 0x202F
     b8e:	30 97       	sbiw	r30, 0x00	; 0
     b90:	09 f0       	breq	.+2      	; 0xb94 <__vector_47+0x34>
		tc_tce0_ovf_callback();
     b92:	19 95       	eicall
	}
}
     b94:	ff 91       	pop	r31
     b96:	ef 91       	pop	r30
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	7f 91       	pop	r23
     ba2:	6f 91       	pop	r22
     ba4:	5f 91       	pop	r21
     ba6:	4f 91       	pop	r20
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	0f 90       	pop	r0
     bae:	0b be       	out	0x3b, r0	; 59
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	0b b6       	in	r0, 0x3b	; 59
     bc6:	0f 92       	push	r0
     bc8:	2f 93       	push	r18
     bca:	3f 93       	push	r19
     bcc:	4f 93       	push	r20
     bce:	5f 93       	push	r21
     bd0:	6f 93       	push	r22
     bd2:	7f 93       	push	r23
     bd4:	8f 93       	push	r24
     bd6:	9f 93       	push	r25
     bd8:	af 93       	push	r26
     bda:	bf 93       	push	r27
     bdc:	ef 93       	push	r30
     bde:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     be0:	e0 91 2c 20 	lds	r30, 0x202C
     be4:	f0 91 2d 20 	lds	r31, 0x202D
     be8:	30 97       	sbiw	r30, 0x00	; 0
     bea:	09 f0       	breq	.+2      	; 0xbee <__vector_48+0x34>
		tc_tce0_err_callback();
     bec:	19 95       	eicall
	}
}
     bee:	ff 91       	pop	r31
     bf0:	ef 91       	pop	r30
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	0f 90       	pop	r0
     c08:	0b be       	out	0x3b, r0	; 59
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f 90       	pop	r0
     c10:	1f 90       	pop	r1
     c12:	18 95       	reti

00000c14 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     c14:	1f 92       	push	r1
     c16:	0f 92       	push	r0
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	0b b6       	in	r0, 0x3b	; 59
     c20:	0f 92       	push	r0
     c22:	2f 93       	push	r18
     c24:	3f 93       	push	r19
     c26:	4f 93       	push	r20
     c28:	5f 93       	push	r21
     c2a:	6f 93       	push	r22
     c2c:	7f 93       	push	r23
     c2e:	8f 93       	push	r24
     c30:	9f 93       	push	r25
     c32:	af 93       	push	r26
     c34:	bf 93       	push	r27
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     c3a:	e0 91 2a 20 	lds	r30, 0x202A
     c3e:	f0 91 2b 20 	lds	r31, 0x202B
     c42:	30 97       	sbiw	r30, 0x00	; 0
     c44:	09 f0       	breq	.+2      	; 0xc48 <__vector_49+0x34>
		tc_tce0_cca_callback();
     c46:	19 95       	eicall
	}
}
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	0f 90       	pop	r0
     c62:	0b be       	out	0x3b, r0	; 59
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	0f 92       	push	r0
     c76:	11 24       	eor	r1, r1
     c78:	0b b6       	in	r0, 0x3b	; 59
     c7a:	0f 92       	push	r0
     c7c:	2f 93       	push	r18
     c7e:	3f 93       	push	r19
     c80:	4f 93       	push	r20
     c82:	5f 93       	push	r21
     c84:	6f 93       	push	r22
     c86:	7f 93       	push	r23
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	af 93       	push	r26
     c8e:	bf 93       	push	r27
     c90:	ef 93       	push	r30
     c92:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     c94:	e0 91 28 20 	lds	r30, 0x2028
     c98:	f0 91 29 20 	lds	r31, 0x2029
     c9c:	30 97       	sbiw	r30, 0x00	; 0
     c9e:	09 f0       	breq	.+2      	; 0xca2 <__vector_50+0x34>
		tc_tce0_ccb_callback();
     ca0:	19 95       	eicall
	}
}
     ca2:	ff 91       	pop	r31
     ca4:	ef 91       	pop	r30
     ca6:	bf 91       	pop	r27
     ca8:	af 91       	pop	r26
     caa:	9f 91       	pop	r25
     cac:	8f 91       	pop	r24
     cae:	7f 91       	pop	r23
     cb0:	6f 91       	pop	r22
     cb2:	5f 91       	pop	r21
     cb4:	4f 91       	pop	r20
     cb6:	3f 91       	pop	r19
     cb8:	2f 91       	pop	r18
     cba:	0f 90       	pop	r0
     cbc:	0b be       	out	0x3b, r0	; 59
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	0f 90       	pop	r0
     cc4:	1f 90       	pop	r1
     cc6:	18 95       	reti

00000cc8 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     cc8:	1f 92       	push	r1
     cca:	0f 92       	push	r0
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	0f 92       	push	r0
     cd0:	11 24       	eor	r1, r1
     cd2:	0b b6       	in	r0, 0x3b	; 59
     cd4:	0f 92       	push	r0
     cd6:	2f 93       	push	r18
     cd8:	3f 93       	push	r19
     cda:	4f 93       	push	r20
     cdc:	5f 93       	push	r21
     cde:	6f 93       	push	r22
     ce0:	7f 93       	push	r23
     ce2:	8f 93       	push	r24
     ce4:	9f 93       	push	r25
     ce6:	af 93       	push	r26
     ce8:	bf 93       	push	r27
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     cee:	e0 91 26 20 	lds	r30, 0x2026
     cf2:	f0 91 27 20 	lds	r31, 0x2027
     cf6:	30 97       	sbiw	r30, 0x00	; 0
     cf8:	09 f0       	breq	.+2      	; 0xcfc <__vector_51+0x34>
		tc_tce0_ccc_callback();
     cfa:	19 95       	eicall
	}
}
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0b be       	out	0x3b, r0	; 59
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	0b b6       	in	r0, 0x3b	; 59
     d2e:	0f 92       	push	r0
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     d48:	e0 91 24 20 	lds	r30, 0x2024
     d4c:	f0 91 25 20 	lds	r31, 0x2025
     d50:	30 97       	sbiw	r30, 0x00	; 0
     d52:	09 f0       	breq	.+2      	; 0xd56 <__vector_52+0x34>
		tc_tce0_ccd_callback();
     d54:	19 95       	eicall
	}
}
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	bf 91       	pop	r27
     d5c:	af 91       	pop	r26
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	7f 91       	pop	r23
     d64:	6f 91       	pop	r22
     d66:	5f 91       	pop	r21
     d68:	4f 91       	pop	r20
     d6a:	3f 91       	pop	r19
     d6c:	2f 91       	pop	r18
     d6e:	0f 90       	pop	r0
     d70:	0b be       	out	0x3b, r0	; 59
     d72:	0f 90       	pop	r0
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	0f 90       	pop	r0
     d78:	1f 90       	pop	r1
     d7a:	18 95       	reti

00000d7c <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	0b b6       	in	r0, 0x3b	; 59
     d88:	0f 92       	push	r0
     d8a:	2f 93       	push	r18
     d8c:	3f 93       	push	r19
     d8e:	4f 93       	push	r20
     d90:	5f 93       	push	r21
     d92:	6f 93       	push	r22
     d94:	7f 93       	push	r23
     d96:	8f 93       	push	r24
     d98:	9f 93       	push	r25
     d9a:	af 93       	push	r26
     d9c:	bf 93       	push	r27
     d9e:	ef 93       	push	r30
     da0:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
     da2:	e0 91 22 20 	lds	r30, 0x2022
     da6:	f0 91 23 20 	lds	r31, 0x2023
     daa:	30 97       	sbiw	r30, 0x00	; 0
     dac:	09 f0       	breq	.+2      	; 0xdb0 <__vector_53+0x34>
		tc_tce1_ovf_callback();
     dae:	19 95       	eicall
	}
}
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0b be       	out	0x3b, r0	; 59
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	0b b6       	in	r0, 0x3b	; 59
     de2:	0f 92       	push	r0
     de4:	2f 93       	push	r18
     de6:	3f 93       	push	r19
     de8:	4f 93       	push	r20
     dea:	5f 93       	push	r21
     dec:	6f 93       	push	r22
     dee:	7f 93       	push	r23
     df0:	8f 93       	push	r24
     df2:	9f 93       	push	r25
     df4:	af 93       	push	r26
     df6:	bf 93       	push	r27
     df8:	ef 93       	push	r30
     dfa:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
     dfc:	e0 91 20 20 	lds	r30, 0x2020
     e00:	f0 91 21 20 	lds	r31, 0x2021
     e04:	30 97       	sbiw	r30, 0x00	; 0
     e06:	09 f0       	breq	.+2      	; 0xe0a <__vector_54+0x34>
		tc_tce1_err_callback();
     e08:	19 95       	eicall
	}
}
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	bf 91       	pop	r27
     e10:	af 91       	pop	r26
     e12:	9f 91       	pop	r25
     e14:	8f 91       	pop	r24
     e16:	7f 91       	pop	r23
     e18:	6f 91       	pop	r22
     e1a:	5f 91       	pop	r21
     e1c:	4f 91       	pop	r20
     e1e:	3f 91       	pop	r19
     e20:	2f 91       	pop	r18
     e22:	0f 90       	pop	r0
     e24:	0b be       	out	0x3b, r0	; 59
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	0b b6       	in	r0, 0x3b	; 59
     e3c:	0f 92       	push	r0
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
     e56:	e0 91 1e 20 	lds	r30, 0x201E
     e5a:	f0 91 1f 20 	lds	r31, 0x201F
     e5e:	30 97       	sbiw	r30, 0x00	; 0
     e60:	09 f0       	breq	.+2      	; 0xe64 <__vector_55+0x34>
		tc_tce1_cca_callback();
     e62:	19 95       	eicall
	}
}
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	bf 91       	pop	r27
     e6a:	af 91       	pop	r26
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	7f 91       	pop	r23
     e72:	6f 91       	pop	r22
     e74:	5f 91       	pop	r21
     e76:	4f 91       	pop	r20
     e78:	3f 91       	pop	r19
     e7a:	2f 91       	pop	r18
     e7c:	0f 90       	pop	r0
     e7e:	0b be       	out	0x3b, r0	; 59
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
     e8a:	1f 92       	push	r1
     e8c:	0f 92       	push	r0
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	0f 92       	push	r0
     e92:	11 24       	eor	r1, r1
     e94:	0b b6       	in	r0, 0x3b	; 59
     e96:	0f 92       	push	r0
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
     eb0:	e0 91 1c 20 	lds	r30, 0x201C
     eb4:	f0 91 1d 20 	lds	r31, 0x201D
     eb8:	30 97       	sbiw	r30, 0x00	; 0
     eba:	09 f0       	breq	.+2      	; 0xebe <__vector_56+0x34>
		tc_tce1_ccb_callback();
     ebc:	19 95       	eicall
	}
}
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0b be       	out	0x3b, r0	; 59
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
     ee4:	1f 92       	push	r1
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	0b b6       	in	r0, 0x3b	; 59
     ef0:	0f 92       	push	r0
     ef2:	2f 93       	push	r18
     ef4:	3f 93       	push	r19
     ef6:	4f 93       	push	r20
     ef8:	5f 93       	push	r21
     efa:	6f 93       	push	r22
     efc:	7f 93       	push	r23
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	af 93       	push	r26
     f04:	bf 93       	push	r27
     f06:	ef 93       	push	r30
     f08:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
     f0a:	e0 91 1a 20 	lds	r30, 0x201A
     f0e:	f0 91 1b 20 	lds	r31, 0x201B
     f12:	30 97       	sbiw	r30, 0x00	; 0
     f14:	09 f0       	breq	.+2      	; 0xf18 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
     f16:	19 95       	eicall
	}
}
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	0b be       	out	0x3b, r0	; 59
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	0f 90       	pop	r0
     f3a:	1f 90       	pop	r1
     f3c:	18 95       	reti

00000f3e <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
     f3e:	1f 92       	push	r1
     f40:	0f 92       	push	r0
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	0f 92       	push	r0
     f46:	11 24       	eor	r1, r1
     f48:	0b b6       	in	r0, 0x3b	; 59
     f4a:	0f 92       	push	r0
     f4c:	2f 93       	push	r18
     f4e:	3f 93       	push	r19
     f50:	4f 93       	push	r20
     f52:	5f 93       	push	r21
     f54:	6f 93       	push	r22
     f56:	7f 93       	push	r23
     f58:	8f 93       	push	r24
     f5a:	9f 93       	push	r25
     f5c:	af 93       	push	r26
     f5e:	bf 93       	push	r27
     f60:	ef 93       	push	r30
     f62:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
     f64:	e0 91 18 20 	lds	r30, 0x2018
     f68:	f0 91 19 20 	lds	r31, 0x2019
     f6c:	30 97       	sbiw	r30, 0x00	; 0
     f6e:	09 f0       	breq	.+2      	; 0xf72 <__vector_109+0x34>
		tc_tcf0_err_callback();
     f70:	19 95       	eicall
	}
}
     f72:	ff 91       	pop	r31
     f74:	ef 91       	pop	r30
     f76:	bf 91       	pop	r27
     f78:	af 91       	pop	r26
     f7a:	9f 91       	pop	r25
     f7c:	8f 91       	pop	r24
     f7e:	7f 91       	pop	r23
     f80:	6f 91       	pop	r22
     f82:	5f 91       	pop	r21
     f84:	4f 91       	pop	r20
     f86:	3f 91       	pop	r19
     f88:	2f 91       	pop	r18
     f8a:	0f 90       	pop	r0
     f8c:	0b be       	out	0x3b, r0	; 59
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	0f 90       	pop	r0
     f94:	1f 90       	pop	r1
     f96:	18 95       	reti

00000f98 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	0b b6       	in	r0, 0x3b	; 59
     fa4:	0f 92       	push	r0
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	ef 93       	push	r30
     fbc:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
     fbe:	e0 91 16 20 	lds	r30, 0x2016
     fc2:	f0 91 17 20 	lds	r31, 0x2017
     fc6:	30 97       	sbiw	r30, 0x00	; 0
     fc8:	09 f0       	breq	.+2      	; 0xfcc <__vector_110+0x34>
		tc_tcf0_cca_callback();
     fca:	19 95       	eicall
	}
}
     fcc:	ff 91       	pop	r31
     fce:	ef 91       	pop	r30
     fd0:	bf 91       	pop	r27
     fd2:	af 91       	pop	r26
     fd4:	9f 91       	pop	r25
     fd6:	8f 91       	pop	r24
     fd8:	7f 91       	pop	r23
     fda:	6f 91       	pop	r22
     fdc:	5f 91       	pop	r21
     fde:	4f 91       	pop	r20
     fe0:	3f 91       	pop	r19
     fe2:	2f 91       	pop	r18
     fe4:	0f 90       	pop	r0
     fe6:	0b be       	out	0x3b, r0	; 59
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	0b b6       	in	r0, 0x3b	; 59
     ffe:	0f 92       	push	r0
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1018:	e0 91 14 20 	lds	r30, 0x2014
    101c:	f0 91 15 20 	lds	r31, 0x2015
    1020:	30 97       	sbiw	r30, 0x00	; 0
    1022:	09 f0       	breq	.+2      	; 0x1026 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1024:	19 95       	eicall
	}
}
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	bf 91       	pop	r27
    102c:	af 91       	pop	r26
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	7f 91       	pop	r23
    1034:	6f 91       	pop	r22
    1036:	5f 91       	pop	r21
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0b be       	out	0x3b, r0	; 59
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    104c:	1f 92       	push	r1
    104e:	0f 92       	push	r0
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	0f 92       	push	r0
    1054:	11 24       	eor	r1, r1
    1056:	0b b6       	in	r0, 0x3b	; 59
    1058:	0f 92       	push	r0
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1072:	e0 91 12 20 	lds	r30, 0x2012
    1076:	f0 91 13 20 	lds	r31, 0x2013
    107a:	30 97       	sbiw	r30, 0x00	; 0
    107c:	09 f0       	breq	.+2      	; 0x1080 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    107e:	19 95       	eicall
	}
}
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0b be       	out	0x3b, r0	; 59
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	11 24       	eor	r1, r1
    10b0:	0b b6       	in	r0, 0x3b	; 59
    10b2:	0f 92       	push	r0
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	4f 93       	push	r20
    10ba:	5f 93       	push	r21
    10bc:	6f 93       	push	r22
    10be:	7f 93       	push	r23
    10c0:	8f 93       	push	r24
    10c2:	9f 93       	push	r25
    10c4:	af 93       	push	r26
    10c6:	bf 93       	push	r27
    10c8:	ef 93       	push	r30
    10ca:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    10cc:	e0 91 10 20 	lds	r30, 0x2010
    10d0:	f0 91 11 20 	lds	r31, 0x2011
    10d4:	30 97       	sbiw	r30, 0x00	; 0
    10d6:	09 f0       	breq	.+2      	; 0x10da <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    10d8:	19 95       	eicall
	}
}
    10da:	ff 91       	pop	r31
    10dc:	ef 91       	pop	r30
    10de:	bf 91       	pop	r27
    10e0:	af 91       	pop	r26
    10e2:	9f 91       	pop	r25
    10e4:	8f 91       	pop	r24
    10e6:	7f 91       	pop	r23
    10e8:	6f 91       	pop	r22
    10ea:	5f 91       	pop	r21
    10ec:	4f 91       	pop	r20
    10ee:	3f 91       	pop	r19
    10f0:	2f 91       	pop	r18
    10f2:	0f 90       	pop	r0
    10f4:	0b be       	out	0x3b, r0	; 59
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f 90       	pop	r0
    10fc:	1f 90       	pop	r1
    10fe:	18 95       	reti

00001100 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1100:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1102:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    1104:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1106:	28 2f       	mov	r18, r24
    1108:	39 2f       	mov	r19, r25
    110a:	21 15       	cp	r18, r1
    110c:	88 e0       	ldi	r24, 0x08	; 8
    110e:	38 07       	cpc	r19, r24
    1110:	39 f4       	brne	.+14     	; 0x1120 <tc_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	24 d5       	rcall	.+2632   	; 0x1b60 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1118:	64 e0       	ldi	r22, 0x04	; 4
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	21 d5       	rcall	.+2626   	; 0x1b60 <sysclk_enable_module>
    111e:	43 c0       	rjmp	.+134    	; 0x11a6 <tc_enable+0xa6>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1120:	20 34       	cpi	r18, 0x40	; 64
    1122:	88 e0       	ldi	r24, 0x08	; 8
    1124:	38 07       	cpc	r19, r24
    1126:	39 f4       	brne	.+14     	; 0x1136 <tc_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1128:	62 e0       	ldi	r22, 0x02	; 2
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	19 d5       	rcall	.+2610   	; 0x1b60 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    112e:	64 e0       	ldi	r22, 0x04	; 4
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	16 d5       	rcall	.+2604   	; 0x1b60 <sysclk_enable_module>
    1134:	38 c0       	rjmp	.+112    	; 0x11a6 <tc_enable+0xa6>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1136:	21 15       	cp	r18, r1
    1138:	89 e0       	ldi	r24, 0x09	; 9
    113a:	38 07       	cpc	r19, r24
    113c:	39 f4       	brne	.+14     	; 0x114c <tc_enable+0x4c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	84 e0       	ldi	r24, 0x04	; 4
    1142:	0e d5       	rcall	.+2588   	; 0x1b60 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1144:	64 e0       	ldi	r22, 0x04	; 4
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	0b d5       	rcall	.+2582   	; 0x1b60 <sysclk_enable_module>
    114a:	2d c0       	rjmp	.+90     	; 0x11a6 <tc_enable+0xa6>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    114c:	20 34       	cpi	r18, 0x40	; 64
    114e:	89 e0       	ldi	r24, 0x09	; 9
    1150:	38 07       	cpc	r19, r24
    1152:	39 f4       	brne	.+14     	; 0x1162 <tc_enable+0x62>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1154:	62 e0       	ldi	r22, 0x02	; 2
    1156:	84 e0       	ldi	r24, 0x04	; 4
    1158:	03 d5       	rcall	.+2566   	; 0x1b60 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    115a:	64 e0       	ldi	r22, 0x04	; 4
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	00 d5       	rcall	.+2560   	; 0x1b60 <sysclk_enable_module>
    1160:	22 c0       	rjmp	.+68     	; 0x11a6 <tc_enable+0xa6>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1162:	21 15       	cp	r18, r1
    1164:	8a e0       	ldi	r24, 0x0A	; 10
    1166:	38 07       	cpc	r19, r24
    1168:	39 f4       	brne	.+14     	; 0x1178 <tc_enable+0x78>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    116a:	61 e0       	ldi	r22, 0x01	; 1
    116c:	85 e0       	ldi	r24, 0x05	; 5
    116e:	f8 d4       	rcall	.+2544   	; 0x1b60 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1170:	64 e0       	ldi	r22, 0x04	; 4
    1172:	85 e0       	ldi	r24, 0x05	; 5
    1174:	f5 d4       	rcall	.+2538   	; 0x1b60 <sysclk_enable_module>
    1176:	17 c0       	rjmp	.+46     	; 0x11a6 <tc_enable+0xa6>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1178:	20 34       	cpi	r18, 0x40	; 64
    117a:	8a e0       	ldi	r24, 0x0A	; 10
    117c:	38 07       	cpc	r19, r24
    117e:	39 f4       	brne	.+14     	; 0x118e <tc_enable+0x8e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1180:	62 e0       	ldi	r22, 0x02	; 2
    1182:	85 e0       	ldi	r24, 0x05	; 5
    1184:	ed d4       	rcall	.+2522   	; 0x1b60 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1186:	64 e0       	ldi	r22, 0x04	; 4
    1188:	85 e0       	ldi	r24, 0x05	; 5
    118a:	ea d4       	rcall	.+2516   	; 0x1b60 <sysclk_enable_module>
    118c:	0c c0       	rjmp	.+24     	; 0x11a6 <tc_enable+0xa6>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    118e:	21 15       	cp	r18, r1
    1190:	3b 40       	sbci	r19, 0x0B	; 11
    1192:	39 f4       	brne	.+14     	; 0x11a2 <tc_enable+0xa2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	86 e0       	ldi	r24, 0x06	; 6
    1198:	e3 d4       	rcall	.+2502   	; 0x1b60 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    119a:	64 e0       	ldi	r22, 0x04	; 4
    119c:	86 e0       	ldi	r24, 0x06	; 6
    119e:	e0 d4       	rcall	.+2496   	; 0x1b60 <sysclk_enable_module>
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <tc_enable+0xa6>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11a2:	cf bf       	out	0x3f, r28	; 63
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <tc_enable+0xc2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    11a6:	80 91 63 20 	lds	r24, 0x2063
    11aa:	8f 3f       	cpi	r24, 0xFF	; 255
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <tc_enable+0xb0>
    11ae:	ff cf       	rjmp	.-2      	; 0x11ae <tc_enable+0xae>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    11b0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    11b2:	f8 94       	cli
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    11b4:	e3 e6       	ldi	r30, 0x63	; 99
    11b6:	f0 e2       	ldi	r31, 0x20	; 32
    11b8:	90 81       	ld	r25, Z
    11ba:	9f 5f       	subi	r25, 0xFF	; 255
    11bc:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11be:	8f bf       	out	0x3f, r24	; 63
    11c0:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    11c6:	fc 01       	movw	r30, r24
    11c8:	81 81       	ldd	r24, Z+1	; 0x01
    11ca:	85 ff       	sbrs	r24, 5
    11cc:	fd cf       	rjmp	.-6      	; 0x11c8 <usart_putchar+0x2>
    11ce:	60 83       	st	Z, r22
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	08 95       	ret

000011d6 <usart_getchar>:
    11d6:	fc 01       	movw	r30, r24
    11d8:	81 81       	ldd	r24, Z+1	; 0x01
    11da:	88 23       	and	r24, r24
    11dc:	ec f7       	brge	.-6      	; 0x11d8 <usart_getchar+0x2>
    11de:	80 81       	ld	r24, Z
    11e0:	08 95       	ret

000011e2 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    11e2:	4f 92       	push	r4
    11e4:	5f 92       	push	r5
    11e6:	6f 92       	push	r6
    11e8:	7f 92       	push	r7
    11ea:	8f 92       	push	r8
    11ec:	9f 92       	push	r9
    11ee:	af 92       	push	r10
    11f0:	bf 92       	push	r11
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	ec 01       	movw	r28, r24
    1204:	4a 01       	movw	r8, r20
    1206:	5b 01       	movw	r10, r22
    1208:	28 01       	movw	r4, r16
    120a:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    120c:	d9 01       	movw	r26, r18
    120e:	c8 01       	movw	r24, r16
    1210:	68 94       	set
    1212:	12 f8       	bld	r1, 2
    1214:	b6 95       	lsr	r27
    1216:	a7 95       	ror	r26
    1218:	97 95       	ror	r25
    121a:	87 95       	ror	r24
    121c:	16 94       	lsr	r1
    121e:	d1 f7       	brne	.-12     	; 0x1214 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1220:	b9 01       	movw	r22, r18
    1222:	a8 01       	movw	r20, r16
    1224:	03 2e       	mov	r0, r19
    1226:	36 e1       	ldi	r19, 0x16	; 22
    1228:	76 95       	lsr	r23
    122a:	67 95       	ror	r22
    122c:	57 95       	ror	r21
    122e:	47 95       	ror	r20
    1230:	3a 95       	dec	r19
    1232:	d1 f7       	brne	.-12     	; 0x1228 <usart_set_baudrate+0x46>
    1234:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1236:	2c 81       	ldd	r18, Y+4	; 0x04
    1238:	22 fd       	sbrc	r18, 2
    123a:	08 c0       	rjmp	.+16     	; 0x124c <usart_set_baudrate+0x6a>
		max_rate /= 2;
    123c:	b6 95       	lsr	r27
    123e:	a7 95       	ror	r26
    1240:	97 95       	ror	r25
    1242:	87 95       	ror	r24
		min_rate /= 2;
    1244:	76 95       	lsr	r23
    1246:	67 95       	ror	r22
    1248:	57 95       	ror	r21
    124a:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    124c:	88 15       	cp	r24, r8
    124e:	99 05       	cpc	r25, r9
    1250:	aa 05       	cpc	r26, r10
    1252:	bb 05       	cpc	r27, r11
    1254:	08 f4       	brcc	.+2      	; 0x1258 <usart_set_baudrate+0x76>
    1256:	a6 c0       	rjmp	.+332    	; 0x13a4 <usart_set_baudrate+0x1c2>
    1258:	84 16       	cp	r8, r20
    125a:	95 06       	cpc	r9, r21
    125c:	a6 06       	cpc	r10, r22
    125e:	b7 06       	cpc	r11, r23
    1260:	08 f4       	brcc	.+2      	; 0x1264 <usart_set_baudrate+0x82>
    1262:	a2 c0       	rjmp	.+324    	; 0x13a8 <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	82 fd       	sbrc	r24, 2
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <usart_set_baudrate+0x90>
		baud *= 2;
    126a:	88 0c       	add	r8, r8
    126c:	99 1c       	adc	r9, r9
    126e:	aa 1c       	adc	r10, r10
    1270:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1272:	c3 01       	movw	r24, r6
    1274:	b2 01       	movw	r22, r4
    1276:	a5 01       	movw	r20, r10
    1278:	94 01       	movw	r18, r8
    127a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    127e:	2f 3f       	cpi	r18, 0xFF	; 255
    1280:	31 05       	cpc	r19, r1
    1282:	41 05       	cpc	r20, r1
    1284:	51 05       	cpc	r21, r1
    1286:	08 f4       	brcc	.+2      	; 0x128a <usart_set_baudrate+0xa8>
    1288:	91 c0       	rjmp	.+290    	; 0x13ac <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    128a:	c1 2c       	mov	r12, r1
    128c:	d1 2c       	mov	r13, r1
    128e:	76 01       	movw	r14, r12
    1290:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1292:	19 ef       	ldi	r17, 0xF9	; 249
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    1296:	2c 15       	cp	r18, r12
    1298:	3d 05       	cpc	r19, r13
    129a:	4e 05       	cpc	r20, r14
    129c:	5f 05       	cpc	r21, r15
    129e:	68 f0       	brcs	.+26     	; 0x12ba <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    12a0:	cc 0c       	add	r12, r12
    12a2:	dd 1c       	adc	r13, r13
    12a4:	ee 1c       	adc	r14, r14
    12a6:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    12a8:	1d 3f       	cpi	r17, 0xFD	; 253
    12aa:	14 f4       	brge	.+4      	; 0x12b0 <usart_set_baudrate+0xce>
			limit |= 1;
    12ac:	68 94       	set
    12ae:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    12b0:	1f 5f       	subi	r17, 0xFF	; 255
    12b2:	17 30       	cpi	r17, 0x07	; 7
    12b4:	81 f7       	brne	.-32     	; 0x1296 <usart_set_baudrate+0xb4>
    12b6:	21 2f       	mov	r18, r17
    12b8:	50 c0       	rjmp	.+160    	; 0x135a <usart_set_baudrate+0x178>
    12ba:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    12bc:	11 23       	and	r17, r17
    12be:	0c f0       	brlt	.+2      	; 0x12c2 <usart_set_baudrate+0xe0>
    12c0:	4c c0       	rjmp	.+152    	; 0x135a <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    12c2:	d5 01       	movw	r26, r10
    12c4:	c4 01       	movw	r24, r8
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	aa 1f       	adc	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	aa 1f       	adc	r26, r26
    12d4:	bb 1f       	adc	r27, r27
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	aa 1f       	adc	r26, r26
    12dc:	bb 1f       	adc	r27, r27
    12de:	48 1a       	sub	r4, r24
    12e0:	59 0a       	sbc	r5, r25
    12e2:	6a 0a       	sbc	r6, r26
    12e4:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    12e6:	1e 3f       	cpi	r17, 0xFE	; 254
    12e8:	f4 f4       	brge	.+60     	; 0x1326 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    12ea:	6d ef       	ldi	r22, 0xFD	; 253
    12ec:	7f ef       	ldi	r23, 0xFF	; 255
    12ee:	61 1b       	sub	r22, r17
    12f0:	71 09       	sbc	r23, r1
    12f2:	17 fd       	sbrc	r17, 7
    12f4:	73 95       	inc	r23
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <usart_set_baudrate+0x11e>
    12f8:	44 0c       	add	r4, r4
    12fa:	55 1c       	adc	r5, r5
    12fc:	66 1c       	adc	r6, r6
    12fe:	77 1c       	adc	r7, r7
    1300:	6a 95       	dec	r22
    1302:	d2 f7       	brpl	.-12     	; 0x12f8 <usart_set_baudrate+0x116>
    1304:	d5 01       	movw	r26, r10
    1306:	c4 01       	movw	r24, r8
    1308:	b6 95       	lsr	r27
    130a:	a7 95       	ror	r26
    130c:	97 95       	ror	r25
    130e:	87 95       	ror	r24
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	64 0d       	add	r22, r4
    1316:	75 1d       	adc	r23, r5
    1318:	86 1d       	adc	r24, r6
    131a:	97 1d       	adc	r25, r7
    131c:	a5 01       	movw	r20, r10
    131e:	94 01       	movw	r18, r8
    1320:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__udivmodsi4>
    1324:	36 c0       	rjmp	.+108    	; 0x1392 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    1326:	23 e0       	ldi	r18, 0x03	; 3
    1328:	21 0f       	add	r18, r17
    132a:	d5 01       	movw	r26, r10
    132c:	c4 01       	movw	r24, r8
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <usart_set_baudrate+0x156>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	aa 1f       	adc	r26, r26
    1336:	bb 1f       	adc	r27, r27
    1338:	2a 95       	dec	r18
    133a:	d2 f7       	brpl	.-12     	; 0x1330 <usart_set_baudrate+0x14e>
    133c:	9c 01       	movw	r18, r24
    133e:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1340:	b6 95       	lsr	r27
    1342:	a7 95       	ror	r26
    1344:	97 95       	ror	r25
    1346:	87 95       	ror	r24
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	64 0d       	add	r22, r4
    134e:	75 1d       	adc	r23, r5
    1350:	86 1d       	adc	r24, r6
    1352:	97 1d       	adc	r25, r7
    1354:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__udivmodsi4>
    1358:	1c c0       	rjmp	.+56     	; 0x1392 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    135a:	2d 5f       	subi	r18, 0xFD	; 253
    135c:	d5 01       	movw	r26, r10
    135e:	c4 01       	movw	r24, r8
    1360:	04 c0       	rjmp	.+8      	; 0x136a <usart_set_baudrate+0x188>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	aa 1f       	adc	r26, r26
    1368:	bb 1f       	adc	r27, r27
    136a:	2a 95       	dec	r18
    136c:	d2 f7       	brpl	.-12     	; 0x1362 <usart_set_baudrate+0x180>
    136e:	9c 01       	movw	r18, r24
    1370:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1372:	b6 95       	lsr	r27
    1374:	a7 95       	ror	r26
    1376:	97 95       	ror	r25
    1378:	87 95       	ror	r24
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	64 0d       	add	r22, r4
    1380:	75 1d       	adc	r23, r5
    1382:	86 1d       	adc	r24, r6
    1384:	97 1d       	adc	r25, r7
    1386:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__udivmodsi4>
    138a:	21 50       	subi	r18, 0x01	; 1
    138c:	31 09       	sbc	r19, r1
    138e:	41 09       	sbc	r20, r1
    1390:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1392:	83 2f       	mov	r24, r19
    1394:	8f 70       	andi	r24, 0x0F	; 15
    1396:	12 95       	swap	r17
    1398:	10 7f       	andi	r17, 0xF0	; 240
    139a:	18 2b       	or	r17, r24
    139c:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    139e:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	18 c0       	rjmp	.+48     	; 0x13d4 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	16 c0       	rjmp	.+44     	; 0x13d4 <usart_set_baudrate+0x1f2>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	14 c0       	rjmp	.+40     	; 0x13d4 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    13ac:	d5 01       	movw	r26, r10
    13ae:	c4 01       	movw	r24, r8
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	aa 1f       	adc	r26, r26
    13b6:	bb 1f       	adc	r27, r27
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	aa 1f       	adc	r26, r26
    13be:	bb 1f       	adc	r27, r27
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	aa 1f       	adc	r26, r26
    13c6:	bb 1f       	adc	r27, r27
    13c8:	48 1a       	sub	r4, r24
    13ca:	59 0a       	sbc	r5, r25
    13cc:	6a 0a       	sbc	r6, r26
    13ce:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    13d0:	19 ef       	ldi	r17, 0xF9	; 249
    13d2:	8b cf       	rjmp	.-234    	; 0x12ea <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	9f 90       	pop	r9
    13ea:	8f 90       	pop	r8
    13ec:	7f 90       	pop	r7
    13ee:	6f 90       	pop	r6
    13f0:	5f 90       	pop	r5
    13f2:	4f 90       	pop	r4
    13f4:	08 95       	ret

000013f6 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	ec 01       	movw	r28, r24
    1400:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	09 f4       	brne	.+2      	; 0x1408 <usart_init_rs232+0x12>
    1406:	e6 c0       	rjmp	.+460    	; 0x15d4 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1408:	80 3c       	cpi	r24, 0xC0	; 192
    140a:	91 05       	cpc	r25, r1
    140c:	21 f4       	brne	.+8      	; 0x1416 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    140e:	60 e1       	ldi	r22, 0x10	; 16
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	a6 d3       	rcall	.+1868   	; 0x1b60 <sysclk_enable_module>
    1414:	df c0       	rjmp	.+446    	; 0x15d4 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1416:	c0 38       	cpi	r28, 0x80	; 128
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	d8 07       	cpc	r29, r24
    141c:	21 f4       	brne	.+8      	; 0x1426 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	9e d3       	rcall	.+1852   	; 0x1b60 <sysclk_enable_module>
    1424:	d7 c0       	rjmp	.+430    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1426:	c1 15       	cp	r28, r1
    1428:	e1 e0       	ldi	r30, 0x01	; 1
    142a:	de 07       	cpc	r29, r30
    142c:	21 f4       	brne	.+8      	; 0x1436 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	96 d3       	rcall	.+1836   	; 0x1b60 <sysclk_enable_module>
    1434:	cf c0       	rjmp	.+414    	; 0x15d4 <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1436:	c0 38       	cpi	r28, 0x80	; 128
    1438:	f3 e0       	ldi	r31, 0x03	; 3
    143a:	df 07       	cpc	r29, r31
    143c:	21 f4       	brne	.+8      	; 0x1446 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	8e d3       	rcall	.+1820   	; 0x1b60 <sysclk_enable_module>
    1444:	c7 c0       	rjmp	.+398    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1446:	c0 39       	cpi	r28, 0x90	; 144
    1448:	83 e0       	ldi	r24, 0x03	; 3
    144a:	d8 07       	cpc	r29, r24
    144c:	21 f4       	brne	.+8      	; 0x1456 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	86 d3       	rcall	.+1804   	; 0x1b60 <sysclk_enable_module>
    1454:	bf c0       	rjmp	.+382    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1456:	c1 15       	cp	r28, r1
    1458:	e2 e0       	ldi	r30, 0x02	; 2
    145a:	de 07       	cpc	r29, r30
    145c:	21 f4       	brne	.+8      	; 0x1466 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    145e:	62 e0       	ldi	r22, 0x02	; 2
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	7e d3       	rcall	.+1788   	; 0x1b60 <sysclk_enable_module>
    1464:	b7 c0       	rjmp	.+366    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1466:	c0 34       	cpi	r28, 0x40	; 64
    1468:	f2 e0       	ldi	r31, 0x02	; 2
    146a:	df 07       	cpc	r29, r31
    146c:	21 f4       	brne	.+8      	; 0x1476 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    146e:	62 e0       	ldi	r22, 0x02	; 2
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	76 d3       	rcall	.+1772   	; 0x1b60 <sysclk_enable_module>
    1474:	af c0       	rjmp	.+350    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1476:	c0 32       	cpi	r28, 0x20	; 32
    1478:	83 e0       	ldi	r24, 0x03	; 3
    147a:	d8 07       	cpc	r29, r24
    147c:	21 f4       	brne	.+8      	; 0x1486 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    147e:	64 e0       	ldi	r22, 0x04	; 4
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	6e d3       	rcall	.+1756   	; 0x1b60 <sysclk_enable_module>
    1484:	a7 c0       	rjmp	.+334    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1486:	c1 15       	cp	r28, r1
    1488:	e8 e0       	ldi	r30, 0x08	; 8
    148a:	de 07       	cpc	r29, r30
    148c:	21 f4       	brne	.+8      	; 0x1496 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    148e:	61 e0       	ldi	r22, 0x01	; 1
    1490:	83 e0       	ldi	r24, 0x03	; 3
    1492:	66 d3       	rcall	.+1740   	; 0x1b60 <sysclk_enable_module>
    1494:	9f c0       	rjmp	.+318    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1496:	c1 15       	cp	r28, r1
    1498:	f9 e0       	ldi	r31, 0x09	; 9
    149a:	df 07       	cpc	r29, r31
    149c:	21 f4       	brne	.+8      	; 0x14a6 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    149e:	61 e0       	ldi	r22, 0x01	; 1
    14a0:	84 e0       	ldi	r24, 0x04	; 4
    14a2:	5e d3       	rcall	.+1724   	; 0x1b60 <sysclk_enable_module>
    14a4:	97 c0       	rjmp	.+302    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    14a6:	c1 15       	cp	r28, r1
    14a8:	8a e0       	ldi	r24, 0x0A	; 10
    14aa:	d8 07       	cpc	r29, r24
    14ac:	21 f4       	brne	.+8      	; 0x14b6 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	85 e0       	ldi	r24, 0x05	; 5
    14b2:	56 d3       	rcall	.+1708   	; 0x1b60 <sysclk_enable_module>
    14b4:	8f c0       	rjmp	.+286    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    14b6:	c1 15       	cp	r28, r1
    14b8:	eb e0       	ldi	r30, 0x0B	; 11
    14ba:	de 07       	cpc	r29, r30
    14bc:	21 f4       	brne	.+8      	; 0x14c6 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	86 e0       	ldi	r24, 0x06	; 6
    14c2:	4e d3       	rcall	.+1692   	; 0x1b60 <sysclk_enable_module>
    14c4:	87 c0       	rjmp	.+270    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    14c6:	c0 34       	cpi	r28, 0x40	; 64
    14c8:	f8 e0       	ldi	r31, 0x08	; 8
    14ca:	df 07       	cpc	r29, r31
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    14ce:	62 e0       	ldi	r22, 0x02	; 2
    14d0:	83 e0       	ldi	r24, 0x03	; 3
    14d2:	46 d3       	rcall	.+1676   	; 0x1b60 <sysclk_enable_module>
    14d4:	7f c0       	rjmp	.+254    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    14d6:	c0 34       	cpi	r28, 0x40	; 64
    14d8:	89 e0       	ldi	r24, 0x09	; 9
    14da:	d8 07       	cpc	r29, r24
    14dc:	21 f4       	brne	.+8      	; 0x14e6 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	84 e0       	ldi	r24, 0x04	; 4
    14e2:	3e d3       	rcall	.+1660   	; 0x1b60 <sysclk_enable_module>
    14e4:	77 c0       	rjmp	.+238    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    14e6:	c0 34       	cpi	r28, 0x40	; 64
    14e8:	ea e0       	ldi	r30, 0x0A	; 10
    14ea:	de 07       	cpc	r29, r30
    14ec:	21 f4       	brne	.+8      	; 0x14f6 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	85 e0       	ldi	r24, 0x05	; 5
    14f2:	36 d3       	rcall	.+1644   	; 0x1b60 <sysclk_enable_module>
    14f4:	6f c0       	rjmp	.+222    	; 0x15d4 <usart_init_rs232+0x1de>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    14f6:	c0 39       	cpi	r28, 0x90	; 144
    14f8:	f8 e0       	ldi	r31, 0x08	; 8
    14fa:	df 07       	cpc	r29, r31
    14fc:	21 f4       	brne	.+8      	; 0x1506 <usart_init_rs232+0x110>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    14fe:	64 e0       	ldi	r22, 0x04	; 4
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	2e d3       	rcall	.+1628   	; 0x1b60 <sysclk_enable_module>
    1504:	67 c0       	rjmp	.+206    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1506:	c0 39       	cpi	r28, 0x90	; 144
    1508:	89 e0       	ldi	r24, 0x09	; 9
    150a:	d8 07       	cpc	r29, r24
    150c:	21 f4       	brne	.+8      	; 0x1516 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    150e:	64 e0       	ldi	r22, 0x04	; 4
    1510:	84 e0       	ldi	r24, 0x04	; 4
    1512:	26 d3       	rcall	.+1612   	; 0x1b60 <sysclk_enable_module>
    1514:	5f c0       	rjmp	.+190    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1516:	c0 39       	cpi	r28, 0x90	; 144
    1518:	ea e0       	ldi	r30, 0x0A	; 10
    151a:	de 07       	cpc	r29, r30
    151c:	21 f4       	brne	.+8      	; 0x1526 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    151e:	64 e0       	ldi	r22, 0x04	; 4
    1520:	85 e0       	ldi	r24, 0x05	; 5
    1522:	1e d3       	rcall	.+1596   	; 0x1b60 <sysclk_enable_module>
    1524:	57 c0       	rjmp	.+174    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1526:	c0 39       	cpi	r28, 0x90	; 144
    1528:	fb e0       	ldi	r31, 0x0B	; 11
    152a:	df 07       	cpc	r29, r31
    152c:	21 f4       	brne	.+8      	; 0x1536 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    152e:	64 e0       	ldi	r22, 0x04	; 4
    1530:	86 e0       	ldi	r24, 0x06	; 6
    1532:	16 d3       	rcall	.+1580   	; 0x1b60 <sysclk_enable_module>
    1534:	4f c0       	rjmp	.+158    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1536:	c0 3c       	cpi	r28, 0xC0	; 192
    1538:	88 e0       	ldi	r24, 0x08	; 8
    153a:	d8 07       	cpc	r29, r24
    153c:	21 f4       	brne	.+8      	; 0x1546 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    153e:	68 e0       	ldi	r22, 0x08	; 8
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	0e d3       	rcall	.+1564   	; 0x1b60 <sysclk_enable_module>
    1544:	47 c0       	rjmp	.+142    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1546:	c0 3c       	cpi	r28, 0xC0	; 192
    1548:	e9 e0       	ldi	r30, 0x09	; 9
    154a:	de 07       	cpc	r29, r30
    154c:	21 f4       	brne	.+8      	; 0x1556 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    154e:	68 e0       	ldi	r22, 0x08	; 8
    1550:	84 e0       	ldi	r24, 0x04	; 4
    1552:	06 d3       	rcall	.+1548   	; 0x1b60 <sysclk_enable_module>
    1554:	3f c0       	rjmp	.+126    	; 0x15d4 <usart_init_rs232+0x1de>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1556:	c0 3a       	cpi	r28, 0xA0	; 160
    1558:	f8 e0       	ldi	r31, 0x08	; 8
    155a:	df 07       	cpc	r29, r31
    155c:	21 f4       	brne	.+8      	; 0x1566 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    155e:	60 e1       	ldi	r22, 0x10	; 16
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	fe d2       	rcall	.+1532   	; 0x1b60 <sysclk_enable_module>
    1564:	37 c0       	rjmp	.+110    	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1566:	c0 3a       	cpi	r28, 0xA0	; 160
    1568:	89 e0       	ldi	r24, 0x09	; 9
    156a:	d8 07       	cpc	r29, r24
    156c:	21 f4       	brne	.+8      	; 0x1576 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    156e:	60 e1       	ldi	r22, 0x10	; 16
    1570:	84 e0       	ldi	r24, 0x04	; 4
    1572:	f6 d2       	rcall	.+1516   	; 0x1b60 <sysclk_enable_module>
    1574:	2f c0       	rjmp	.+94     	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1576:	c0 3a       	cpi	r28, 0xA0	; 160
    1578:	ea e0       	ldi	r30, 0x0A	; 10
    157a:	de 07       	cpc	r29, r30
    157c:	21 f4       	brne	.+8      	; 0x1586 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    157e:	60 e1       	ldi	r22, 0x10	; 16
    1580:	85 e0       	ldi	r24, 0x05	; 5
    1582:	ee d2       	rcall	.+1500   	; 0x1b60 <sysclk_enable_module>
    1584:	27 c0       	rjmp	.+78     	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1586:	c0 3a       	cpi	r28, 0xA0	; 160
    1588:	fb e0       	ldi	r31, 0x0B	; 11
    158a:	df 07       	cpc	r29, r31
    158c:	21 f4       	brne	.+8      	; 0x1596 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    158e:	60 e1       	ldi	r22, 0x10	; 16
    1590:	86 e0       	ldi	r24, 0x06	; 6
    1592:	e6 d2       	rcall	.+1484   	; 0x1b60 <sysclk_enable_module>
    1594:	1f c0       	rjmp	.+62     	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1596:	c0 3b       	cpi	r28, 0xB0	; 176
    1598:	88 e0       	ldi	r24, 0x08	; 8
    159a:	d8 07       	cpc	r29, r24
    159c:	21 f4       	brne	.+8      	; 0x15a6 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    159e:	60 e2       	ldi	r22, 0x20	; 32
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	de d2       	rcall	.+1468   	; 0x1b60 <sysclk_enable_module>
    15a4:	17 c0       	rjmp	.+46     	; 0x15d4 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    15a6:	c0 3b       	cpi	r28, 0xB0	; 176
    15a8:	e9 e0       	ldi	r30, 0x09	; 9
    15aa:	de 07       	cpc	r29, r30
    15ac:	21 f4       	brne	.+8      	; 0x15b6 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    15ae:	60 e2       	ldi	r22, 0x20	; 32
    15b0:	84 e0       	ldi	r24, 0x04	; 4
    15b2:	d6 d2       	rcall	.+1452   	; 0x1b60 <sysclk_enable_module>
    15b4:	0f c0       	rjmp	.+30     	; 0x15d4 <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    15b6:	c0 38       	cpi	r28, 0x80	; 128
    15b8:	f4 e0       	ldi	r31, 0x04	; 4
    15ba:	df 07       	cpc	r29, r31
    15bc:	21 f4       	brne	.+8      	; 0x15c6 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    15be:	60 e4       	ldi	r22, 0x40	; 64
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	ce d2       	rcall	.+1436   	; 0x1b60 <sysclk_enable_module>
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <usart_init_rs232+0x1de>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    15c6:	c0 3a       	cpi	r28, 0xA0	; 160
    15c8:	84 e0       	ldi	r24, 0x04	; 4
    15ca:	d8 07       	cpc	r29, r24
    15cc:	19 f4       	brne	.+6      	; 0x15d4 <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    15ce:	60 e4       	ldi	r22, 0x40	; 64
    15d0:	85 e0       	ldi	r24, 0x05	; 5
    15d2:	c6 d2       	rcall	.+1420   	; 0x1b60 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	8f 73       	andi	r24, 0x3F	; 63
    15d8:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    15da:	f8 01       	movw	r30, r16
    15dc:	94 81       	ldd	r25, Z+4	; 0x04
    15de:	85 81       	ldd	r24, Z+5	; 0x05
    15e0:	89 2b       	or	r24, r25
    15e2:	96 81       	ldd	r25, Z+6	; 0x06
    15e4:	99 23       	and	r25, r25
    15e6:	11 f0       	breq	.+4      	; 0x15ec <usart_init_rs232+0x1f6>
    15e8:	98 e0       	ldi	r25, 0x08	; 8
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <usart_init_rs232+0x1f8>
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	89 2b       	or	r24, r25
    15f0:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    15f2:	f8 01       	movw	r30, r16
    15f4:	40 81       	ld	r20, Z
    15f6:	51 81       	ldd	r21, Z+1	; 0x01
    15f8:	62 81       	ldd	r22, Z+2	; 0x02
    15fa:	73 81       	ldd	r23, Z+3	; 0x03
    15fc:	00 e8       	ldi	r16, 0x80	; 128
    15fe:	14 e8       	ldi	r17, 0x84	; 132
    1600:	2e e1       	ldi	r18, 0x1E	; 30
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	ce 01       	movw	r24, r28
    1606:	ed dd       	rcall	.-1062   	; 0x11e2 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	98 60       	ori	r25, 0x08	; 8
    160c:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	90 61       	ori	r25, 0x10	; 16
    1612:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	0b b6       	in	r0, 0x3b	; 59
    162a:	0f 92       	push	r0
    162c:	2f 93       	push	r18
    162e:	3f 93       	push	r19
    1630:	4f 93       	push	r20
    1632:	5f 93       	push	r21
    1634:	6f 93       	push	r22
    1636:	7f 93       	push	r23
    1638:	8f 93       	push	r24
    163a:	9f 93       	push	r25
    163c:	af 93       	push	r26
    163e:	bf 93       	push	r27
    1640:	ef 93       	push	r30
    1642:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    1644:	e0 e0       	ldi	r30, 0x00	; 0
    1646:	f2 e0       	ldi	r31, 0x02	; 2
    1648:	44 a1       	ldd	r20, Z+36	; 0x24
    164a:	55 a1       	ldd	r21, Z+37	; 0x25
    164c:	e0 91 5c 20 	lds	r30, 0x205C
    1650:	f0 91 5d 20 	lds	r31, 0x205D
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	92 e0       	ldi	r25, 0x02	; 2
    165a:	19 95       	eicall
}
    165c:	ff 91       	pop	r31
    165e:	ef 91       	pop	r30
    1660:	bf 91       	pop	r27
    1662:	af 91       	pop	r26
    1664:	9f 91       	pop	r25
    1666:	8f 91       	pop	r24
    1668:	7f 91       	pop	r23
    166a:	6f 91       	pop	r22
    166c:	5f 91       	pop	r21
    166e:	4f 91       	pop	r20
    1670:	3f 91       	pop	r19
    1672:	2f 91       	pop	r18
    1674:	0f 90       	pop	r0
    1676:	0b be       	out	0x3b, r0	; 59
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	0b b6       	in	r0, 0x3b	; 59
    168e:	0f 92       	push	r0
    1690:	2f 93       	push	r18
    1692:	3f 93       	push	r19
    1694:	4f 93       	push	r20
    1696:	5f 93       	push	r21
    1698:	6f 93       	push	r22
    169a:	7f 93       	push	r23
    169c:	8f 93       	push	r24
    169e:	9f 93       	push	r25
    16a0:	af 93       	push	r26
    16a2:	bf 93       	push	r27
    16a4:	ef 93       	push	r30
    16a6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    16a8:	e8 e2       	ldi	r30, 0x28	; 40
    16aa:	f2 e0       	ldi	r31, 0x02	; 2
    16ac:	44 81       	ldd	r20, Z+4	; 0x04
    16ae:	55 81       	ldd	r21, Z+5	; 0x05
    16b0:	e0 91 5c 20 	lds	r30, 0x205C
    16b4:	f0 91 5d 20 	lds	r31, 0x205D
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	92 e0       	ldi	r25, 0x02	; 2
    16be:	19 95       	eicall
}
    16c0:	ff 91       	pop	r31
    16c2:	ef 91       	pop	r30
    16c4:	bf 91       	pop	r27
    16c6:	af 91       	pop	r26
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	7f 91       	pop	r23
    16ce:	6f 91       	pop	r22
    16d0:	5f 91       	pop	r21
    16d2:	4f 91       	pop	r20
    16d4:	3f 91       	pop	r19
    16d6:	2f 91       	pop	r18
    16d8:	0f 90       	pop	r0
    16da:	0b be       	out	0x3b, r0	; 59
    16dc:	0f 90       	pop	r0
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	0f 90       	pop	r0
    16e2:	1f 90       	pop	r1
    16e4:	18 95       	reti

000016e6 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    16e6:	1f 92       	push	r1
    16e8:	0f 92       	push	r0
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	0f 92       	push	r0
    16ee:	11 24       	eor	r1, r1
    16f0:	0b b6       	in	r0, 0x3b	; 59
    16f2:	0f 92       	push	r0
    16f4:	2f 93       	push	r18
    16f6:	3f 93       	push	r19
    16f8:	4f 93       	push	r20
    16fa:	5f 93       	push	r21
    16fc:	6f 93       	push	r22
    16fe:	7f 93       	push	r23
    1700:	8f 93       	push	r24
    1702:	9f 93       	push	r25
    1704:	af 93       	push	r26
    1706:	bf 93       	push	r27
    1708:	ef 93       	push	r30
    170a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    170c:	e0 e3       	ldi	r30, 0x30	; 48
    170e:	f2 e0       	ldi	r31, 0x02	; 2
    1710:	44 81       	ldd	r20, Z+4	; 0x04
    1712:	55 81       	ldd	r21, Z+5	; 0x05
    1714:	e0 91 5c 20 	lds	r30, 0x205C
    1718:	f0 91 5d 20 	lds	r31, 0x205D
    171c:	64 e0       	ldi	r22, 0x04	; 4
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	92 e0       	ldi	r25, 0x02	; 2
    1722:	19 95       	eicall
}
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0b be       	out	0x3b, r0	; 59
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	0f 90       	pop	r0
    1746:	1f 90       	pop	r1
    1748:	18 95       	reti

0000174a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    174a:	1f 92       	push	r1
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	0f 92       	push	r0
    1752:	11 24       	eor	r1, r1
    1754:	0b b6       	in	r0, 0x3b	; 59
    1756:	0f 92       	push	r0
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1770:	e8 e3       	ldi	r30, 0x38	; 56
    1772:	f2 e0       	ldi	r31, 0x02	; 2
    1774:	44 81       	ldd	r20, Z+4	; 0x04
    1776:	55 81       	ldd	r21, Z+5	; 0x05
    1778:	e0 91 5c 20 	lds	r30, 0x205C
    177c:	f0 91 5d 20 	lds	r31, 0x205D
    1780:	68 e0       	ldi	r22, 0x08	; 8
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	92 e0       	ldi	r25, 0x02	; 2
    1786:	19 95       	eicall
}
    1788:	ff 91       	pop	r31
    178a:	ef 91       	pop	r30
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	0f 90       	pop	r0
    17a2:	0b be       	out	0x3b, r0	; 59
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0
    17aa:	1f 90       	pop	r1
    17ac:	18 95       	reti

000017ae <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    17ae:	1f 92       	push	r1
    17b0:	0f 92       	push	r0
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	0f 92       	push	r0
    17b6:	11 24       	eor	r1, r1
    17b8:	0b b6       	in	r0, 0x3b	; 59
    17ba:	0f 92       	push	r0
    17bc:	2f 93       	push	r18
    17be:	3f 93       	push	r19
    17c0:	4f 93       	push	r20
    17c2:	5f 93       	push	r21
    17c4:	6f 93       	push	r22
    17c6:	7f 93       	push	r23
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	af 93       	push	r26
    17ce:	bf 93       	push	r27
    17d0:	ef 93       	push	r30
    17d2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    17d4:	e0 e4       	ldi	r30, 0x40	; 64
    17d6:	f2 e0       	ldi	r31, 0x02	; 2
    17d8:	44 a1       	ldd	r20, Z+36	; 0x24
    17da:	55 a1       	ldd	r21, Z+37	; 0x25
    17dc:	e0 91 5a 20 	lds	r30, 0x205A
    17e0:	f0 91 5b 20 	lds	r31, 0x205B
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	80 e4       	ldi	r24, 0x40	; 64
    17e8:	92 e0       	ldi	r25, 0x02	; 2
    17ea:	19 95       	eicall
}
    17ec:	ff 91       	pop	r31
    17ee:	ef 91       	pop	r30
    17f0:	bf 91       	pop	r27
    17f2:	af 91       	pop	r26
    17f4:	9f 91       	pop	r25
    17f6:	8f 91       	pop	r24
    17f8:	7f 91       	pop	r23
    17fa:	6f 91       	pop	r22
    17fc:	5f 91       	pop	r21
    17fe:	4f 91       	pop	r20
    1800:	3f 91       	pop	r19
    1802:	2f 91       	pop	r18
    1804:	0f 90       	pop	r0
    1806:	0b be       	out	0x3b, r0	; 59
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	0f 90       	pop	r0
    180e:	1f 90       	pop	r1
    1810:	18 95       	reti

00001812 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	11 24       	eor	r1, r1
    181c:	0b b6       	in	r0, 0x3b	; 59
    181e:	0f 92       	push	r0
    1820:	2f 93       	push	r18
    1822:	3f 93       	push	r19
    1824:	4f 93       	push	r20
    1826:	5f 93       	push	r21
    1828:	6f 93       	push	r22
    182a:	7f 93       	push	r23
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	af 93       	push	r26
    1832:	bf 93       	push	r27
    1834:	ef 93       	push	r30
    1836:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1838:	e8 e6       	ldi	r30, 0x68	; 104
    183a:	f2 e0       	ldi	r31, 0x02	; 2
    183c:	44 81       	ldd	r20, Z+4	; 0x04
    183e:	55 81       	ldd	r21, Z+5	; 0x05
    1840:	e0 91 5a 20 	lds	r30, 0x205A
    1844:	f0 91 5b 20 	lds	r31, 0x205B
    1848:	62 e0       	ldi	r22, 0x02	; 2
    184a:	80 e4       	ldi	r24, 0x40	; 64
    184c:	92 e0       	ldi	r25, 0x02	; 2
    184e:	19 95       	eicall
}
    1850:	ff 91       	pop	r31
    1852:	ef 91       	pop	r30
    1854:	bf 91       	pop	r27
    1856:	af 91       	pop	r26
    1858:	9f 91       	pop	r25
    185a:	8f 91       	pop	r24
    185c:	7f 91       	pop	r23
    185e:	6f 91       	pop	r22
    1860:	5f 91       	pop	r21
    1862:	4f 91       	pop	r20
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	0f 90       	pop	r0
    186a:	0b be       	out	0x3b, r0	; 59
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	0b b6       	in	r0, 0x3b	; 59
    1882:	0f 92       	push	r0
    1884:	2f 93       	push	r18
    1886:	3f 93       	push	r19
    1888:	4f 93       	push	r20
    188a:	5f 93       	push	r21
    188c:	6f 93       	push	r22
    188e:	7f 93       	push	r23
    1890:	8f 93       	push	r24
    1892:	9f 93       	push	r25
    1894:	af 93       	push	r26
    1896:	bf 93       	push	r27
    1898:	ef 93       	push	r30
    189a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    189c:	e0 e7       	ldi	r30, 0x70	; 112
    189e:	f2 e0       	ldi	r31, 0x02	; 2
    18a0:	44 81       	ldd	r20, Z+4	; 0x04
    18a2:	55 81       	ldd	r21, Z+5	; 0x05
    18a4:	e0 91 5a 20 	lds	r30, 0x205A
    18a8:	f0 91 5b 20 	lds	r31, 0x205B
    18ac:	64 e0       	ldi	r22, 0x04	; 4
    18ae:	80 e4       	ldi	r24, 0x40	; 64
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	19 95       	eicall
}
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	bf 91       	pop	r27
    18ba:	af 91       	pop	r26
    18bc:	9f 91       	pop	r25
    18be:	8f 91       	pop	r24
    18c0:	7f 91       	pop	r23
    18c2:	6f 91       	pop	r22
    18c4:	5f 91       	pop	r21
    18c6:	4f 91       	pop	r20
    18c8:	3f 91       	pop	r19
    18ca:	2f 91       	pop	r18
    18cc:	0f 90       	pop	r0
    18ce:	0b be       	out	0x3b, r0	; 59
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	0b b6       	in	r0, 0x3b	; 59
    18e6:	0f 92       	push	r0
    18e8:	2f 93       	push	r18
    18ea:	3f 93       	push	r19
    18ec:	4f 93       	push	r20
    18ee:	5f 93       	push	r21
    18f0:	6f 93       	push	r22
    18f2:	7f 93       	push	r23
    18f4:	8f 93       	push	r24
    18f6:	9f 93       	push	r25
    18f8:	af 93       	push	r26
    18fa:	bf 93       	push	r27
    18fc:	ef 93       	push	r30
    18fe:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1900:	e8 e7       	ldi	r30, 0x78	; 120
    1902:	f2 e0       	ldi	r31, 0x02	; 2
    1904:	44 81       	ldd	r20, Z+4	; 0x04
    1906:	55 81       	ldd	r21, Z+5	; 0x05
    1908:	e0 91 5a 20 	lds	r30, 0x205A
    190c:	f0 91 5b 20 	lds	r31, 0x205B
    1910:	68 e0       	ldi	r22, 0x08	; 8
    1912:	80 e4       	ldi	r24, 0x40	; 64
    1914:	92 e0       	ldi	r25, 0x02	; 2
    1916:	19 95       	eicall
}
    1918:	ff 91       	pop	r31
    191a:	ef 91       	pop	r30
    191c:	bf 91       	pop	r27
    191e:	af 91       	pop	r26
    1920:	9f 91       	pop	r25
    1922:	8f 91       	pop	r24
    1924:	7f 91       	pop	r23
    1926:	6f 91       	pop	r22
    1928:	5f 91       	pop	r21
    192a:	4f 91       	pop	r20
    192c:	3f 91       	pop	r19
    192e:	2f 91       	pop	r18
    1930:	0f 90       	pop	r0
    1932:	0b be       	out	0x3b, r0	; 59
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	0f 90       	pop	r0
    193a:	1f 90       	pop	r1
    193c:	18 95       	reti

0000193e <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    193e:	df 92       	push	r13
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	ec 01       	movw	r28, r24
    194e:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1950:	c1 15       	cp	r28, r1
    1952:	22 e0       	ldi	r18, 0x02	; 2
    1954:	d2 07       	cpc	r29, r18
    1956:	71 f4       	brne	.+28     	; 0x1974 <adc_write_configuration+0x36>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1958:	61 e2       	ldi	r22, 0x21	; 33
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	17 d1       	rcall	.+558    	; 0x1b8e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1960:	e8 2e       	mov	r14, r24
    1962:	f1 2c       	mov	r15, r1
    1964:	60 e2       	ldi	r22, 0x20	; 32
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	11 d1       	rcall	.+546    	; 0x1b8e <nvm_read_byte>
		data <<= 8;
    196c:	fe 2c       	mov	r15, r14
    196e:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    1970:	e8 2a       	or	r14, r24
    1972:	10 c0       	rjmp	.+32     	; 0x1994 <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1974:	80 34       	cpi	r24, 0x40	; 64
    1976:	92 40       	sbci	r25, 0x02	; 2
    1978:	69 f5       	brne	.+90     	; 0x19d4 <adc_write_configuration+0x96>
    197a:	65 e2       	ldi	r22, 0x25	; 37
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	06 d1       	rcall	.+524    	; 0x1b8e <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1982:	e8 2e       	mov	r14, r24
    1984:	f1 2c       	mov	r15, r1
    1986:	64 e2       	ldi	r22, 0x24	; 36
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	00 d1       	rcall	.+512    	; 0x1b8e <nvm_read_byte>
		data <<= 8;
    198e:	fe 2c       	mov	r15, r14
    1990:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1992:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1994:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    1996:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1998:	ce 01       	movw	r24, r28
    199a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    199e:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	88 83       	st	Y, r24
	adc->CAL = cal;
    19a4:	ec 86       	std	Y+12, r14	; 0x0c
    19a6:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    19a8:	f8 01       	movw	r30, r16
    19aa:	85 81       	ldd	r24, Z+5	; 0x05
    19ac:	96 81       	ldd	r25, Z+6	; 0x06
    19ae:	88 8f       	std	Y+24, r24	; 0x18
    19b0:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    19b6:	84 81       	ldd	r24, Z+4	; 0x04
    19b8:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    19ba:	83 81       	ldd	r24, Z+3	; 0x03
    19bc:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    19be:	81 81       	ldd	r24, Z+1	; 0x01
    19c0:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    19c2:	82 2f       	mov	r24, r18
    19c4:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    19c6:	90 81       	ld	r25, Z
    19c8:	89 2b       	or	r24, r25
    19ca:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    19cc:	ce 01       	movw	r24, r28
    19ce:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    19d2:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	ff 90       	pop	r15
    19de:	ef 90       	pop	r14
    19e0:	df 90       	pop	r13
    19e2:	08 95       	ret

000019e4 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	ec 01       	movw	r28, r24
    19f0:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    19f2:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    19f4:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    19f6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    19fa:	88 81       	ld	r24, Y
    19fc:	80 7c       	andi	r24, 0xC0	; 192
    19fe:	f8 01       	movw	r30, r16
    1a00:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1a02:	88 8d       	ldd	r24, Y+24	; 0x18
    1a04:	99 8d       	ldd	r25, Y+25	; 0x19
    1a06:	85 83       	std	Z+5, r24	; 0x05
    1a08:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a20:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	08 95       	ret

00001a2e <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	7c 01       	movw	r14, r24
    1a40:	d6 2e       	mov	r13, r22
    1a42:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1a44:	86 2f       	mov	r24, r22
    1a46:	83 70       	andi	r24, 0x03	; 3
    1a48:	29 f4       	brne	.+10     	; 0x1a54 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    1a4a:	96 2f       	mov	r25, r22
    1a4c:	96 95       	lsr	r25
    1a4e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1a54:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1a56:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1a58:	90 ff       	sbrs	r25, 0
		index++;
    1a5a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1a5c:	e7 01       	movw	r28, r14
    1a5e:	a0 96       	adiw	r28, 0x20	; 32
    1a60:	98 e0       	ldi	r25, 0x08	; 8
    1a62:	89 9f       	mul	r24, r25
    1a64:	c0 0d       	add	r28, r0
    1a66:	d1 1d       	adc	r29, r1
    1a68:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a6a:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1a6c:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1a6e:	c7 01       	movw	r24, r14
    1a70:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1a74:	f8 01       	movw	r30, r16
    1a76:	80 81       	ld	r24, Z
    1a78:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1a7e:	81 81       	ldd	r24, Z+1	; 0x01
    1a80:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1a82:	d0 fe       	sbrs	r13, 0
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <adcch_write_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1a86:	83 81       	ldd	r24, Z+3	; 0x03
    1a88:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1a8a:	c7 01       	movw	r24, r14
    1a8c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a90:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	08 95       	ret

00001aa4 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	7c 01       	movw	r14, r24
    1ab6:	d6 2e       	mov	r13, r22
    1ab8:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1aba:	86 2f       	mov	r24, r22
    1abc:	83 70       	andi	r24, 0x03	; 3
    1abe:	29 f4       	brne	.+10     	; 0x1aca <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    1ac0:	96 2f       	mov	r25, r22
    1ac2:	96 95       	lsr	r25
    1ac4:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1aca:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1acc:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1ace:	90 ff       	sbrs	r25, 0
		index++;
    1ad0:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1ad2:	87 01       	movw	r16, r14
    1ad4:	00 5e       	subi	r16, 0xE0	; 224
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	98 e0       	ldi	r25, 0x08	; 8
    1ada:	89 9f       	mul	r24, r25
    1adc:	00 0d       	add	r16, r0
    1ade:	11 1d       	adc	r17, r1
    1ae0:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ae2:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1ae4:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1aec:	f8 01       	movw	r30, r16
    1aee:	80 81       	ld	r24, Z
    1af0:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1af6:	81 81       	ldd	r24, Z+1	; 0x01
    1af8:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1afa:	d0 fe       	sbrs	r13, 0
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <adcch_read_configuration+0x5e>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1afe:	86 81       	ldd	r24, Z+6	; 0x06
    1b00:	8b 83       	std	Y+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1b02:	c7 01       	movw	r24, r14
    1b04:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b08:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	cf 90       	pop	r12
    1b1a:	08 95       	ret

00001b1c <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    1b1c:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    1b1e:	80 91 60 20 	lds	r24, 0x2060
    1b22:	90 91 61 20 	lds	r25, 0x2061
    1b26:	e0 91 5e 20 	lds	r30, 0x205E
    1b2a:	f0 91 5f 20 	lds	r31, 0x205F
    1b2e:	19 95       	eicall
    1b30:	99 23       	and	r25, r25
    1b32:	1c f4       	brge	.+6      	; 0x1b3a <_write+0x1e>
		return -1;
    1b34:	8f ef       	ldi	r24, 0xFF	; 255
    1b36:	9f ef       	ldi	r25, 0xFF	; 255
    1b38:	08 95       	ret
	}
	return 1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
}
    1b3e:	08 95       	ret

00001b40 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1b40:	8f ef       	ldi	r24, 0xFF	; 255
    1b42:	80 93 70 00 	sts	0x0070, r24
    1b46:	80 93 71 00 	sts	0x0071, r24
    1b4a:	80 93 72 00 	sts	0x0072, r24
    1b4e:	80 93 73 00 	sts	0x0073, r24
    1b52:	80 93 74 00 	sts	0x0074, r24
    1b56:	80 93 75 00 	sts	0x0075, r24
    1b5a:	80 93 76 00 	sts	0x0076, r24
    1b5e:	08 95       	ret

00001b60 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b60:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1b62:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1b64:	e8 2f       	mov	r30, r24
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	e0 59       	subi	r30, 0x90	; 144
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 95       	com	r22
    1b6e:	80 81       	ld	r24, Z
    1b70:	68 23       	and	r22, r24
    1b72:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b74:	9f bf       	out	0x3f, r25	; 63
    1b76:	08 95       	ret

00001b78 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b78:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1b7a:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1b7c:	e8 2f       	mov	r30, r24
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	e0 59       	subi	r30, 0x90	; 144
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	68 2b       	or	r22, r24
    1b88:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b8a:	9f bf       	out	0x3f, r25	; 63
    1b8c:	08 95       	ret

00001b8e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1b8e:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1b92:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1b94:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1b96:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1b9a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1b9c:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1ba0:	08 95       	ret

00001ba2 <adc_handler>:

uint16_t ch0_result;

static void adc_handler(ADC_t *adc, uint8_t ch_mask, adc_result_t result)
{
	ch0_result = result;
    1ba2:	40 93 68 20 	sts	0x2068, r20
    1ba6:	50 93 69 20 	sts	0x2069, r21
	usart_putchar(&USARTE0, ch0_result); 
    1baa:	64 2f       	mov	r22, r20
    1bac:	80 ea       	ldi	r24, 0xA0	; 160
    1bae:	9a e0       	ldi	r25, 0x0A	; 10
    1bb0:	0a cb       	rjmp	.-2540   	; 0x11c6 <usart_putchar>
    1bb2:	08 95       	ret

00001bb4 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1bb4:	08 cb       	rjmp	.-2544   	; 0x11c6 <usart_putchar>
}
    1bb6:	08 95       	ret

00001bb8 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1bbe:	0b db       	rcall	.-2538   	; 0x11d6 <usart_getchar>
    1bc0:	88 83       	st	Y, r24
}
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <main>:
static void evsys_init(void){
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
}

int main (void) {
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	2b 97       	sbiw	r28, 0x0b	; 11
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	de bf       	out	0x3e, r29	; 62
	
	sysclk_init();
    1bd6:	b4 df       	rcall	.-152    	; 0x1b40 <sysclk_init>
	tc_write_period(&MY_TIMER, 10);
	tc_set_resolution(&MY_TIMER, 500000);
}

static void evsys_init(void){
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1bd8:	62 e0       	ldi	r22, 0x02	; 2
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	c1 df       	rcall	.-126    	; 0x1b60 <sysclk_enable_module>
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    1bde:	80 ec       	ldi	r24, 0xC0	; 192
    1be0:	80 93 80 01 	sts	0x0180, r24
	
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
}

static void tc_init(void){
	tc_enable(&MY_TIMER);
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	98 e0       	ldi	r25, 0x08	; 8
    1be8:	8b da       	rcall	.-2794   	; 0x1100 <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1bea:	e0 e0       	ldi	r30, 0x00	; 0
    1bec:	f8 e0       	ldi	r31, 0x08	; 8
    1bee:	81 81       	ldd	r24, Z+1	; 0x01
    1bf0:	88 7f       	andi	r24, 0xF8	; 248
    1bf2:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1bf4:	8a e0       	ldi	r24, 0x0A	; 10
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	86 a3       	std	Z+38, r24	; 0x26
    1bfa:	97 a3       	std	Z+39, r25	; 0x27
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1bfc:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1bfe:	80 7f       	andi	r24, 0xF0	; 240
    1c00:	83 60       	ori	r24, 0x03	; 3
    1c02:	80 83       	st	Z, r24
static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	
	adc_read_configuration(&MY_ADC, &adc_conf);
    1c04:	be 01       	movw	r22, r28
    1c06:	6f 5f       	subi	r22, 0xFF	; 255
    1c08:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	92 e0       	ldi	r25, 0x02	; 2
    1c0e:	ea de       	rcall	.-556    	; 0x19e4 <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1c10:	ae 01       	movw	r20, r28
    1c12:	48 5f       	subi	r20, 0xF8	; 248
    1c14:	5f 4f       	sbci	r21, 0xFF	; 255
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	92 e0       	ldi	r25, 0x02	; 2
    1c1c:	43 df       	rcall	.-378    	; 0x1aa4 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	9f 78       	andi	r25, 0x8F	; 143
    1c24:	9b 83       	std	Y+3, r25	; 0x03
		conf->ctrlb |= ADC_FREERUN_bm;
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
		break;

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1c26:	81 7e       	andi	r24, 0xE1	; 225
    1c28:	84 60       	ori	r24, 0x04	; 4
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    1c2c:	85 e0       	ldi	r24, 0x05	; 5
    1c2e:	8c 83       	std	Y+4, r24	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	8d 83       	std	Y+5, r24	; 0x05
	
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_8, ADC_REF_BANDGAP);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_EVENT_SWEEP, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_callback(&MY_ADC, &adc_handler);
    1c34:	61 ed       	ldi	r22, 0xD1	; 209
    1c36:	7d e0       	ldi	r23, 0x0D	; 13
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	92 e0       	ldi	r25, 0x02	; 2
    1c3c:	0e 94 ba 01 	call	0x374	; 0x374 <adc_set_callback>
	adc_write_configuration(&MY_ADC, &adc_conf);
    1c40:	be 01       	movw	r22, r28
    1c42:	6f 5f       	subi	r22, 0xFF	; 255
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	92 e0       	ldi	r25, 0x02	; 2
    1c4a:	79 de       	rcall	.-782    	; 0x193e <adc_write_configuration>
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
    1c4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c4e:	8c 7f       	andi	r24, 0xFC	; 252
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    1c50:	81 60       	ori	r24, 0x01	; 1
    1c52:	8a 87       	std	Y+10, r24	; 0x0a
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    1c54:	83 e0       	ldi	r24, 0x03	; 3
    1c56:	88 87       	std	Y+8, r24	; 0x08
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1c58:	89 e0       	ldi	r24, 0x09	; 9
    1c5a:	89 87       	std	Y+9, r24	; 0x09
	
	adcch_enable_interrupt(&adcch_conf);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_POS_PIN5, GAIN);
	//adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE, GAIN);
	
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1c5c:	ae 01       	movw	r20, r28
    1c5e:	48 5f       	subi	r20, 0xF8	; 248
    1c60:	5f 4f       	sbci	r21, 0xFF	; 255
    1c62:	61 e0       	ldi	r22, 0x01	; 1
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	92 e0       	ldi	r25, 0x02	; 2
    1c68:	e2 de       	rcall	.-572    	; 0x1a2e <adcch_write_configuration>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1c6a:	87 e0       	ldi	r24, 0x07	; 7
    1c6c:	e0 ea       	ldi	r30, 0xA0	; 160
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	82 83       	std	Z+2, r24	; 0x02
	sysclk_init();
	evsys_init();
	tc_init();
	adc_init();
	pmic_init();
	cpu_irq_enable(); 
    1c72:	78 94       	sei
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1c74:	80 ea       	ldi	r24, 0xA0	; 160
    1c76:	9a e0       	ldi	r25, 0x0A	; 10
    1c78:	80 93 60 20 	sts	0x2060, r24
    1c7c:	90 93 61 20 	sts	0x2061, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1c80:	8a ed       	ldi	r24, 0xDA	; 218
    1c82:	9d e0       	ldi	r25, 0x0D	; 13
    1c84:	80 93 5e 20 	sts	0x205E, r24
    1c88:	90 93 5f 20 	sts	0x205F, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1c8c:	8c ed       	ldi	r24, 0xDC	; 220
    1c8e:	9d e0       	ldi	r25, 0x0D	; 13
    1c90:	80 93 58 20 	sts	0x2058, r24
    1c94:	90 93 59 20 	sts	0x2059, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1c98:	80 91 0a 20 	lds	r24, 0x200A
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1c9e:	80 91 0b 20 	lds	r24, 0x200B
    1ca2:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1ca4:	80 91 0c 20 	lds	r24, 0x200C
    1ca8:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1caa:	80 91 06 20 	lds	r24, 0x2006
    1cae:	90 91 07 20 	lds	r25, 0x2007
    1cb2:	a0 91 08 20 	lds	r26, 0x2008
    1cb6:	b0 91 09 20 	lds	r27, 0x2009
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	ab 83       	std	Y+3, r26	; 0x03
    1cc0:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    1cc2:	60 e1       	ldi	r22, 0x10	; 16
    1cc4:	85 e0       	ldi	r24, 0x05	; 5
    1cc6:	4c df       	rcall	.-360    	; 0x1b60 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1cc8:	be 01       	movw	r22, r28
    1cca:	6f 5f       	subi	r22, 0xFF	; 255
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	80 ea       	ldi	r24, 0xA0	; 160
    1cd0:	9a e0       	ldi	r25, 0x0A	; 10
    1cd2:	91 db       	rcall	.-2270   	; 0x13f6 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1cd4:	61 ea       	ldi	r22, 0xA1	; 161
    1cd6:	71 e0       	ldi	r23, 0x01	; 1
    1cd8:	8e e8       	ldi	r24, 0x8E	; 142
    1cda:	9d e0       	ldi	r25, 0x0D	; 13
    1cdc:	9a d4       	rcall	.+2356   	; 0x2612 <fdevopen>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1cde:	88 e0       	ldi	r24, 0x08	; 8
    1ce0:	e0 e8       	ldi	r30, 0x80	; 128
    1ce2:	f6 e0       	ldi	r31, 0x06	; 6
    1ce4:	81 83       	std	Z+1, r24	; 0x01
		.stopbits = false
	};
	
	stdio_serial_init(&USARTE0, &USART_SERIAL_OPTIONS);
	ioport_set_pin_dir(UART_TXPIN, IOPORT_DIR_OUTPUT);
	adc_enable(&MY_ADC);
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	0e 94 10 02 	call	0x420	; 0x420 <adc_enable>
    1cee:	ff cf       	rjmp	.-2      	; 0x1cee <main+0x126>

00001cf0 <vfprintf>:
    1cf0:	2f 92       	push	r2
    1cf2:	3f 92       	push	r3
    1cf4:	4f 92       	push	r4
    1cf6:	5f 92       	push	r5
    1cf8:	6f 92       	push	r6
    1cfa:	7f 92       	push	r7
    1cfc:	8f 92       	push	r8
    1cfe:	9f 92       	push	r9
    1d00:	af 92       	push	r10
    1d02:	bf 92       	push	r11
    1d04:	cf 92       	push	r12
    1d06:	df 92       	push	r13
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	63 97       	sbiw	r28, 0x13	; 19
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	7c 01       	movw	r14, r24
    1d20:	1b 01       	movw	r2, r22
    1d22:	6a 01       	movw	r12, r20
    1d24:	fc 01       	movw	r30, r24
    1d26:	16 82       	std	Z+6, r1	; 0x06
    1d28:	17 82       	std	Z+7, r1	; 0x07
    1d2a:	83 81       	ldd	r24, Z+3	; 0x03
    1d2c:	81 ff       	sbrs	r24, 1
    1d2e:	49 c3       	rjmp	.+1682   	; 0x23c2 <vfprintf+0x6d2>
    1d30:	be 01       	movw	r22, r28
    1d32:	6f 5f       	subi	r22, 0xFF	; 255
    1d34:	7f 4f       	sbci	r23, 0xFF	; 255
    1d36:	4b 01       	movw	r8, r22
    1d38:	f7 01       	movw	r30, r14
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	f1 01       	movw	r30, r2
    1d3e:	93 fd       	sbrc	r25, 3
    1d40:	85 91       	lpm	r24, Z+
    1d42:	93 ff       	sbrs	r25, 3
    1d44:	81 91       	ld	r24, Z+
    1d46:	1f 01       	movw	r2, r30
    1d48:	88 23       	and	r24, r24
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <vfprintf+0x5e>
    1d4c:	36 c3       	rjmp	.+1644   	; 0x23ba <vfprintf+0x6ca>
    1d4e:	85 32       	cpi	r24, 0x25	; 37
    1d50:	39 f4       	brne	.+14     	; 0x1d60 <vfprintf+0x70>
    1d52:	93 fd       	sbrc	r25, 3
    1d54:	85 91       	lpm	r24, Z+
    1d56:	93 ff       	sbrs	r25, 3
    1d58:	81 91       	ld	r24, Z+
    1d5a:	1f 01       	movw	r2, r30
    1d5c:	85 32       	cpi	r24, 0x25	; 37
    1d5e:	31 f4       	brne	.+12     	; 0x1d6c <vfprintf+0x7c>
    1d60:	b7 01       	movw	r22, r14
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 d4       	rcall	.+2368   	; 0x26a6 <fputc>
    1d66:	56 01       	movw	r10, r12
    1d68:	65 01       	movw	r12, r10
    1d6a:	e6 cf       	rjmp	.-52     	; 0x1d38 <vfprintf+0x48>
    1d6c:	10 e0       	ldi	r17, 0x00	; 0
    1d6e:	51 2c       	mov	r5, r1
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	20 32       	cpi	r18, 0x20	; 32
    1d74:	a0 f4       	brcc	.+40     	; 0x1d9e <vfprintf+0xae>
    1d76:	8b 32       	cpi	r24, 0x2B	; 43
    1d78:	69 f0       	breq	.+26     	; 0x1d94 <vfprintf+0xa4>
    1d7a:	30 f4       	brcc	.+12     	; 0x1d88 <vfprintf+0x98>
    1d7c:	80 32       	cpi	r24, 0x20	; 32
    1d7e:	59 f0       	breq	.+22     	; 0x1d96 <vfprintf+0xa6>
    1d80:	83 32       	cpi	r24, 0x23	; 35
    1d82:	69 f4       	brne	.+26     	; 0x1d9e <vfprintf+0xae>
    1d84:	20 61       	ori	r18, 0x10	; 16
    1d86:	2c c0       	rjmp	.+88     	; 0x1de0 <vfprintf+0xf0>
    1d88:	8d 32       	cpi	r24, 0x2D	; 45
    1d8a:	39 f0       	breq	.+14     	; 0x1d9a <vfprintf+0xaa>
    1d8c:	80 33       	cpi	r24, 0x30	; 48
    1d8e:	39 f4       	brne	.+14     	; 0x1d9e <vfprintf+0xae>
    1d90:	21 60       	ori	r18, 0x01	; 1
    1d92:	26 c0       	rjmp	.+76     	; 0x1de0 <vfprintf+0xf0>
    1d94:	22 60       	ori	r18, 0x02	; 2
    1d96:	24 60       	ori	r18, 0x04	; 4
    1d98:	23 c0       	rjmp	.+70     	; 0x1de0 <vfprintf+0xf0>
    1d9a:	28 60       	ori	r18, 0x08	; 8
    1d9c:	21 c0       	rjmp	.+66     	; 0x1de0 <vfprintf+0xf0>
    1d9e:	27 fd       	sbrc	r18, 7
    1da0:	27 c0       	rjmp	.+78     	; 0x1df0 <vfprintf+0x100>
    1da2:	30 ed       	ldi	r19, 0xD0	; 208
    1da4:	38 0f       	add	r19, r24
    1da6:	3a 30       	cpi	r19, 0x0A	; 10
    1da8:	78 f4       	brcc	.+30     	; 0x1dc8 <vfprintf+0xd8>
    1daa:	26 ff       	sbrs	r18, 6
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <vfprintf+0xca>
    1dae:	fa e0       	ldi	r31, 0x0A	; 10
    1db0:	1f 9f       	mul	r17, r31
    1db2:	30 0d       	add	r19, r0
    1db4:	11 24       	eor	r1, r1
    1db6:	13 2f       	mov	r17, r19
    1db8:	13 c0       	rjmp	.+38     	; 0x1de0 <vfprintf+0xf0>
    1dba:	6a e0       	ldi	r22, 0x0A	; 10
    1dbc:	56 9e       	mul	r5, r22
    1dbe:	30 0d       	add	r19, r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	53 2e       	mov	r5, r19
    1dc4:	20 62       	ori	r18, 0x20	; 32
    1dc6:	0c c0       	rjmp	.+24     	; 0x1de0 <vfprintf+0xf0>
    1dc8:	8e 32       	cpi	r24, 0x2E	; 46
    1dca:	21 f4       	brne	.+8      	; 0x1dd4 <vfprintf+0xe4>
    1dcc:	26 fd       	sbrc	r18, 6
    1dce:	f5 c2       	rjmp	.+1514   	; 0x23ba <vfprintf+0x6ca>
    1dd0:	20 64       	ori	r18, 0x40	; 64
    1dd2:	06 c0       	rjmp	.+12     	; 0x1de0 <vfprintf+0xf0>
    1dd4:	8c 36       	cpi	r24, 0x6C	; 108
    1dd6:	11 f4       	brne	.+4      	; 0x1ddc <vfprintf+0xec>
    1dd8:	20 68       	ori	r18, 0x80	; 128
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <vfprintf+0xf0>
    1ddc:	88 36       	cpi	r24, 0x68	; 104
    1dde:	41 f4       	brne	.+16     	; 0x1df0 <vfprintf+0x100>
    1de0:	f1 01       	movw	r30, r2
    1de2:	93 fd       	sbrc	r25, 3
    1de4:	85 91       	lpm	r24, Z+
    1de6:	93 ff       	sbrs	r25, 3
    1de8:	81 91       	ld	r24, Z+
    1dea:	1f 01       	movw	r2, r30
    1dec:	81 11       	cpse	r24, r1
    1dee:	c1 cf       	rjmp	.-126    	; 0x1d72 <vfprintf+0x82>
    1df0:	9b eb       	ldi	r25, 0xBB	; 187
    1df2:	98 0f       	add	r25, r24
    1df4:	93 30       	cpi	r25, 0x03	; 3
    1df6:	18 f4       	brcc	.+6      	; 0x1dfe <vfprintf+0x10e>
    1df8:	20 61       	ori	r18, 0x10	; 16
    1dfa:	80 5e       	subi	r24, 0xE0	; 224
    1dfc:	06 c0       	rjmp	.+12     	; 0x1e0a <vfprintf+0x11a>
    1dfe:	9b e9       	ldi	r25, 0x9B	; 155
    1e00:	98 0f       	add	r25, r24
    1e02:	93 30       	cpi	r25, 0x03	; 3
    1e04:	08 f0       	brcs	.+2      	; 0x1e08 <vfprintf+0x118>
    1e06:	9a c1       	rjmp	.+820    	; 0x213c <vfprintf+0x44c>
    1e08:	2f 7e       	andi	r18, 0xEF	; 239
    1e0a:	26 ff       	sbrs	r18, 6
    1e0c:	16 e0       	ldi	r17, 0x06	; 6
    1e0e:	2f 73       	andi	r18, 0x3F	; 63
    1e10:	72 2e       	mov	r7, r18
    1e12:	85 36       	cpi	r24, 0x65	; 101
    1e14:	21 f4       	brne	.+8      	; 0x1e1e <vfprintf+0x12e>
    1e16:	f2 2f       	mov	r31, r18
    1e18:	f0 64       	ori	r31, 0x40	; 64
    1e1a:	7f 2e       	mov	r7, r31
    1e1c:	08 c0       	rjmp	.+16     	; 0x1e2e <vfprintf+0x13e>
    1e1e:	86 36       	cpi	r24, 0x66	; 102
    1e20:	21 f4       	brne	.+8      	; 0x1e2a <vfprintf+0x13a>
    1e22:	62 2f       	mov	r22, r18
    1e24:	60 68       	ori	r22, 0x80	; 128
    1e26:	76 2e       	mov	r7, r22
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <vfprintf+0x13e>
    1e2a:	11 11       	cpse	r17, r1
    1e2c:	11 50       	subi	r17, 0x01	; 1
    1e2e:	77 fe       	sbrs	r7, 7
    1e30:	07 c0       	rjmp	.+14     	; 0x1e40 <vfprintf+0x150>
    1e32:	1c 33       	cpi	r17, 0x3C	; 60
    1e34:	48 f4       	brcc	.+18     	; 0x1e48 <vfprintf+0x158>
    1e36:	44 24       	eor	r4, r4
    1e38:	43 94       	inc	r4
    1e3a:	41 0e       	add	r4, r17
    1e3c:	27 e0       	ldi	r18, 0x07	; 7
    1e3e:	0b c0       	rjmp	.+22     	; 0x1e56 <vfprintf+0x166>
    1e40:	18 30       	cpi	r17, 0x08	; 8
    1e42:	30 f4       	brcc	.+12     	; 0x1e50 <vfprintf+0x160>
    1e44:	21 2f       	mov	r18, r17
    1e46:	06 c0       	rjmp	.+12     	; 0x1e54 <vfprintf+0x164>
    1e48:	27 e0       	ldi	r18, 0x07	; 7
    1e4a:	4c e3       	ldi	r20, 0x3C	; 60
    1e4c:	44 2e       	mov	r4, r20
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <vfprintf+0x166>
    1e50:	27 e0       	ldi	r18, 0x07	; 7
    1e52:	17 e0       	ldi	r17, 0x07	; 7
    1e54:	41 2c       	mov	r4, r1
    1e56:	56 01       	movw	r10, r12
    1e58:	74 e0       	ldi	r23, 0x04	; 4
    1e5a:	a7 0e       	add	r10, r23
    1e5c:	b1 1c       	adc	r11, r1
    1e5e:	f6 01       	movw	r30, r12
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	04 2d       	mov	r16, r4
    1e6a:	a4 01       	movw	r20, r8
    1e6c:	e4 d2       	rcall	.+1480   	; 0x2436 <__ftoa_engine>
    1e6e:	6c 01       	movw	r12, r24
    1e70:	09 81       	ldd	r16, Y+1	; 0x01
    1e72:	00 ff       	sbrs	r16, 0
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <vfprintf+0x18a>
    1e76:	03 ff       	sbrs	r16, 3
    1e78:	06 c0       	rjmp	.+12     	; 0x1e86 <vfprintf+0x196>
    1e7a:	71 fc       	sbrc	r7, 1
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <vfprintf+0x19c>
    1e7e:	72 fc       	sbrc	r7, 2
    1e80:	08 c0       	rjmp	.+16     	; 0x1e92 <vfprintf+0x1a2>
    1e82:	61 2c       	mov	r6, r1
    1e84:	08 c0       	rjmp	.+16     	; 0x1e96 <vfprintf+0x1a6>
    1e86:	3d e2       	ldi	r19, 0x2D	; 45
    1e88:	63 2e       	mov	r6, r19
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <vfprintf+0x1a6>
    1e8c:	2b e2       	ldi	r18, 0x2B	; 43
    1e8e:	62 2e       	mov	r6, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <vfprintf+0x1a6>
    1e92:	90 e2       	ldi	r25, 0x20	; 32
    1e94:	69 2e       	mov	r6, r25
    1e96:	80 2f       	mov	r24, r16
    1e98:	8c 70       	andi	r24, 0x0C	; 12
    1e9a:	81 f1       	breq	.+96     	; 0x1efc <vfprintf+0x20c>
    1e9c:	66 20       	and	r6, r6
    1e9e:	11 f0       	breq	.+4      	; 0x1ea4 <vfprintf+0x1b4>
    1ea0:	84 e0       	ldi	r24, 0x04	; 4
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <vfprintf+0x1b6>
    1ea4:	83 e0       	ldi	r24, 0x03	; 3
    1ea6:	85 15       	cp	r24, r5
    1ea8:	10 f0       	brcs	.+4      	; 0x1eae <vfprintf+0x1be>
    1eaa:	51 2c       	mov	r5, r1
    1eac:	0a c0       	rjmp	.+20     	; 0x1ec2 <vfprintf+0x1d2>
    1eae:	58 1a       	sub	r5, r24
    1eb0:	73 fc       	sbrc	r7, 3
    1eb2:	07 c0       	rjmp	.+14     	; 0x1ec2 <vfprintf+0x1d2>
    1eb4:	b7 01       	movw	r22, r14
    1eb6:	80 e2       	ldi	r24, 0x20	; 32
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	f5 d3       	rcall	.+2026   	; 0x26a6 <fputc>
    1ebc:	5a 94       	dec	r5
    1ebe:	d1 f7       	brne	.-12     	; 0x1eb4 <vfprintf+0x1c4>
    1ec0:	f4 cf       	rjmp	.-24     	; 0x1eaa <vfprintf+0x1ba>
    1ec2:	66 20       	and	r6, r6
    1ec4:	21 f0       	breq	.+8      	; 0x1ece <vfprintf+0x1de>
    1ec6:	b7 01       	movw	r22, r14
    1ec8:	86 2d       	mov	r24, r6
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	ec d3       	rcall	.+2008   	; 0x26a6 <fputc>
    1ece:	03 fd       	sbrc	r16, 3
    1ed0:	03 c0       	rjmp	.+6      	; 0x1ed8 <vfprintf+0x1e8>
    1ed2:	00 e0       	ldi	r16, 0x00	; 0
    1ed4:	12 e0       	ldi	r17, 0x02	; 2
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <vfprintf+0x1ec>
    1ed8:	0c ef       	ldi	r16, 0xFC	; 252
    1eda:	11 e0       	ldi	r17, 0x01	; 1
    1edc:	f7 2d       	mov	r31, r7
    1ede:	f0 71       	andi	r31, 0x10	; 16
    1ee0:	7f 2e       	mov	r7, r31
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	84 91       	lpm	r24, Z
    1ee6:	88 23       	and	r24, r24
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <vfprintf+0x1fc>
    1eea:	5e c2       	rjmp	.+1212   	; 0x23a8 <vfprintf+0x6b8>
    1eec:	71 10       	cpse	r7, r1
    1eee:	80 52       	subi	r24, 0x20	; 32
    1ef0:	b7 01       	movw	r22, r14
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	d8 d3       	rcall	.+1968   	; 0x26a6 <fputc>
    1ef6:	0f 5f       	subi	r16, 0xFF	; 255
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	f3 cf       	rjmp	.-26     	; 0x1ee2 <vfprintf+0x1f2>
    1efc:	77 fe       	sbrs	r7, 7
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <vfprintf+0x22e>
    1f00:	4c 0c       	add	r4, r12
    1f02:	04 ff       	sbrs	r16, 4
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <vfprintf+0x21e>
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	81 33       	cpi	r24, 0x31	; 49
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <vfprintf+0x21e>
    1f0c:	4a 94       	dec	r4
    1f0e:	14 14       	cp	r1, r4
    1f10:	74 f5       	brge	.+92     	; 0x1f6e <vfprintf+0x27e>
    1f12:	f8 e0       	ldi	r31, 0x08	; 8
    1f14:	f4 15       	cp	r31, r4
    1f16:	78 f5       	brcc	.+94     	; 0x1f76 <vfprintf+0x286>
    1f18:	88 e0       	ldi	r24, 0x08	; 8
    1f1a:	48 2e       	mov	r4, r24
    1f1c:	2c c0       	rjmp	.+88     	; 0x1f76 <vfprintf+0x286>
    1f1e:	76 fc       	sbrc	r7, 6
    1f20:	2a c0       	rjmp	.+84     	; 0x1f76 <vfprintf+0x286>
    1f22:	81 2f       	mov	r24, r17
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	8c 15       	cp	r24, r12
    1f28:	9d 05       	cpc	r25, r13
    1f2a:	9c f0       	brlt	.+38     	; 0x1f52 <vfprintf+0x262>
    1f2c:	6c ef       	ldi	r22, 0xFC	; 252
    1f2e:	c6 16       	cp	r12, r22
    1f30:	6f ef       	ldi	r22, 0xFF	; 255
    1f32:	d6 06       	cpc	r13, r22
    1f34:	74 f0       	brlt	.+28     	; 0x1f52 <vfprintf+0x262>
    1f36:	77 2d       	mov	r23, r7
    1f38:	70 68       	ori	r23, 0x80	; 128
    1f3a:	77 2e       	mov	r7, r23
    1f3c:	0a c0       	rjmp	.+20     	; 0x1f52 <vfprintf+0x262>
    1f3e:	e2 e0       	ldi	r30, 0x02	; 2
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	ec 0f       	add	r30, r28
    1f44:	fd 1f       	adc	r31, r29
    1f46:	e1 0f       	add	r30, r17
    1f48:	f1 1d       	adc	r31, r1
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 33       	cpi	r24, 0x30	; 48
    1f4e:	19 f4       	brne	.+6      	; 0x1f56 <vfprintf+0x266>
    1f50:	11 50       	subi	r17, 0x01	; 1
    1f52:	11 11       	cpse	r17, r1
    1f54:	f4 cf       	rjmp	.-24     	; 0x1f3e <vfprintf+0x24e>
    1f56:	77 fe       	sbrs	r7, 7
    1f58:	0e c0       	rjmp	.+28     	; 0x1f76 <vfprintf+0x286>
    1f5a:	44 24       	eor	r4, r4
    1f5c:	43 94       	inc	r4
    1f5e:	41 0e       	add	r4, r17
    1f60:	81 2f       	mov	r24, r17
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	c8 16       	cp	r12, r24
    1f66:	d9 06       	cpc	r13, r25
    1f68:	2c f4       	brge	.+10     	; 0x1f74 <vfprintf+0x284>
    1f6a:	1c 19       	sub	r17, r12
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <vfprintf+0x286>
    1f6e:	44 24       	eor	r4, r4
    1f70:	43 94       	inc	r4
    1f72:	01 c0       	rjmp	.+2      	; 0x1f76 <vfprintf+0x286>
    1f74:	10 e0       	ldi	r17, 0x00	; 0
    1f76:	77 fe       	sbrs	r7, 7
    1f78:	07 c0       	rjmp	.+14     	; 0x1f88 <vfprintf+0x298>
    1f7a:	1c 14       	cp	r1, r12
    1f7c:	1d 04       	cpc	r1, r13
    1f7e:	3c f4       	brge	.+14     	; 0x1f8e <vfprintf+0x29e>
    1f80:	96 01       	movw	r18, r12
    1f82:	2f 5f       	subi	r18, 0xFF	; 255
    1f84:	3f 4f       	sbci	r19, 0xFF	; 255
    1f86:	05 c0       	rjmp	.+10     	; 0x1f92 <vfprintf+0x2a2>
    1f88:	25 e0       	ldi	r18, 0x05	; 5
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <vfprintf+0x2a2>
    1f8e:	21 e0       	ldi	r18, 0x01	; 1
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	66 20       	and	r6, r6
    1f94:	11 f0       	breq	.+4      	; 0x1f9a <vfprintf+0x2aa>
    1f96:	2f 5f       	subi	r18, 0xFF	; 255
    1f98:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9a:	11 23       	and	r17, r17
    1f9c:	31 f0       	breq	.+12     	; 0x1faa <vfprintf+0x2ba>
    1f9e:	41 2f       	mov	r20, r17
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	4f 5f       	subi	r20, 0xFF	; 255
    1fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa6:	24 0f       	add	r18, r20
    1fa8:	35 1f       	adc	r19, r21
    1faa:	45 2d       	mov	r20, r5
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	24 17       	cp	r18, r20
    1fb0:	35 07       	cpc	r19, r21
    1fb2:	14 f4       	brge	.+4      	; 0x1fb8 <vfprintf+0x2c8>
    1fb4:	52 1a       	sub	r5, r18
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <vfprintf+0x2ca>
    1fb8:	51 2c       	mov	r5, r1
    1fba:	87 2d       	mov	r24, r7
    1fbc:	89 70       	andi	r24, 0x09	; 9
    1fbe:	41 f4       	brne	.+16     	; 0x1fd0 <vfprintf+0x2e0>
    1fc0:	55 20       	and	r5, r5
    1fc2:	31 f0       	breq	.+12     	; 0x1fd0 <vfprintf+0x2e0>
    1fc4:	b7 01       	movw	r22, r14
    1fc6:	80 e2       	ldi	r24, 0x20	; 32
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	6d d3       	rcall	.+1754   	; 0x26a6 <fputc>
    1fcc:	5a 94       	dec	r5
    1fce:	f8 cf       	rjmp	.-16     	; 0x1fc0 <vfprintf+0x2d0>
    1fd0:	66 20       	and	r6, r6
    1fd2:	21 f0       	breq	.+8      	; 0x1fdc <vfprintf+0x2ec>
    1fd4:	b7 01       	movw	r22, r14
    1fd6:	86 2d       	mov	r24, r6
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	65 d3       	rcall	.+1738   	; 0x26a6 <fputc>
    1fdc:	73 fc       	sbrc	r7, 3
    1fde:	08 c0       	rjmp	.+16     	; 0x1ff0 <vfprintf+0x300>
    1fe0:	55 20       	and	r5, r5
    1fe2:	31 f0       	breq	.+12     	; 0x1ff0 <vfprintf+0x300>
    1fe4:	b7 01       	movw	r22, r14
    1fe6:	80 e3       	ldi	r24, 0x30	; 48
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	5d d3       	rcall	.+1722   	; 0x26a6 <fputc>
    1fec:	5a 94       	dec	r5
    1fee:	f8 cf       	rjmp	.-16     	; 0x1fe0 <vfprintf+0x2f0>
    1ff0:	77 fe       	sbrs	r7, 7
    1ff2:	5d c0       	rjmp	.+186    	; 0x20ae <vfprintf+0x3be>
    1ff4:	9c 2d       	mov	r25, r12
    1ff6:	8d 2d       	mov	r24, r13
    1ff8:	d7 fe       	sbrs	r13, 7
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <vfprintf+0x310>
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	69 2e       	mov	r6, r25
    2002:	78 2e       	mov	r7, r24
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	c6 01       	movw	r24, r12
    200a:	84 19       	sub	r24, r4
    200c:	91 09       	sbc	r25, r1
    200e:	8c 87       	std	Y+12, r24	; 0x0c
    2010:	9d 87       	std	Y+13, r25	; 0x0d
    2012:	96 01       	movw	r18, r12
    2014:	26 19       	sub	r18, r6
    2016:	37 09       	sbc	r19, r7
    2018:	28 0d       	add	r18, r8
    201a:	39 1d       	adc	r19, r9
    201c:	81 2f       	mov	r24, r17
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	ee 27       	eor	r30, r30
    2022:	ff 27       	eor	r31, r31
    2024:	e8 1b       	sub	r30, r24
    2026:	f9 0b       	sbc	r31, r25
    2028:	ee 87       	std	Y+14, r30	; 0x0e
    202a:	ff 87       	std	Y+15, r31	; 0x0f
    202c:	ff ef       	ldi	r31, 0xFF	; 255
    202e:	6f 16       	cp	r6, r31
    2030:	7f 06       	cpc	r7, r31
    2032:	61 f4       	brne	.+24     	; 0x204c <vfprintf+0x35c>
    2034:	b7 01       	movw	r22, r14
    2036:	8e e2       	ldi	r24, 0x2E	; 46
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	2b 8b       	std	Y+19, r18	; 0x13
    203c:	3a 8b       	std	Y+18, r19	; 0x12
    203e:	48 8b       	std	Y+16, r20	; 0x10
    2040:	59 8b       	std	Y+17, r21	; 0x11
    2042:	31 d3       	rcall	.+1634   	; 0x26a6 <fputc>
    2044:	59 89       	ldd	r21, Y+17	; 0x11
    2046:	48 89       	ldd	r20, Y+16	; 0x10
    2048:	3a 89       	ldd	r19, Y+18	; 0x12
    204a:	2b 89       	ldd	r18, Y+19	; 0x13
    204c:	c6 14       	cp	r12, r6
    204e:	d7 04       	cpc	r13, r7
    2050:	54 f0       	brlt	.+20     	; 0x2066 <vfprintf+0x376>
    2052:	6c 85       	ldd	r22, Y+12	; 0x0c
    2054:	7d 85       	ldd	r23, Y+13	; 0x0d
    2056:	66 15       	cp	r22, r6
    2058:	77 05       	cpc	r23, r7
    205a:	2c f4       	brge	.+10     	; 0x2066 <vfprintf+0x376>
    205c:	f9 01       	movw	r30, r18
    205e:	e4 0f       	add	r30, r20
    2060:	f5 1f       	adc	r31, r21
    2062:	81 81       	ldd	r24, Z+1	; 0x01
    2064:	01 c0       	rjmp	.+2      	; 0x2068 <vfprintf+0x378>
    2066:	80 e3       	ldi	r24, 0x30	; 48
    2068:	71 e0       	ldi	r23, 0x01	; 1
    206a:	67 1a       	sub	r6, r23
    206c:	71 08       	sbc	r7, r1
    206e:	4f 5f       	subi	r20, 0xFF	; 255
    2070:	5f 4f       	sbci	r21, 0xFF	; 255
    2072:	ee 85       	ldd	r30, Y+14	; 0x0e
    2074:	ff 85       	ldd	r31, Y+15	; 0x0f
    2076:	6e 16       	cp	r6, r30
    2078:	7f 06       	cpc	r7, r31
    207a:	64 f0       	brlt	.+24     	; 0x2094 <vfprintf+0x3a4>
    207c:	b7 01       	movw	r22, r14
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	2b 8b       	std	Y+19, r18	; 0x13
    2082:	3a 8b       	std	Y+18, r19	; 0x12
    2084:	48 8b       	std	Y+16, r20	; 0x10
    2086:	59 8b       	std	Y+17, r21	; 0x11
    2088:	0e d3       	rcall	.+1564   	; 0x26a6 <fputc>
    208a:	2b 89       	ldd	r18, Y+19	; 0x13
    208c:	3a 89       	ldd	r19, Y+18	; 0x12
    208e:	48 89       	ldd	r20, Y+16	; 0x10
    2090:	59 89       	ldd	r21, Y+17	; 0x11
    2092:	cc cf       	rjmp	.-104    	; 0x202c <vfprintf+0x33c>
    2094:	6c 14       	cp	r6, r12
    2096:	7d 04       	cpc	r7, r13
    2098:	39 f4       	brne	.+14     	; 0x20a8 <vfprintf+0x3b8>
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	96 33       	cpi	r25, 0x36	; 54
    209e:	18 f4       	brcc	.+6      	; 0x20a6 <vfprintf+0x3b6>
    20a0:	95 33       	cpi	r25, 0x35	; 53
    20a2:	11 f4       	brne	.+4      	; 0x20a8 <vfprintf+0x3b8>
    20a4:	04 ff       	sbrs	r16, 4
    20a6:	81 e3       	ldi	r24, 0x31	; 49
    20a8:	b7 01       	movw	r22, r14
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	45 c0       	rjmp	.+138    	; 0x2138 <vfprintf+0x448>
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	81 33       	cpi	r24, 0x31	; 49
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <vfprintf+0x3c6>
    20b4:	0f 7e       	andi	r16, 0xEF	; 239
    20b6:	b7 01       	movw	r22, r14
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	f5 d2       	rcall	.+1514   	; 0x26a6 <fputc>
    20bc:	11 11       	cpse	r17, r1
    20be:	05 c0       	rjmp	.+10     	; 0x20ca <vfprintf+0x3da>
    20c0:	74 fe       	sbrs	r7, 4
    20c2:	16 c0       	rjmp	.+44     	; 0x20f0 <vfprintf+0x400>
    20c4:	85 e4       	ldi	r24, 0x45	; 69
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	15 c0       	rjmp	.+42     	; 0x20f4 <vfprintf+0x404>
    20ca:	b7 01       	movw	r22, r14
    20cc:	8e e2       	ldi	r24, 0x2E	; 46
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	ea d2       	rcall	.+1492   	; 0x26a6 <fputc>
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	66 24       	eor	r6, r6
    20d6:	63 94       	inc	r6
    20d8:	68 0e       	add	r6, r24
    20da:	f4 01       	movw	r30, r8
    20dc:	e8 0f       	add	r30, r24
    20de:	f1 1d       	adc	r31, r1
    20e0:	80 81       	ld	r24, Z
    20e2:	b7 01       	movw	r22, r14
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	df d2       	rcall	.+1470   	; 0x26a6 <fputc>
    20e8:	11 50       	subi	r17, 0x01	; 1
    20ea:	51 f3       	breq	.-44     	; 0x20c0 <vfprintf+0x3d0>
    20ec:	86 2d       	mov	r24, r6
    20ee:	f2 cf       	rjmp	.-28     	; 0x20d4 <vfprintf+0x3e4>
    20f0:	85 e6       	ldi	r24, 0x65	; 101
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	b7 01       	movw	r22, r14
    20f6:	d7 d2       	rcall	.+1454   	; 0x26a6 <fputc>
    20f8:	d7 fc       	sbrc	r13, 7
    20fa:	05 c0       	rjmp	.+10     	; 0x2106 <vfprintf+0x416>
    20fc:	c1 14       	cp	r12, r1
    20fe:	d1 04       	cpc	r13, r1
    2100:	39 f4       	brne	.+14     	; 0x2110 <vfprintf+0x420>
    2102:	04 ff       	sbrs	r16, 4
    2104:	05 c0       	rjmp	.+10     	; 0x2110 <vfprintf+0x420>
    2106:	d1 94       	neg	r13
    2108:	c1 94       	neg	r12
    210a:	d1 08       	sbc	r13, r1
    210c:	8d e2       	ldi	r24, 0x2D	; 45
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <vfprintf+0x422>
    2110:	8b e2       	ldi	r24, 0x2B	; 43
    2112:	b7 01       	movw	r22, r14
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	c7 d2       	rcall	.+1422   	; 0x26a6 <fputc>
    2118:	80 e3       	ldi	r24, 0x30	; 48
    211a:	6a e0       	ldi	r22, 0x0A	; 10
    211c:	c6 16       	cp	r12, r22
    211e:	d1 04       	cpc	r13, r1
    2120:	2c f0       	brlt	.+10     	; 0x212c <vfprintf+0x43c>
    2122:	8f 5f       	subi	r24, 0xFF	; 255
    2124:	fa e0       	ldi	r31, 0x0A	; 10
    2126:	cf 1a       	sub	r12, r31
    2128:	d1 08       	sbc	r13, r1
    212a:	f7 cf       	rjmp	.-18     	; 0x211a <vfprintf+0x42a>
    212c:	b7 01       	movw	r22, r14
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	ba d2       	rcall	.+1396   	; 0x26a6 <fputc>
    2132:	b7 01       	movw	r22, r14
    2134:	c6 01       	movw	r24, r12
    2136:	c0 96       	adiw	r24, 0x30	; 48
    2138:	b6 d2       	rcall	.+1388   	; 0x26a6 <fputc>
    213a:	36 c1       	rjmp	.+620    	; 0x23a8 <vfprintf+0x6b8>
    213c:	83 36       	cpi	r24, 0x63	; 99
    213e:	31 f0       	breq	.+12     	; 0x214c <vfprintf+0x45c>
    2140:	83 37       	cpi	r24, 0x73	; 115
    2142:	79 f0       	breq	.+30     	; 0x2162 <vfprintf+0x472>
    2144:	83 35       	cpi	r24, 0x53	; 83
    2146:	09 f0       	breq	.+2      	; 0x214a <vfprintf+0x45a>
    2148:	54 c0       	rjmp	.+168    	; 0x21f2 <vfprintf+0x502>
    214a:	20 c0       	rjmp	.+64     	; 0x218c <vfprintf+0x49c>
    214c:	56 01       	movw	r10, r12
    214e:	72 e0       	ldi	r23, 0x02	; 2
    2150:	a7 0e       	add	r10, r23
    2152:	b1 1c       	adc	r11, r1
    2154:	f6 01       	movw	r30, r12
    2156:	80 81       	ld	r24, Z
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	01 e0       	ldi	r16, 0x01	; 1
    215c:	10 e0       	ldi	r17, 0x00	; 0
    215e:	64 01       	movw	r12, r8
    2160:	13 c0       	rjmp	.+38     	; 0x2188 <vfprintf+0x498>
    2162:	56 01       	movw	r10, r12
    2164:	f2 e0       	ldi	r31, 0x02	; 2
    2166:	af 0e       	add	r10, r31
    2168:	b1 1c       	adc	r11, r1
    216a:	f6 01       	movw	r30, r12
    216c:	c0 80       	ld	r12, Z
    216e:	d1 80       	ldd	r13, Z+1	; 0x01
    2170:	26 ff       	sbrs	r18, 6
    2172:	03 c0       	rjmp	.+6      	; 0x217a <vfprintf+0x48a>
    2174:	61 2f       	mov	r22, r17
    2176:	70 e0       	ldi	r23, 0x00	; 0
    2178:	02 c0       	rjmp	.+4      	; 0x217e <vfprintf+0x48e>
    217a:	6f ef       	ldi	r22, 0xFF	; 255
    217c:	7f ef       	ldi	r23, 0xFF	; 255
    217e:	c6 01       	movw	r24, r12
    2180:	2b 8b       	std	Y+19, r18	; 0x13
    2182:	3c d2       	rcall	.+1144   	; 0x25fc <strnlen>
    2184:	8c 01       	movw	r16, r24
    2186:	2b 89       	ldd	r18, Y+19	; 0x13
    2188:	2f 77       	andi	r18, 0x7F	; 127
    218a:	14 c0       	rjmp	.+40     	; 0x21b4 <vfprintf+0x4c4>
    218c:	56 01       	movw	r10, r12
    218e:	f2 e0       	ldi	r31, 0x02	; 2
    2190:	af 0e       	add	r10, r31
    2192:	b1 1c       	adc	r11, r1
    2194:	f6 01       	movw	r30, r12
    2196:	c0 80       	ld	r12, Z
    2198:	d1 80       	ldd	r13, Z+1	; 0x01
    219a:	26 ff       	sbrs	r18, 6
    219c:	03 c0       	rjmp	.+6      	; 0x21a4 <vfprintf+0x4b4>
    219e:	61 2f       	mov	r22, r17
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <vfprintf+0x4b8>
    21a4:	6f ef       	ldi	r22, 0xFF	; 255
    21a6:	7f ef       	ldi	r23, 0xFF	; 255
    21a8:	c6 01       	movw	r24, r12
    21aa:	2b 8b       	std	Y+19, r18	; 0x13
    21ac:	1c d2       	rcall	.+1080   	; 0x25e6 <strnlen_P>
    21ae:	8c 01       	movw	r16, r24
    21b0:	2b 89       	ldd	r18, Y+19	; 0x13
    21b2:	20 68       	ori	r18, 0x80	; 128
    21b4:	72 2e       	mov	r7, r18
    21b6:	23 fd       	sbrc	r18, 3
    21b8:	18 c0       	rjmp	.+48     	; 0x21ea <vfprintf+0x4fa>
    21ba:	85 2d       	mov	r24, r5
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	08 17       	cp	r16, r24
    21c0:	19 07       	cpc	r17, r25
    21c2:	98 f4       	brcc	.+38     	; 0x21ea <vfprintf+0x4fa>
    21c4:	b7 01       	movw	r22, r14
    21c6:	80 e2       	ldi	r24, 0x20	; 32
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	6d d2       	rcall	.+1242   	; 0x26a6 <fputc>
    21cc:	5a 94       	dec	r5
    21ce:	f5 cf       	rjmp	.-22     	; 0x21ba <vfprintf+0x4ca>
    21d0:	f6 01       	movw	r30, r12
    21d2:	77 fc       	sbrc	r7, 7
    21d4:	85 91       	lpm	r24, Z+
    21d6:	77 fe       	sbrs	r7, 7
    21d8:	81 91       	ld	r24, Z+
    21da:	6f 01       	movw	r12, r30
    21dc:	b7 01       	movw	r22, r14
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	62 d2       	rcall	.+1220   	; 0x26a6 <fputc>
    21e2:	51 10       	cpse	r5, r1
    21e4:	5a 94       	dec	r5
    21e6:	01 50       	subi	r16, 0x01	; 1
    21e8:	11 09       	sbc	r17, r1
    21ea:	01 15       	cp	r16, r1
    21ec:	11 05       	cpc	r17, r1
    21ee:	81 f7       	brne	.-32     	; 0x21d0 <vfprintf+0x4e0>
    21f0:	db c0       	rjmp	.+438    	; 0x23a8 <vfprintf+0x6b8>
    21f2:	84 36       	cpi	r24, 0x64	; 100
    21f4:	11 f0       	breq	.+4      	; 0x21fa <vfprintf+0x50a>
    21f6:	89 36       	cpi	r24, 0x69	; 105
    21f8:	49 f5       	brne	.+82     	; 0x224c <vfprintf+0x55c>
    21fa:	56 01       	movw	r10, r12
    21fc:	27 ff       	sbrs	r18, 7
    21fe:	09 c0       	rjmp	.+18     	; 0x2212 <vfprintf+0x522>
    2200:	f4 e0       	ldi	r31, 0x04	; 4
    2202:	af 0e       	add	r10, r31
    2204:	b1 1c       	adc	r11, r1
    2206:	f6 01       	movw	r30, r12
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	0a c0       	rjmp	.+20     	; 0x2226 <vfprintf+0x536>
    2212:	f2 e0       	ldi	r31, 0x02	; 2
    2214:	af 0e       	add	r10, r31
    2216:	b1 1c       	adc	r11, r1
    2218:	f6 01       	movw	r30, r12
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	88 27       	eor	r24, r24
    2220:	77 fd       	sbrc	r23, 7
    2222:	80 95       	com	r24
    2224:	98 2f       	mov	r25, r24
    2226:	02 2f       	mov	r16, r18
    2228:	0f 76       	andi	r16, 0x6F	; 111
    222a:	97 ff       	sbrs	r25, 7
    222c:	08 c0       	rjmp	.+16     	; 0x223e <vfprintf+0x54e>
    222e:	90 95       	com	r25
    2230:	80 95       	com	r24
    2232:	70 95       	com	r23
    2234:	61 95       	neg	r22
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	8f 4f       	sbci	r24, 0xFF	; 255
    223a:	9f 4f       	sbci	r25, 0xFF	; 255
    223c:	00 68       	ori	r16, 0x80	; 128
    223e:	2a e0       	ldi	r18, 0x0A	; 10
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	a4 01       	movw	r20, r8
    2244:	62 d2       	rcall	.+1220   	; 0x270a <__ultoa_invert>
    2246:	c8 2e       	mov	r12, r24
    2248:	c8 18       	sub	r12, r8
    224a:	3d c0       	rjmp	.+122    	; 0x22c6 <vfprintf+0x5d6>
    224c:	02 2f       	mov	r16, r18
    224e:	85 37       	cpi	r24, 0x75	; 117
    2250:	21 f4       	brne	.+8      	; 0x225a <vfprintf+0x56a>
    2252:	0f 7e       	andi	r16, 0xEF	; 239
    2254:	2a e0       	ldi	r18, 0x0A	; 10
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	1d c0       	rjmp	.+58     	; 0x2294 <vfprintf+0x5a4>
    225a:	09 7f       	andi	r16, 0xF9	; 249
    225c:	8f 36       	cpi	r24, 0x6F	; 111
    225e:	91 f0       	breq	.+36     	; 0x2284 <vfprintf+0x594>
    2260:	18 f4       	brcc	.+6      	; 0x2268 <vfprintf+0x578>
    2262:	88 35       	cpi	r24, 0x58	; 88
    2264:	59 f0       	breq	.+22     	; 0x227c <vfprintf+0x58c>
    2266:	a9 c0       	rjmp	.+338    	; 0x23ba <vfprintf+0x6ca>
    2268:	80 37       	cpi	r24, 0x70	; 112
    226a:	19 f0       	breq	.+6      	; 0x2272 <vfprintf+0x582>
    226c:	88 37       	cpi	r24, 0x78	; 120
    226e:	11 f0       	breq	.+4      	; 0x2274 <vfprintf+0x584>
    2270:	a4 c0       	rjmp	.+328    	; 0x23ba <vfprintf+0x6ca>
    2272:	00 61       	ori	r16, 0x10	; 16
    2274:	04 ff       	sbrs	r16, 4
    2276:	09 c0       	rjmp	.+18     	; 0x228a <vfprintf+0x59a>
    2278:	04 60       	ori	r16, 0x04	; 4
    227a:	07 c0       	rjmp	.+14     	; 0x228a <vfprintf+0x59a>
    227c:	24 ff       	sbrs	r18, 4
    227e:	08 c0       	rjmp	.+16     	; 0x2290 <vfprintf+0x5a0>
    2280:	06 60       	ori	r16, 0x06	; 6
    2282:	06 c0       	rjmp	.+12     	; 0x2290 <vfprintf+0x5a0>
    2284:	28 e0       	ldi	r18, 0x08	; 8
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <vfprintf+0x5a4>
    228a:	20 e1       	ldi	r18, 0x10	; 16
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <vfprintf+0x5a4>
    2290:	20 e1       	ldi	r18, 0x10	; 16
    2292:	32 e0       	ldi	r19, 0x02	; 2
    2294:	56 01       	movw	r10, r12
    2296:	07 ff       	sbrs	r16, 7
    2298:	09 c0       	rjmp	.+18     	; 0x22ac <vfprintf+0x5bc>
    229a:	f4 e0       	ldi	r31, 0x04	; 4
    229c:	af 0e       	add	r10, r31
    229e:	b1 1c       	adc	r11, r1
    22a0:	f6 01       	movw	r30, r12
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	08 c0       	rjmp	.+16     	; 0x22bc <vfprintf+0x5cc>
    22ac:	f2 e0       	ldi	r31, 0x02	; 2
    22ae:	af 0e       	add	r10, r31
    22b0:	b1 1c       	adc	r11, r1
    22b2:	f6 01       	movw	r30, r12
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a4 01       	movw	r20, r8
    22be:	25 d2       	rcall	.+1098   	; 0x270a <__ultoa_invert>
    22c0:	c8 2e       	mov	r12, r24
    22c2:	c8 18       	sub	r12, r8
    22c4:	0f 77       	andi	r16, 0x7F	; 127
    22c6:	06 ff       	sbrs	r16, 6
    22c8:	0b c0       	rjmp	.+22     	; 0x22e0 <vfprintf+0x5f0>
    22ca:	20 2f       	mov	r18, r16
    22cc:	2e 7f       	andi	r18, 0xFE	; 254
    22ce:	c1 16       	cp	r12, r17
    22d0:	50 f4       	brcc	.+20     	; 0x22e6 <vfprintf+0x5f6>
    22d2:	04 ff       	sbrs	r16, 4
    22d4:	0a c0       	rjmp	.+20     	; 0x22ea <vfprintf+0x5fa>
    22d6:	02 fd       	sbrc	r16, 2
    22d8:	08 c0       	rjmp	.+16     	; 0x22ea <vfprintf+0x5fa>
    22da:	20 2f       	mov	r18, r16
    22dc:	2e 7e       	andi	r18, 0xEE	; 238
    22de:	05 c0       	rjmp	.+10     	; 0x22ea <vfprintf+0x5fa>
    22e0:	dc 2c       	mov	r13, r12
    22e2:	20 2f       	mov	r18, r16
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <vfprintf+0x5fc>
    22e6:	dc 2c       	mov	r13, r12
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <vfprintf+0x5fc>
    22ea:	d1 2e       	mov	r13, r17
    22ec:	24 ff       	sbrs	r18, 4
    22ee:	0d c0       	rjmp	.+26     	; 0x230a <vfprintf+0x61a>
    22f0:	fe 01       	movw	r30, r28
    22f2:	ec 0d       	add	r30, r12
    22f4:	f1 1d       	adc	r31, r1
    22f6:	80 81       	ld	r24, Z
    22f8:	80 33       	cpi	r24, 0x30	; 48
    22fa:	11 f4       	brne	.+4      	; 0x2300 <vfprintf+0x610>
    22fc:	29 7e       	andi	r18, 0xE9	; 233
    22fe:	09 c0       	rjmp	.+18     	; 0x2312 <vfprintf+0x622>
    2300:	22 ff       	sbrs	r18, 2
    2302:	06 c0       	rjmp	.+12     	; 0x2310 <vfprintf+0x620>
    2304:	d3 94       	inc	r13
    2306:	d3 94       	inc	r13
    2308:	04 c0       	rjmp	.+8      	; 0x2312 <vfprintf+0x622>
    230a:	82 2f       	mov	r24, r18
    230c:	86 78       	andi	r24, 0x86	; 134
    230e:	09 f0       	breq	.+2      	; 0x2312 <vfprintf+0x622>
    2310:	d3 94       	inc	r13
    2312:	23 fd       	sbrc	r18, 3
    2314:	12 c0       	rjmp	.+36     	; 0x233a <vfprintf+0x64a>
    2316:	20 ff       	sbrs	r18, 0
    2318:	06 c0       	rjmp	.+12     	; 0x2326 <vfprintf+0x636>
    231a:	1c 2d       	mov	r17, r12
    231c:	d5 14       	cp	r13, r5
    231e:	18 f4       	brcc	.+6      	; 0x2326 <vfprintf+0x636>
    2320:	15 0d       	add	r17, r5
    2322:	1d 19       	sub	r17, r13
    2324:	d5 2c       	mov	r13, r5
    2326:	d5 14       	cp	r13, r5
    2328:	60 f4       	brcc	.+24     	; 0x2342 <vfprintf+0x652>
    232a:	b7 01       	movw	r22, r14
    232c:	80 e2       	ldi	r24, 0x20	; 32
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	2b 8b       	std	Y+19, r18	; 0x13
    2332:	b9 d1       	rcall	.+882    	; 0x26a6 <fputc>
    2334:	d3 94       	inc	r13
    2336:	2b 89       	ldd	r18, Y+19	; 0x13
    2338:	f6 cf       	rjmp	.-20     	; 0x2326 <vfprintf+0x636>
    233a:	d5 14       	cp	r13, r5
    233c:	10 f4       	brcc	.+4      	; 0x2342 <vfprintf+0x652>
    233e:	5d 18       	sub	r5, r13
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <vfprintf+0x654>
    2342:	51 2c       	mov	r5, r1
    2344:	24 ff       	sbrs	r18, 4
    2346:	11 c0       	rjmp	.+34     	; 0x236a <vfprintf+0x67a>
    2348:	b7 01       	movw	r22, r14
    234a:	80 e3       	ldi	r24, 0x30	; 48
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	2b 8b       	std	Y+19, r18	; 0x13
    2350:	aa d1       	rcall	.+852    	; 0x26a6 <fputc>
    2352:	2b 89       	ldd	r18, Y+19	; 0x13
    2354:	22 ff       	sbrs	r18, 2
    2356:	16 c0       	rjmp	.+44     	; 0x2384 <vfprintf+0x694>
    2358:	21 ff       	sbrs	r18, 1
    235a:	03 c0       	rjmp	.+6      	; 0x2362 <vfprintf+0x672>
    235c:	88 e5       	ldi	r24, 0x58	; 88
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <vfprintf+0x676>
    2362:	88 e7       	ldi	r24, 0x78	; 120
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	b7 01       	movw	r22, r14
    2368:	0c c0       	rjmp	.+24     	; 0x2382 <vfprintf+0x692>
    236a:	82 2f       	mov	r24, r18
    236c:	86 78       	andi	r24, 0x86	; 134
    236e:	51 f0       	breq	.+20     	; 0x2384 <vfprintf+0x694>
    2370:	21 fd       	sbrc	r18, 1
    2372:	02 c0       	rjmp	.+4      	; 0x2378 <vfprintf+0x688>
    2374:	80 e2       	ldi	r24, 0x20	; 32
    2376:	01 c0       	rjmp	.+2      	; 0x237a <vfprintf+0x68a>
    2378:	8b e2       	ldi	r24, 0x2B	; 43
    237a:	27 fd       	sbrc	r18, 7
    237c:	8d e2       	ldi	r24, 0x2D	; 45
    237e:	b7 01       	movw	r22, r14
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	91 d1       	rcall	.+802    	; 0x26a6 <fputc>
    2384:	c1 16       	cp	r12, r17
    2386:	30 f4       	brcc	.+12     	; 0x2394 <vfprintf+0x6a4>
    2388:	b7 01       	movw	r22, r14
    238a:	80 e3       	ldi	r24, 0x30	; 48
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	8b d1       	rcall	.+790    	; 0x26a6 <fputc>
    2390:	11 50       	subi	r17, 0x01	; 1
    2392:	f8 cf       	rjmp	.-16     	; 0x2384 <vfprintf+0x694>
    2394:	ca 94       	dec	r12
    2396:	f4 01       	movw	r30, r8
    2398:	ec 0d       	add	r30, r12
    239a:	f1 1d       	adc	r31, r1
    239c:	80 81       	ld	r24, Z
    239e:	b7 01       	movw	r22, r14
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	81 d1       	rcall	.+770    	; 0x26a6 <fputc>
    23a4:	c1 10       	cpse	r12, r1
    23a6:	f6 cf       	rjmp	.-20     	; 0x2394 <vfprintf+0x6a4>
    23a8:	55 20       	and	r5, r5
    23aa:	09 f4       	brne	.+2      	; 0x23ae <vfprintf+0x6be>
    23ac:	dd cc       	rjmp	.-1606   	; 0x1d68 <vfprintf+0x78>
    23ae:	b7 01       	movw	r22, r14
    23b0:	80 e2       	ldi	r24, 0x20	; 32
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	78 d1       	rcall	.+752    	; 0x26a6 <fputc>
    23b6:	5a 94       	dec	r5
    23b8:	f7 cf       	rjmp	.-18     	; 0x23a8 <vfprintf+0x6b8>
    23ba:	f7 01       	movw	r30, r14
    23bc:	86 81       	ldd	r24, Z+6	; 0x06
    23be:	97 81       	ldd	r25, Z+7	; 0x07
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <vfprintf+0x6d6>
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
    23c4:	9f ef       	ldi	r25, 0xFF	; 255
    23c6:	63 96       	adiw	r28, 0x13	; 19
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	ff 90       	pop	r15
    23d6:	ef 90       	pop	r14
    23d8:	df 90       	pop	r13
    23da:	cf 90       	pop	r12
    23dc:	bf 90       	pop	r11
    23de:	af 90       	pop	r10
    23e0:	9f 90       	pop	r9
    23e2:	8f 90       	pop	r8
    23e4:	7f 90       	pop	r7
    23e6:	6f 90       	pop	r6
    23e8:	5f 90       	pop	r5
    23ea:	4f 90       	pop	r4
    23ec:	3f 90       	pop	r3
    23ee:	2f 90       	pop	r2
    23f0:	08 95       	ret

000023f2 <__udivmodsi4>:
    23f2:	a1 e2       	ldi	r26, 0x21	; 33
    23f4:	1a 2e       	mov	r1, r26
    23f6:	aa 1b       	sub	r26, r26
    23f8:	bb 1b       	sub	r27, r27
    23fa:	fd 01       	movw	r30, r26
    23fc:	0d c0       	rjmp	.+26     	; 0x2418 <__udivmodsi4_ep>

000023fe <__udivmodsi4_loop>:
    23fe:	aa 1f       	adc	r26, r26
    2400:	bb 1f       	adc	r27, r27
    2402:	ee 1f       	adc	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	a2 17       	cp	r26, r18
    2408:	b3 07       	cpc	r27, r19
    240a:	e4 07       	cpc	r30, r20
    240c:	f5 07       	cpc	r31, r21
    240e:	20 f0       	brcs	.+8      	; 0x2418 <__udivmodsi4_ep>
    2410:	a2 1b       	sub	r26, r18
    2412:	b3 0b       	sbc	r27, r19
    2414:	e4 0b       	sbc	r30, r20
    2416:	f5 0b       	sbc	r31, r21

00002418 <__udivmodsi4_ep>:
    2418:	66 1f       	adc	r22, r22
    241a:	77 1f       	adc	r23, r23
    241c:	88 1f       	adc	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	1a 94       	dec	r1
    2422:	69 f7       	brne	.-38     	; 0x23fe <__udivmodsi4_loop>
    2424:	60 95       	com	r22
    2426:	70 95       	com	r23
    2428:	80 95       	com	r24
    242a:	90 95       	com	r25
    242c:	9b 01       	movw	r18, r22
    242e:	ac 01       	movw	r20, r24
    2430:	bd 01       	movw	r22, r26
    2432:	cf 01       	movw	r24, r30
    2434:	08 95       	ret

00002436 <__ftoa_engine>:
    2436:	28 30       	cpi	r18, 0x08	; 8
    2438:	08 f0       	brcs	.+2      	; 0x243c <__ftoa_engine+0x6>
    243a:	27 e0       	ldi	r18, 0x07	; 7
    243c:	33 27       	eor	r19, r19
    243e:	da 01       	movw	r26, r20
    2440:	99 0f       	add	r25, r25
    2442:	31 1d       	adc	r19, r1
    2444:	87 fd       	sbrc	r24, 7
    2446:	91 60       	ori	r25, 0x01	; 1
    2448:	00 96       	adiw	r24, 0x00	; 0
    244a:	61 05       	cpc	r22, r1
    244c:	71 05       	cpc	r23, r1
    244e:	39 f4       	brne	.+14     	; 0x245e <__ftoa_engine+0x28>
    2450:	32 60       	ori	r19, 0x02	; 2
    2452:	2e 5f       	subi	r18, 0xFE	; 254
    2454:	3d 93       	st	X+, r19
    2456:	30 e3       	ldi	r19, 0x30	; 48
    2458:	2a 95       	dec	r18
    245a:	e1 f7       	brne	.-8      	; 0x2454 <__ftoa_engine+0x1e>
    245c:	08 95       	ret
    245e:	9f 3f       	cpi	r25, 0xFF	; 255
    2460:	30 f0       	brcs	.+12     	; 0x246e <__ftoa_engine+0x38>
    2462:	80 38       	cpi	r24, 0x80	; 128
    2464:	71 05       	cpc	r23, r1
    2466:	61 05       	cpc	r22, r1
    2468:	09 f0       	breq	.+2      	; 0x246c <__ftoa_engine+0x36>
    246a:	3c 5f       	subi	r19, 0xFC	; 252
    246c:	3c 5f       	subi	r19, 0xFC	; 252
    246e:	3d 93       	st	X+, r19
    2470:	91 30       	cpi	r25, 0x01	; 1
    2472:	08 f0       	brcs	.+2      	; 0x2476 <__ftoa_engine+0x40>
    2474:	80 68       	ori	r24, 0x80	; 128
    2476:	91 1d       	adc	r25, r1
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	1f 93       	push	r17
    247e:	0f 93       	push	r16
    2480:	ff 92       	push	r15
    2482:	ef 92       	push	r14
    2484:	19 2f       	mov	r17, r25
    2486:	98 7f       	andi	r25, 0xF8	; 248
    2488:	96 95       	lsr	r25
    248a:	e9 2f       	mov	r30, r25
    248c:	96 95       	lsr	r25
    248e:	96 95       	lsr	r25
    2490:	e9 0f       	add	r30, r25
    2492:	ff 27       	eor	r31, r31
    2494:	e2 5a       	subi	r30, 0xA2	; 162
    2496:	fd 4f       	sbci	r31, 0xFD	; 253
    2498:	99 27       	eor	r25, r25
    249a:	33 27       	eor	r19, r19
    249c:	ee 24       	eor	r14, r14
    249e:	ff 24       	eor	r15, r15
    24a0:	a7 01       	movw	r20, r14
    24a2:	e7 01       	movw	r28, r14
    24a4:	05 90       	lpm	r0, Z+
    24a6:	08 94       	sec
    24a8:	07 94       	ror	r0
    24aa:	28 f4       	brcc	.+10     	; 0x24b6 <__ftoa_engine+0x80>
    24ac:	36 0f       	add	r19, r22
    24ae:	e7 1e       	adc	r14, r23
    24b0:	f8 1e       	adc	r15, r24
    24b2:	49 1f       	adc	r20, r25
    24b4:	51 1d       	adc	r21, r1
    24b6:	66 0f       	add	r22, r22
    24b8:	77 1f       	adc	r23, r23
    24ba:	88 1f       	adc	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	06 94       	lsr	r0
    24c0:	a1 f7       	brne	.-24     	; 0x24aa <__ftoa_engine+0x74>
    24c2:	05 90       	lpm	r0, Z+
    24c4:	07 94       	ror	r0
    24c6:	28 f4       	brcc	.+10     	; 0x24d2 <__ftoa_engine+0x9c>
    24c8:	e7 0e       	add	r14, r23
    24ca:	f8 1e       	adc	r15, r24
    24cc:	49 1f       	adc	r20, r25
    24ce:	56 1f       	adc	r21, r22
    24d0:	c1 1d       	adc	r28, r1
    24d2:	77 0f       	add	r23, r23
    24d4:	88 1f       	adc	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	66 1f       	adc	r22, r22
    24da:	06 94       	lsr	r0
    24dc:	a1 f7       	brne	.-24     	; 0x24c6 <__ftoa_engine+0x90>
    24de:	05 90       	lpm	r0, Z+
    24e0:	07 94       	ror	r0
    24e2:	28 f4       	brcc	.+10     	; 0x24ee <__ftoa_engine+0xb8>
    24e4:	f8 0e       	add	r15, r24
    24e6:	49 1f       	adc	r20, r25
    24e8:	56 1f       	adc	r21, r22
    24ea:	c7 1f       	adc	r28, r23
    24ec:	d1 1d       	adc	r29, r1
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	66 1f       	adc	r22, r22
    24f4:	77 1f       	adc	r23, r23
    24f6:	06 94       	lsr	r0
    24f8:	a1 f7       	brne	.-24     	; 0x24e2 <__ftoa_engine+0xac>
    24fa:	05 90       	lpm	r0, Z+
    24fc:	07 94       	ror	r0
    24fe:	20 f4       	brcc	.+8      	; 0x2508 <__ftoa_engine+0xd2>
    2500:	49 0f       	add	r20, r25
    2502:	56 1f       	adc	r21, r22
    2504:	c7 1f       	adc	r28, r23
    2506:	d8 1f       	adc	r29, r24
    2508:	99 0f       	add	r25, r25
    250a:	66 1f       	adc	r22, r22
    250c:	77 1f       	adc	r23, r23
    250e:	88 1f       	adc	r24, r24
    2510:	06 94       	lsr	r0
    2512:	a9 f7       	brne	.-22     	; 0x24fe <__ftoa_engine+0xc8>
    2514:	84 91       	lpm	r24, Z
    2516:	10 95       	com	r17
    2518:	17 70       	andi	r17, 0x07	; 7
    251a:	41 f0       	breq	.+16     	; 0x252c <__ftoa_engine+0xf6>
    251c:	d6 95       	lsr	r29
    251e:	c7 95       	ror	r28
    2520:	57 95       	ror	r21
    2522:	47 95       	ror	r20
    2524:	f7 94       	ror	r15
    2526:	e7 94       	ror	r14
    2528:	1a 95       	dec	r17
    252a:	c1 f7       	brne	.-16     	; 0x251c <__ftoa_engine+0xe6>
    252c:	e4 e0       	ldi	r30, 0x04	; 4
    252e:	f2 e0       	ldi	r31, 0x02	; 2
    2530:	68 94       	set
    2532:	15 90       	lpm	r1, Z+
    2534:	15 91       	lpm	r17, Z+
    2536:	35 91       	lpm	r19, Z+
    2538:	65 91       	lpm	r22, Z+
    253a:	95 91       	lpm	r25, Z+
    253c:	05 90       	lpm	r0, Z+
    253e:	7f e2       	ldi	r23, 0x2F	; 47
    2540:	73 95       	inc	r23
    2542:	e1 18       	sub	r14, r1
    2544:	f1 0a       	sbc	r15, r17
    2546:	43 0b       	sbc	r20, r19
    2548:	56 0b       	sbc	r21, r22
    254a:	c9 0b       	sbc	r28, r25
    254c:	d0 09       	sbc	r29, r0
    254e:	c0 f7       	brcc	.-16     	; 0x2540 <__ftoa_engine+0x10a>
    2550:	e1 0c       	add	r14, r1
    2552:	f1 1e       	adc	r15, r17
    2554:	43 1f       	adc	r20, r19
    2556:	56 1f       	adc	r21, r22
    2558:	c9 1f       	adc	r28, r25
    255a:	d0 1d       	adc	r29, r0
    255c:	7e f4       	brtc	.+30     	; 0x257c <__ftoa_engine+0x146>
    255e:	70 33       	cpi	r23, 0x30	; 48
    2560:	11 f4       	brne	.+4      	; 0x2566 <__ftoa_engine+0x130>
    2562:	8a 95       	dec	r24
    2564:	e6 cf       	rjmp	.-52     	; 0x2532 <__ftoa_engine+0xfc>
    2566:	e8 94       	clt
    2568:	01 50       	subi	r16, 0x01	; 1
    256a:	30 f0       	brcs	.+12     	; 0x2578 <__ftoa_engine+0x142>
    256c:	08 0f       	add	r16, r24
    256e:	0a f4       	brpl	.+2      	; 0x2572 <__ftoa_engine+0x13c>
    2570:	00 27       	eor	r16, r16
    2572:	02 17       	cp	r16, r18
    2574:	08 f4       	brcc	.+2      	; 0x2578 <__ftoa_engine+0x142>
    2576:	20 2f       	mov	r18, r16
    2578:	23 95       	inc	r18
    257a:	02 2f       	mov	r16, r18
    257c:	7a 33       	cpi	r23, 0x3A	; 58
    257e:	28 f0       	brcs	.+10     	; 0x258a <__ftoa_engine+0x154>
    2580:	79 e3       	ldi	r23, 0x39	; 57
    2582:	7d 93       	st	X+, r23
    2584:	2a 95       	dec	r18
    2586:	e9 f7       	brne	.-6      	; 0x2582 <__ftoa_engine+0x14c>
    2588:	10 c0       	rjmp	.+32     	; 0x25aa <__ftoa_engine+0x174>
    258a:	7d 93       	st	X+, r23
    258c:	2a 95       	dec	r18
    258e:	89 f6       	brne	.-94     	; 0x2532 <__ftoa_engine+0xfc>
    2590:	06 94       	lsr	r0
    2592:	97 95       	ror	r25
    2594:	67 95       	ror	r22
    2596:	37 95       	ror	r19
    2598:	17 95       	ror	r17
    259a:	17 94       	ror	r1
    259c:	e1 18       	sub	r14, r1
    259e:	f1 0a       	sbc	r15, r17
    25a0:	43 0b       	sbc	r20, r19
    25a2:	56 0b       	sbc	r21, r22
    25a4:	c9 0b       	sbc	r28, r25
    25a6:	d0 09       	sbc	r29, r0
    25a8:	98 f0       	brcs	.+38     	; 0x25d0 <__ftoa_engine+0x19a>
    25aa:	23 95       	inc	r18
    25ac:	7e 91       	ld	r23, -X
    25ae:	73 95       	inc	r23
    25b0:	7a 33       	cpi	r23, 0x3A	; 58
    25b2:	08 f0       	brcs	.+2      	; 0x25b6 <__ftoa_engine+0x180>
    25b4:	70 e3       	ldi	r23, 0x30	; 48
    25b6:	7c 93       	st	X, r23
    25b8:	20 13       	cpse	r18, r16
    25ba:	b8 f7       	brcc	.-18     	; 0x25aa <__ftoa_engine+0x174>
    25bc:	7e 91       	ld	r23, -X
    25be:	70 61       	ori	r23, 0x10	; 16
    25c0:	7d 93       	st	X+, r23
    25c2:	30 f0       	brcs	.+12     	; 0x25d0 <__ftoa_engine+0x19a>
    25c4:	83 95       	inc	r24
    25c6:	71 e3       	ldi	r23, 0x31	; 49
    25c8:	7d 93       	st	X+, r23
    25ca:	70 e3       	ldi	r23, 0x30	; 48
    25cc:	2a 95       	dec	r18
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <__ftoa_engine+0x192>
    25d0:	11 24       	eor	r1, r1
    25d2:	ef 90       	pop	r14
    25d4:	ff 90       	pop	r15
    25d6:	0f 91       	pop	r16
    25d8:	1f 91       	pop	r17
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	99 27       	eor	r25, r25
    25e0:	87 fd       	sbrc	r24, 7
    25e2:	90 95       	com	r25
    25e4:	08 95       	ret

000025e6 <strnlen_P>:
    25e6:	fc 01       	movw	r30, r24
    25e8:	05 90       	lpm	r0, Z+
    25ea:	61 50       	subi	r22, 0x01	; 1
    25ec:	70 40       	sbci	r23, 0x00	; 0
    25ee:	01 10       	cpse	r0, r1
    25f0:	d8 f7       	brcc	.-10     	; 0x25e8 <strnlen_P+0x2>
    25f2:	80 95       	com	r24
    25f4:	90 95       	com	r25
    25f6:	8e 0f       	add	r24, r30
    25f8:	9f 1f       	adc	r25, r31
    25fa:	08 95       	ret

000025fc <strnlen>:
    25fc:	fc 01       	movw	r30, r24
    25fe:	61 50       	subi	r22, 0x01	; 1
    2600:	70 40       	sbci	r23, 0x00	; 0
    2602:	01 90       	ld	r0, Z+
    2604:	01 10       	cpse	r0, r1
    2606:	d8 f7       	brcc	.-10     	; 0x25fe <strnlen+0x2>
    2608:	80 95       	com	r24
    260a:	90 95       	com	r25
    260c:	8e 0f       	add	r24, r30
    260e:	9f 1f       	adc	r25, r31
    2610:	08 95       	ret

00002612 <fdevopen>:
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	ec 01       	movw	r28, r24
    261c:	8b 01       	movw	r16, r22
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	31 f4       	brne	.+12     	; 0x262e <fdevopen+0x1c>
    2622:	61 15       	cp	r22, r1
    2624:	71 05       	cpc	r23, r1
    2626:	19 f4       	brne	.+6      	; 0x262e <fdevopen+0x1c>
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	37 c0       	rjmp	.+110    	; 0x269c <fdevopen+0x8a>
    262e:	6e e0       	ldi	r22, 0x0E	; 14
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	c7 d0       	rcall	.+398    	; 0x27c6 <calloc>
    2638:	fc 01       	movw	r30, r24
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	a9 f3       	breq	.-22     	; 0x2628 <fdevopen+0x16>
    263e:	80 e8       	ldi	r24, 0x80	; 128
    2640:	83 83       	std	Z+3, r24	; 0x03
    2642:	01 15       	cp	r16, r1
    2644:	11 05       	cpc	r17, r1
    2646:	71 f0       	breq	.+28     	; 0x2664 <fdevopen+0x52>
    2648:	02 87       	std	Z+10, r16	; 0x0a
    264a:	13 87       	std	Z+11, r17	; 0x0b
    264c:	81 e8       	ldi	r24, 0x81	; 129
    264e:	83 83       	std	Z+3, r24	; 0x03
    2650:	80 91 6a 20 	lds	r24, 0x206A
    2654:	90 91 6b 20 	lds	r25, 0x206B
    2658:	89 2b       	or	r24, r25
    265a:	21 f4       	brne	.+8      	; 0x2664 <fdevopen+0x52>
    265c:	e0 93 6a 20 	sts	0x206A, r30
    2660:	f0 93 6b 20 	sts	0x206B, r31
    2664:	20 97       	sbiw	r28, 0x00	; 0
    2666:	c9 f0       	breq	.+50     	; 0x269a <fdevopen+0x88>
    2668:	c0 87       	std	Z+8, r28	; 0x08
    266a:	d1 87       	std	Z+9, r29	; 0x09
    266c:	83 81       	ldd	r24, Z+3	; 0x03
    266e:	82 60       	ori	r24, 0x02	; 2
    2670:	83 83       	std	Z+3, r24	; 0x03
    2672:	80 91 6c 20 	lds	r24, 0x206C
    2676:	90 91 6d 20 	lds	r25, 0x206D
    267a:	89 2b       	or	r24, r25
    267c:	71 f4       	brne	.+28     	; 0x269a <fdevopen+0x88>
    267e:	e0 93 6c 20 	sts	0x206C, r30
    2682:	f0 93 6d 20 	sts	0x206D, r31
    2686:	80 91 6e 20 	lds	r24, 0x206E
    268a:	90 91 6f 20 	lds	r25, 0x206F
    268e:	89 2b       	or	r24, r25
    2690:	21 f4       	brne	.+8      	; 0x269a <fdevopen+0x88>
    2692:	e0 93 6e 20 	sts	0x206E, r30
    2696:	f0 93 6f 20 	sts	0x206F, r31
    269a:	cf 01       	movw	r24, r30
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <fputc>:
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	18 2f       	mov	r17, r24
    26b0:	09 2f       	mov	r16, r25
    26b2:	eb 01       	movw	r28, r22
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	81 fd       	sbrc	r24, 1
    26b8:	03 c0       	rjmp	.+6      	; 0x26c0 <fputc+0x1a>
    26ba:	8f ef       	ldi	r24, 0xFF	; 255
    26bc:	9f ef       	ldi	r25, 0xFF	; 255
    26be:	20 c0       	rjmp	.+64     	; 0x2700 <fputc+0x5a>
    26c0:	82 ff       	sbrs	r24, 2
    26c2:	10 c0       	rjmp	.+32     	; 0x26e4 <fputc+0x3e>
    26c4:	4e 81       	ldd	r20, Y+6	; 0x06
    26c6:	5f 81       	ldd	r21, Y+7	; 0x07
    26c8:	2c 81       	ldd	r18, Y+4	; 0x04
    26ca:	3d 81       	ldd	r19, Y+5	; 0x05
    26cc:	42 17       	cp	r20, r18
    26ce:	53 07       	cpc	r21, r19
    26d0:	7c f4       	brge	.+30     	; 0x26f0 <fputc+0x4a>
    26d2:	e8 81       	ld	r30, Y
    26d4:	f9 81       	ldd	r31, Y+1	; 0x01
    26d6:	9f 01       	movw	r18, r30
    26d8:	2f 5f       	subi	r18, 0xFF	; 255
    26da:	3f 4f       	sbci	r19, 0xFF	; 255
    26dc:	28 83       	st	Y, r18
    26de:	39 83       	std	Y+1, r19	; 0x01
    26e0:	10 83       	st	Z, r17
    26e2:	06 c0       	rjmp	.+12     	; 0x26f0 <fputc+0x4a>
    26e4:	e8 85       	ldd	r30, Y+8	; 0x08
    26e6:	f9 85       	ldd	r31, Y+9	; 0x09
    26e8:	81 2f       	mov	r24, r17
    26ea:	19 95       	eicall
    26ec:	89 2b       	or	r24, r25
    26ee:	29 f7       	brne	.-54     	; 0x26ba <fputc+0x14>
    26f0:	2e 81       	ldd	r18, Y+6	; 0x06
    26f2:	3f 81       	ldd	r19, Y+7	; 0x07
    26f4:	2f 5f       	subi	r18, 0xFF	; 255
    26f6:	3f 4f       	sbci	r19, 0xFF	; 255
    26f8:	2e 83       	std	Y+6, r18	; 0x06
    26fa:	3f 83       	std	Y+7, r19	; 0x07
    26fc:	81 2f       	mov	r24, r17
    26fe:	90 2f       	mov	r25, r16
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	1f 91       	pop	r17
    2706:	0f 91       	pop	r16
    2708:	08 95       	ret

0000270a <__ultoa_invert>:
    270a:	fa 01       	movw	r30, r20
    270c:	aa 27       	eor	r26, r26
    270e:	28 30       	cpi	r18, 0x08	; 8
    2710:	51 f1       	breq	.+84     	; 0x2766 <__ultoa_invert+0x5c>
    2712:	20 31       	cpi	r18, 0x10	; 16
    2714:	81 f1       	breq	.+96     	; 0x2776 <__ultoa_invert+0x6c>
    2716:	e8 94       	clt
    2718:	6f 93       	push	r22
    271a:	6e 7f       	andi	r22, 0xFE	; 254
    271c:	6e 5f       	subi	r22, 0xFE	; 254
    271e:	7f 4f       	sbci	r23, 0xFF	; 255
    2720:	8f 4f       	sbci	r24, 0xFF	; 255
    2722:	9f 4f       	sbci	r25, 0xFF	; 255
    2724:	af 4f       	sbci	r26, 0xFF	; 255
    2726:	b1 e0       	ldi	r27, 0x01	; 1
    2728:	3e d0       	rcall	.+124    	; 0x27a6 <__ultoa_invert+0x9c>
    272a:	b4 e0       	ldi	r27, 0x04	; 4
    272c:	3c d0       	rcall	.+120    	; 0x27a6 <__ultoa_invert+0x9c>
    272e:	67 0f       	add	r22, r23
    2730:	78 1f       	adc	r23, r24
    2732:	89 1f       	adc	r24, r25
    2734:	9a 1f       	adc	r25, r26
    2736:	a1 1d       	adc	r26, r1
    2738:	68 0f       	add	r22, r24
    273a:	79 1f       	adc	r23, r25
    273c:	8a 1f       	adc	r24, r26
    273e:	91 1d       	adc	r25, r1
    2740:	a1 1d       	adc	r26, r1
    2742:	6a 0f       	add	r22, r26
    2744:	71 1d       	adc	r23, r1
    2746:	81 1d       	adc	r24, r1
    2748:	91 1d       	adc	r25, r1
    274a:	a1 1d       	adc	r26, r1
    274c:	20 d0       	rcall	.+64     	; 0x278e <__ultoa_invert+0x84>
    274e:	09 f4       	brne	.+2      	; 0x2752 <__ultoa_invert+0x48>
    2750:	68 94       	set
    2752:	3f 91       	pop	r19
    2754:	2a e0       	ldi	r18, 0x0A	; 10
    2756:	26 9f       	mul	r18, r22
    2758:	11 24       	eor	r1, r1
    275a:	30 19       	sub	r19, r0
    275c:	30 5d       	subi	r19, 0xD0	; 208
    275e:	31 93       	st	Z+, r19
    2760:	de f6       	brtc	.-74     	; 0x2718 <__ultoa_invert+0xe>
    2762:	cf 01       	movw	r24, r30
    2764:	08 95       	ret
    2766:	46 2f       	mov	r20, r22
    2768:	47 70       	andi	r20, 0x07	; 7
    276a:	40 5d       	subi	r20, 0xD0	; 208
    276c:	41 93       	st	Z+, r20
    276e:	b3 e0       	ldi	r27, 0x03	; 3
    2770:	0f d0       	rcall	.+30     	; 0x2790 <__ultoa_invert+0x86>
    2772:	c9 f7       	brne	.-14     	; 0x2766 <__ultoa_invert+0x5c>
    2774:	f6 cf       	rjmp	.-20     	; 0x2762 <__ultoa_invert+0x58>
    2776:	46 2f       	mov	r20, r22
    2778:	4f 70       	andi	r20, 0x0F	; 15
    277a:	40 5d       	subi	r20, 0xD0	; 208
    277c:	4a 33       	cpi	r20, 0x3A	; 58
    277e:	18 f0       	brcs	.+6      	; 0x2786 <__ultoa_invert+0x7c>
    2780:	49 5d       	subi	r20, 0xD9	; 217
    2782:	31 fd       	sbrc	r19, 1
    2784:	40 52       	subi	r20, 0x20	; 32
    2786:	41 93       	st	Z+, r20
    2788:	02 d0       	rcall	.+4      	; 0x278e <__ultoa_invert+0x84>
    278a:	a9 f7       	brne	.-22     	; 0x2776 <__ultoa_invert+0x6c>
    278c:	ea cf       	rjmp	.-44     	; 0x2762 <__ultoa_invert+0x58>
    278e:	b4 e0       	ldi	r27, 0x04	; 4
    2790:	a6 95       	lsr	r26
    2792:	97 95       	ror	r25
    2794:	87 95       	ror	r24
    2796:	77 95       	ror	r23
    2798:	67 95       	ror	r22
    279a:	ba 95       	dec	r27
    279c:	c9 f7       	brne	.-14     	; 0x2790 <__ultoa_invert+0x86>
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	61 05       	cpc	r22, r1
    27a2:	71 05       	cpc	r23, r1
    27a4:	08 95       	ret
    27a6:	9b 01       	movw	r18, r22
    27a8:	ac 01       	movw	r20, r24
    27aa:	0a 2e       	mov	r0, r26
    27ac:	06 94       	lsr	r0
    27ae:	57 95       	ror	r21
    27b0:	47 95       	ror	r20
    27b2:	37 95       	ror	r19
    27b4:	27 95       	ror	r18
    27b6:	ba 95       	dec	r27
    27b8:	c9 f7       	brne	.-14     	; 0x27ac <__ultoa_invert+0xa2>
    27ba:	62 0f       	add	r22, r18
    27bc:	73 1f       	adc	r23, r19
    27be:	84 1f       	adc	r24, r20
    27c0:	95 1f       	adc	r25, r21
    27c2:	a0 1d       	adc	r26, r0
    27c4:	08 95       	ret

000027c6 <calloc>:
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	86 9f       	mul	r24, r22
    27d0:	80 01       	movw	r16, r0
    27d2:	87 9f       	mul	r24, r23
    27d4:	10 0d       	add	r17, r0
    27d6:	96 9f       	mul	r25, r22
    27d8:	10 0d       	add	r17, r0
    27da:	11 24       	eor	r1, r1
    27dc:	c8 01       	movw	r24, r16
    27de:	0d d0       	rcall	.+26     	; 0x27fa <malloc>
    27e0:	ec 01       	movw	r28, r24
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	21 f0       	breq	.+8      	; 0x27ee <calloc+0x28>
    27e6:	a8 01       	movw	r20, r16
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	2d d1       	rcall	.+602    	; 0x2a48 <memset>
    27ee:	ce 01       	movw	r24, r28
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	08 95       	ret

000027fa <malloc>:
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	82 30       	cpi	r24, 0x02	; 2
    2800:	91 05       	cpc	r25, r1
    2802:	10 f4       	brcc	.+4      	; 0x2808 <malloc+0xe>
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	e0 91 72 20 	lds	r30, 0x2072
    280c:	f0 91 73 20 	lds	r31, 0x2073
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	a0 e0       	ldi	r26, 0x00	; 0
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	30 97       	sbiw	r30, 0x00	; 0
    281a:	39 f1       	breq	.+78     	; 0x286a <malloc+0x70>
    281c:	40 81       	ld	r20, Z
    281e:	51 81       	ldd	r21, Z+1	; 0x01
    2820:	48 17       	cp	r20, r24
    2822:	59 07       	cpc	r21, r25
    2824:	b8 f0       	brcs	.+46     	; 0x2854 <malloc+0x5a>
    2826:	48 17       	cp	r20, r24
    2828:	59 07       	cpc	r21, r25
    282a:	71 f4       	brne	.+28     	; 0x2848 <malloc+0x4e>
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	10 97       	sbiw	r26, 0x00	; 0
    2832:	29 f0       	breq	.+10     	; 0x283e <malloc+0x44>
    2834:	12 96       	adiw	r26, 0x02	; 2
    2836:	8d 93       	st	X+, r24
    2838:	9c 93       	st	X, r25
    283a:	13 97       	sbiw	r26, 0x03	; 3
    283c:	2c c0       	rjmp	.+88     	; 0x2896 <malloc+0x9c>
    283e:	80 93 72 20 	sts	0x2072, r24
    2842:	90 93 73 20 	sts	0x2073, r25
    2846:	27 c0       	rjmp	.+78     	; 0x2896 <malloc+0x9c>
    2848:	21 15       	cp	r18, r1
    284a:	31 05       	cpc	r19, r1
    284c:	31 f0       	breq	.+12     	; 0x285a <malloc+0x60>
    284e:	42 17       	cp	r20, r18
    2850:	53 07       	cpc	r21, r19
    2852:	18 f0       	brcs	.+6      	; 0x285a <malloc+0x60>
    2854:	a9 01       	movw	r20, r18
    2856:	db 01       	movw	r26, r22
    2858:	01 c0       	rjmp	.+2      	; 0x285c <malloc+0x62>
    285a:	ef 01       	movw	r28, r30
    285c:	9a 01       	movw	r18, r20
    285e:	bd 01       	movw	r22, r26
    2860:	df 01       	movw	r26, r30
    2862:	02 80       	ldd	r0, Z+2	; 0x02
    2864:	f3 81       	ldd	r31, Z+3	; 0x03
    2866:	e0 2d       	mov	r30, r0
    2868:	d7 cf       	rjmp	.-82     	; 0x2818 <malloc+0x1e>
    286a:	21 15       	cp	r18, r1
    286c:	31 05       	cpc	r19, r1
    286e:	f9 f0       	breq	.+62     	; 0x28ae <malloc+0xb4>
    2870:	28 1b       	sub	r18, r24
    2872:	39 0b       	sbc	r19, r25
    2874:	24 30       	cpi	r18, 0x04	; 4
    2876:	31 05       	cpc	r19, r1
    2878:	80 f4       	brcc	.+32     	; 0x289a <malloc+0xa0>
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	9b 81       	ldd	r25, Y+3	; 0x03
    287e:	61 15       	cp	r22, r1
    2880:	71 05       	cpc	r23, r1
    2882:	21 f0       	breq	.+8      	; 0x288c <malloc+0x92>
    2884:	fb 01       	movw	r30, r22
    2886:	82 83       	std	Z+2, r24	; 0x02
    2888:	93 83       	std	Z+3, r25	; 0x03
    288a:	04 c0       	rjmp	.+8      	; 0x2894 <malloc+0x9a>
    288c:	80 93 72 20 	sts	0x2072, r24
    2890:	90 93 73 20 	sts	0x2073, r25
    2894:	fe 01       	movw	r30, r28
    2896:	32 96       	adiw	r30, 0x02	; 2
    2898:	44 c0       	rjmp	.+136    	; 0x2922 <malloc+0x128>
    289a:	fe 01       	movw	r30, r28
    289c:	e2 0f       	add	r30, r18
    289e:	f3 1f       	adc	r31, r19
    28a0:	81 93       	st	Z+, r24
    28a2:	91 93       	st	Z+, r25
    28a4:	22 50       	subi	r18, 0x02	; 2
    28a6:	31 09       	sbc	r19, r1
    28a8:	28 83       	st	Y, r18
    28aa:	39 83       	std	Y+1, r19	; 0x01
    28ac:	3a c0       	rjmp	.+116    	; 0x2922 <malloc+0x128>
    28ae:	20 91 70 20 	lds	r18, 0x2070
    28b2:	30 91 71 20 	lds	r19, 0x2071
    28b6:	23 2b       	or	r18, r19
    28b8:	41 f4       	brne	.+16     	; 0x28ca <malloc+0xd0>
    28ba:	20 91 02 20 	lds	r18, 0x2002
    28be:	30 91 03 20 	lds	r19, 0x2003
    28c2:	20 93 70 20 	sts	0x2070, r18
    28c6:	30 93 71 20 	sts	0x2071, r19
    28ca:	20 91 00 20 	lds	r18, 0x2000
    28ce:	30 91 01 20 	lds	r19, 0x2001
    28d2:	21 15       	cp	r18, r1
    28d4:	31 05       	cpc	r19, r1
    28d6:	41 f4       	brne	.+16     	; 0x28e8 <malloc+0xee>
    28d8:	2d b7       	in	r18, 0x3d	; 61
    28da:	3e b7       	in	r19, 0x3e	; 62
    28dc:	40 91 04 20 	lds	r20, 0x2004
    28e0:	50 91 05 20 	lds	r21, 0x2005
    28e4:	24 1b       	sub	r18, r20
    28e6:	35 0b       	sbc	r19, r21
    28e8:	e0 91 70 20 	lds	r30, 0x2070
    28ec:	f0 91 71 20 	lds	r31, 0x2071
    28f0:	e2 17       	cp	r30, r18
    28f2:	f3 07       	cpc	r31, r19
    28f4:	a0 f4       	brcc	.+40     	; 0x291e <malloc+0x124>
    28f6:	2e 1b       	sub	r18, r30
    28f8:	3f 0b       	sbc	r19, r31
    28fa:	28 17       	cp	r18, r24
    28fc:	39 07       	cpc	r19, r25
    28fe:	78 f0       	brcs	.+30     	; 0x291e <malloc+0x124>
    2900:	ac 01       	movw	r20, r24
    2902:	4e 5f       	subi	r20, 0xFE	; 254
    2904:	5f 4f       	sbci	r21, 0xFF	; 255
    2906:	24 17       	cp	r18, r20
    2908:	35 07       	cpc	r19, r21
    290a:	48 f0       	brcs	.+18     	; 0x291e <malloc+0x124>
    290c:	4e 0f       	add	r20, r30
    290e:	5f 1f       	adc	r21, r31
    2910:	40 93 70 20 	sts	0x2070, r20
    2914:	50 93 71 20 	sts	0x2071, r21
    2918:	81 93       	st	Z+, r24
    291a:	91 93       	st	Z+, r25
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <malloc+0x128>
    291e:	e0 e0       	ldi	r30, 0x00	; 0
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	cf 01       	movw	r24, r30
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	08 95       	ret

0000292a <free>:
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	09 f4       	brne	.+2      	; 0x2934 <free+0xa>
    2932:	87 c0       	rjmp	.+270    	; 0x2a42 <free+0x118>
    2934:	fc 01       	movw	r30, r24
    2936:	32 97       	sbiw	r30, 0x02	; 2
    2938:	12 82       	std	Z+2, r1	; 0x02
    293a:	13 82       	std	Z+3, r1	; 0x03
    293c:	c0 91 72 20 	lds	r28, 0x2072
    2940:	d0 91 73 20 	lds	r29, 0x2073
    2944:	20 97       	sbiw	r28, 0x00	; 0
    2946:	81 f4       	brne	.+32     	; 0x2968 <free+0x3e>
    2948:	20 81       	ld	r18, Z
    294a:	31 81       	ldd	r19, Z+1	; 0x01
    294c:	28 0f       	add	r18, r24
    294e:	39 1f       	adc	r19, r25
    2950:	80 91 70 20 	lds	r24, 0x2070
    2954:	90 91 71 20 	lds	r25, 0x2071
    2958:	82 17       	cp	r24, r18
    295a:	93 07       	cpc	r25, r19
    295c:	79 f5       	brne	.+94     	; 0x29bc <free+0x92>
    295e:	e0 93 70 20 	sts	0x2070, r30
    2962:	f0 93 71 20 	sts	0x2071, r31
    2966:	6d c0       	rjmp	.+218    	; 0x2a42 <free+0x118>
    2968:	de 01       	movw	r26, r28
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	ae 17       	cp	r26, r30
    2970:	bf 07       	cpc	r27, r31
    2972:	50 f4       	brcc	.+20     	; 0x2988 <free+0x5e>
    2974:	12 96       	adiw	r26, 0x02	; 2
    2976:	4d 91       	ld	r20, X+
    2978:	5c 91       	ld	r21, X
    297a:	13 97       	sbiw	r26, 0x03	; 3
    297c:	9d 01       	movw	r18, r26
    297e:	41 15       	cp	r20, r1
    2980:	51 05       	cpc	r21, r1
    2982:	09 f1       	breq	.+66     	; 0x29c6 <free+0x9c>
    2984:	da 01       	movw	r26, r20
    2986:	f3 cf       	rjmp	.-26     	; 0x296e <free+0x44>
    2988:	a2 83       	std	Z+2, r26	; 0x02
    298a:	b3 83       	std	Z+3, r27	; 0x03
    298c:	40 81       	ld	r20, Z
    298e:	51 81       	ldd	r21, Z+1	; 0x01
    2990:	84 0f       	add	r24, r20
    2992:	95 1f       	adc	r25, r21
    2994:	8a 17       	cp	r24, r26
    2996:	9b 07       	cpc	r25, r27
    2998:	71 f4       	brne	.+28     	; 0x29b6 <free+0x8c>
    299a:	8d 91       	ld	r24, X+
    299c:	9c 91       	ld	r25, X
    299e:	11 97       	sbiw	r26, 0x01	; 1
    29a0:	84 0f       	add	r24, r20
    29a2:	95 1f       	adc	r25, r21
    29a4:	02 96       	adiw	r24, 0x02	; 2
    29a6:	80 83       	st	Z, r24
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	12 96       	adiw	r26, 0x02	; 2
    29ac:	8d 91       	ld	r24, X+
    29ae:	9c 91       	ld	r25, X
    29b0:	13 97       	sbiw	r26, 0x03	; 3
    29b2:	82 83       	std	Z+2, r24	; 0x02
    29b4:	93 83       	std	Z+3, r25	; 0x03
    29b6:	21 15       	cp	r18, r1
    29b8:	31 05       	cpc	r19, r1
    29ba:	29 f4       	brne	.+10     	; 0x29c6 <free+0x9c>
    29bc:	e0 93 72 20 	sts	0x2072, r30
    29c0:	f0 93 73 20 	sts	0x2073, r31
    29c4:	3e c0       	rjmp	.+124    	; 0x2a42 <free+0x118>
    29c6:	d9 01       	movw	r26, r18
    29c8:	12 96       	adiw	r26, 0x02	; 2
    29ca:	ed 93       	st	X+, r30
    29cc:	fc 93       	st	X, r31
    29ce:	13 97       	sbiw	r26, 0x03	; 3
    29d0:	4d 91       	ld	r20, X+
    29d2:	5d 91       	ld	r21, X+
    29d4:	a4 0f       	add	r26, r20
    29d6:	b5 1f       	adc	r27, r21
    29d8:	ea 17       	cp	r30, r26
    29da:	fb 07       	cpc	r31, r27
    29dc:	79 f4       	brne	.+30     	; 0x29fc <free+0xd2>
    29de:	80 81       	ld	r24, Z
    29e0:	91 81       	ldd	r25, Z+1	; 0x01
    29e2:	84 0f       	add	r24, r20
    29e4:	95 1f       	adc	r25, r21
    29e6:	02 96       	adiw	r24, 0x02	; 2
    29e8:	d9 01       	movw	r26, r18
    29ea:	8d 93       	st	X+, r24
    29ec:	9c 93       	st	X, r25
    29ee:	11 97       	sbiw	r26, 0x01	; 1
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	12 96       	adiw	r26, 0x02	; 2
    29f6:	8d 93       	st	X+, r24
    29f8:	9c 93       	st	X, r25
    29fa:	13 97       	sbiw	r26, 0x03	; 3
    29fc:	e0 e0       	ldi	r30, 0x00	; 0
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	9b 81       	ldd	r25, Y+3	; 0x03
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	19 f0       	breq	.+6      	; 0x2a0e <free+0xe4>
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ec 01       	movw	r28, r24
    2a0c:	f9 cf       	rjmp	.-14     	; 0x2a00 <free+0xd6>
    2a0e:	ce 01       	movw	r24, r28
    2a10:	02 96       	adiw	r24, 0x02	; 2
    2a12:	28 81       	ld	r18, Y
    2a14:	39 81       	ldd	r19, Y+1	; 0x01
    2a16:	82 0f       	add	r24, r18
    2a18:	93 1f       	adc	r25, r19
    2a1a:	20 91 70 20 	lds	r18, 0x2070
    2a1e:	30 91 71 20 	lds	r19, 0x2071
    2a22:	28 17       	cp	r18, r24
    2a24:	39 07       	cpc	r19, r25
    2a26:	69 f4       	brne	.+26     	; 0x2a42 <free+0x118>
    2a28:	30 97       	sbiw	r30, 0x00	; 0
    2a2a:	29 f4       	brne	.+10     	; 0x2a36 <free+0x10c>
    2a2c:	10 92 72 20 	sts	0x2072, r1
    2a30:	10 92 73 20 	sts	0x2073, r1
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <free+0x110>
    2a36:	12 82       	std	Z+2, r1	; 0x02
    2a38:	13 82       	std	Z+3, r1	; 0x03
    2a3a:	c0 93 70 20 	sts	0x2070, r28
    2a3e:	d0 93 71 20 	sts	0x2071, r29
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	08 95       	ret

00002a48 <memset>:
    2a48:	dc 01       	movw	r26, r24
    2a4a:	01 c0       	rjmp	.+2      	; 0x2a4e <memset+0x6>
    2a4c:	6d 93       	st	X+, r22
    2a4e:	41 50       	subi	r20, 0x01	; 1
    2a50:	50 40       	sbci	r21, 0x00	; 0
    2a52:	e0 f7       	brcc	.-8      	; 0x2a4c <memset+0x4>
    2a54:	08 95       	ret

00002a56 <_exit>:
    2a56:	f8 94       	cli

00002a58 <__stop_program>:
    2a58:	ff cf       	rjmp	.-2      	; 0x2a58 <__stop_program>
