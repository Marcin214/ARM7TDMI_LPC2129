
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00802000  00000c12  00000ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00802030  00802030  00000cd6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000042e0  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000af8  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002068  00000000  00000000  00005c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00007c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00025b9c  00000000  00000000  00007ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001431  00000000  00000000  0002da70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  0002eea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008be9  00000000  00000000  0002ef91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	0c c1       	rjmp	.+536    	; 0x232 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0a c1       	rjmp	.+532    	; 0x232 <__bad_interrupt>
  1e:	00 00       	nop
  20:	08 c1       	rjmp	.+528    	; 0x232 <__bad_interrupt>
  22:	00 00       	nop
  24:	06 c1       	rjmp	.+524    	; 0x232 <__bad_interrupt>
  26:	00 00       	nop
  28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ea c0       	rjmp	.+468    	; 0x232 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a6 c0       	rjmp	.+332    	; 0x232 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a4 c0       	rjmp	.+328    	; 0x232 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a2 c0       	rjmp	.+324    	; 0x232 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a0 c0       	rjmp	.+320    	; 0x232 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9e c0       	rjmp	.+316    	; 0x232 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9c c0       	rjmp	.+312    	; 0x232 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9a c0       	rjmp	.+308    	; 0x232 <__bad_interrupt>
  fe:	00 00       	nop
 100:	98 c0       	rjmp	.+304    	; 0x232 <__bad_interrupt>
 102:	00 00       	nop
 104:	96 c0       	rjmp	.+300    	; 0x232 <__bad_interrupt>
 106:	00 00       	nop
 108:	94 c0       	rjmp	.+296    	; 0x232 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	92 c0       	rjmp	.+292    	; 0x232 <__bad_interrupt>
 10e:	00 00       	nop
 110:	90 c0       	rjmp	.+288    	; 0x232 <__bad_interrupt>
 112:	00 00       	nop
 114:	8e c0       	rjmp	.+284    	; 0x232 <__bad_interrupt>
 116:	00 00       	nop
 118:	8c c0       	rjmp	.+280    	; 0x232 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8a c0       	rjmp	.+276    	; 0x232 <__bad_interrupt>
 11e:	00 00       	nop
 120:	88 c0       	rjmp	.+272    	; 0x232 <__bad_interrupt>
 122:	00 00       	nop
 124:	86 c0       	rjmp	.+268    	; 0x232 <__bad_interrupt>
 126:	00 00       	nop
 128:	84 c0       	rjmp	.+264    	; 0x232 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	82 c0       	rjmp	.+260    	; 0x232 <__bad_interrupt>
 12e:	00 00       	nop
 130:	80 c0       	rjmp	.+256    	; 0x232 <__bad_interrupt>
 132:	00 00       	nop
 134:	7e c0       	rjmp	.+252    	; 0x232 <__bad_interrupt>
 136:	00 00       	nop
 138:	7c c0       	rjmp	.+248    	; 0x232 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7a c0       	rjmp	.+244    	; 0x232 <__bad_interrupt>
 13e:	00 00       	nop
 140:	78 c0       	rjmp	.+240    	; 0x232 <__bad_interrupt>
 142:	00 00       	nop
 144:	76 c0       	rjmp	.+236    	; 0x232 <__bad_interrupt>
 146:	00 00       	nop
 148:	74 c0       	rjmp	.+232    	; 0x232 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	72 c0       	rjmp	.+228    	; 0x232 <__bad_interrupt>
 14e:	00 00       	nop
 150:	70 c0       	rjmp	.+224    	; 0x232 <__bad_interrupt>
 152:	00 00       	nop
 154:	6e c0       	rjmp	.+220    	; 0x232 <__bad_interrupt>
 156:	00 00       	nop
 158:	6c c0       	rjmp	.+216    	; 0x232 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6a c0       	rjmp	.+212    	; 0x232 <__bad_interrupt>
 15e:	00 00       	nop
 160:	68 c0       	rjmp	.+208    	; 0x232 <__bad_interrupt>
 162:	00 00       	nop
 164:	66 c0       	rjmp	.+204    	; 0x232 <__bad_interrupt>
 166:	00 00       	nop
 168:	64 c0       	rjmp	.+200    	; 0x232 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	62 c0       	rjmp	.+196    	; 0x232 <__bad_interrupt>
 16e:	00 00       	nop
 170:	60 c0       	rjmp	.+192    	; 0x232 <__bad_interrupt>
 172:	00 00       	nop
 174:	5e c0       	rjmp	.+188    	; 0x232 <__bad_interrupt>
 176:	00 00       	nop
 178:	5c c0       	rjmp	.+184    	; 0x232 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5a c0       	rjmp	.+180    	; 0x232 <__bad_interrupt>
 17e:	00 00       	nop
 180:	58 c0       	rjmp	.+176    	; 0x232 <__bad_interrupt>
 182:	00 00       	nop
 184:	56 c0       	rjmp	.+172    	; 0x232 <__bad_interrupt>
 186:	00 00       	nop
 188:	54 c0       	rjmp	.+168    	; 0x232 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	52 c0       	rjmp	.+164    	; 0x232 <__bad_interrupt>
 18e:	00 00       	nop
 190:	50 c0       	rjmp	.+160    	; 0x232 <__bad_interrupt>
 192:	00 00       	nop
 194:	4e c0       	rjmp	.+156    	; 0x232 <__bad_interrupt>
 196:	00 00       	nop
 198:	4c c0       	rjmp	.+152    	; 0x232 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4a c0       	rjmp	.+148    	; 0x232 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	48 c0       	rjmp	.+144    	; 0x232 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	46 c0       	rjmp	.+140    	; 0x232 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	42 c0       	rjmp	.+132    	; 0x232 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3c c0       	rjmp	.+120    	; 0x232 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	38 c0       	rjmp	.+112    	; 0x232 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	36 c0       	rjmp	.+108    	; 0x232 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	34 c0       	rjmp	.+104    	; 0x232 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	32 c0       	rjmp	.+100    	; 0x232 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	30 c0       	rjmp	.+96     	; 0x232 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2c c0       	rjmp	.+88     	; 0x232 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2a c0       	rjmp	.+84     	; 0x232 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	28 c0       	rjmp	.+80     	; 0x232 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	22 c0       	rjmp	.+68     	; 0x232 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1e c0       	rjmp	.+60     	; 0x232 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	e2 e1       	ldi	r30, 0x12	; 18
 210:	fc e0       	ldi	r31, 0x0C	; 12
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a0 33       	cpi	r26, 0x30	; 48
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	20 e2       	ldi	r18, 0x20	; 32
 220:	a0 e3       	ldi	r26, 0x30	; 48
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	a0 34       	cpi	r26, 0x40	; 64
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	70 d2       	rcall	.+1248   	; 0x710 <main>
 230:	ee c4       	rjmp	.+2524   	; 0xc0e <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	1f 92       	push	r1
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
 23e:	80 91 34 20 	lds	r24, 0x2034
 242:	90 91 35 20 	lds	r25, 0x2035
 246:	e0 91 30 20 	lds	r30, 0x2030
 24a:	f0 91 31 20 	lds	r31, 0x2031
 24e:	be 01       	movw	r22, r28
 250:	6f 5f       	subi	r22, 0xFF	; 255
 252:	7f 4f       	sbci	r23, 0xFF	; 255
 254:	09 95       	icall
	return c;
 256:	89 81       	ldd	r24, Y+1	; 0x01
}
 258:	99 27       	eor	r25, r25
 25a:	87 fd       	sbrc	r24, 7
 25c:	90 95       	com	r25
 25e:	0f 90       	pop	r0
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
 266:	fc 01       	movw	r30, r24
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	85 ff       	sbrs	r24, 5
 26c:	fd cf       	rjmp	.-6      	; 0x268 <usart_putchar+0x2>
 26e:	60 83       	st	Z, r22
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	08 95       	ret

00000276 <usart_getchar>:
 276:	fc 01       	movw	r30, r24
 278:	81 81       	ldd	r24, Z+1	; 0x01
 27a:	88 23       	and	r24, r24
 27c:	ec f7       	brge	.-6      	; 0x278 <usart_getchar+0x2>
 27e:	80 81       	ld	r24, Z
 280:	08 95       	ret

00000282 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 282:	4f 92       	push	r4
 284:	5f 92       	push	r5
 286:	6f 92       	push	r6
 288:	7f 92       	push	r7
 28a:	8f 92       	push	r8
 28c:	9f 92       	push	r9
 28e:	af 92       	push	r10
 290:	bf 92       	push	r11
 292:	cf 92       	push	r12
 294:	df 92       	push	r13
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
 2a4:	4a 01       	movw	r8, r20
 2a6:	5b 01       	movw	r10, r22
 2a8:	28 01       	movw	r4, r16
 2aa:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
 2ac:	d9 01       	movw	r26, r18
 2ae:	c8 01       	movw	r24, r16
 2b0:	68 94       	set
 2b2:	12 f8       	bld	r1, 2
 2b4:	b6 95       	lsr	r27
 2b6:	a7 95       	ror	r26
 2b8:	97 95       	ror	r25
 2ba:	87 95       	ror	r24
 2bc:	16 94       	lsr	r1
 2be:	d1 f7       	brne	.-12     	; 0x2b4 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
 2c0:	b9 01       	movw	r22, r18
 2c2:	a8 01       	movw	r20, r16
 2c4:	03 2e       	mov	r0, r19
 2c6:	36 e1       	ldi	r19, 0x16	; 22
 2c8:	76 95       	lsr	r23
 2ca:	67 95       	ror	r22
 2cc:	57 95       	ror	r21
 2ce:	47 95       	ror	r20
 2d0:	3a 95       	dec	r19
 2d2:	d1 f7       	brne	.-12     	; 0x2c8 <usart_set_baudrate+0x46>
 2d4:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 2d6:	2c 81       	ldd	r18, Y+4	; 0x04
 2d8:	22 fd       	sbrc	r18, 2
 2da:	08 c0       	rjmp	.+16     	; 0x2ec <usart_set_baudrate+0x6a>
		max_rate /= 2;
 2dc:	b6 95       	lsr	r27
 2de:	a7 95       	ror	r26
 2e0:	97 95       	ror	r25
 2e2:	87 95       	ror	r24
		min_rate /= 2;
 2e4:	76 95       	lsr	r23
 2e6:	67 95       	ror	r22
 2e8:	57 95       	ror	r21
 2ea:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 2ec:	88 15       	cp	r24, r8
 2ee:	99 05       	cpc	r25, r9
 2f0:	aa 05       	cpc	r26, r10
 2f2:	bb 05       	cpc	r27, r11
 2f4:	08 f4       	brcc	.+2      	; 0x2f8 <usart_set_baudrate+0x76>
 2f6:	a2 c0       	rjmp	.+324    	; 0x43c <usart_set_baudrate+0x1ba>
 2f8:	84 16       	cp	r8, r20
 2fa:	95 06       	cpc	r9, r21
 2fc:	a6 06       	cpc	r10, r22
 2fe:	b7 06       	cpc	r11, r23
 300:	08 f4       	brcc	.+2      	; 0x304 <usart_set_baudrate+0x82>
 302:	9e c0       	rjmp	.+316    	; 0x440 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 304:	8c 81       	ldd	r24, Y+4	; 0x04
 306:	82 fd       	sbrc	r24, 2
 308:	04 c0       	rjmp	.+8      	; 0x312 <usart_set_baudrate+0x90>
		baud *= 2;
 30a:	88 0c       	add	r8, r8
 30c:	99 1c       	adc	r9, r9
 30e:	aa 1c       	adc	r10, r10
 310:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 312:	c3 01       	movw	r24, r6
 314:	b2 01       	movw	r22, r4
 316:	a5 01       	movw	r20, r10
 318:	94 01       	movw	r18, r8
 31a:	5a d2       	rcall	.+1204   	; 0x7d0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
 31c:	2f 3f       	cpi	r18, 0xFF	; 255
 31e:	31 05       	cpc	r19, r1
 320:	41 05       	cpc	r20, r1
 322:	51 05       	cpc	r21, r1
 324:	08 f4       	brcc	.+2      	; 0x328 <usart_set_baudrate+0xa6>
 326:	8e c0       	rjmp	.+284    	; 0x444 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
 328:	c1 2c       	mov	r12, r1
 32a:	d1 2c       	mov	r13, r1
 32c:	76 01       	movw	r14, r12
 32e:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 330:	19 ef       	ldi	r17, 0xF9	; 249
 332:	05 c0       	rjmp	.+10     	; 0x33e <usart_set_baudrate+0xbc>
		if (ratio < limit) {
 334:	2c 15       	cp	r18, r12
 336:	3d 05       	cpc	r19, r13
 338:	4e 05       	cpc	r20, r14
 33a:	5f 05       	cpc	r21, r15
 33c:	68 f0       	brcs	.+26     	; 0x358 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
 33e:	cc 0c       	add	r12, r12
 340:	dd 1c       	adc	r13, r13
 342:	ee 1c       	adc	r14, r14
 344:	ff 1c       	adc	r15, r15

		if (exp < -3) {
 346:	1d 3f       	cpi	r17, 0xFD	; 253
 348:	14 f4       	brge	.+4      	; 0x34e <usart_set_baudrate+0xcc>
			limit |= 1;
 34a:	68 94       	set
 34c:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 34e:	1f 5f       	subi	r17, 0xFF	; 255
 350:	17 30       	cpi	r17, 0x07	; 7
 352:	81 f7       	brne	.-32     	; 0x334 <usart_set_baudrate+0xb2>
 354:	21 2f       	mov	r18, r17
 356:	4e c0       	rjmp	.+156    	; 0x3f4 <usart_set_baudrate+0x172>
 358:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
 35a:	11 23       	and	r17, r17
 35c:	0c f0       	brlt	.+2      	; 0x360 <usart_set_baudrate+0xde>
 35e:	4a c0       	rjmp	.+148    	; 0x3f4 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 360:	d5 01       	movw	r26, r10
 362:	c4 01       	movw	r24, r8
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	aa 1f       	adc	r26, r26
 36a:	bb 1f       	adc	r27, r27
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	aa 1f       	adc	r26, r26
 372:	bb 1f       	adc	r27, r27
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	aa 1f       	adc	r26, r26
 37a:	bb 1f       	adc	r27, r27
 37c:	48 1a       	sub	r4, r24
 37e:	59 0a       	sbc	r5, r25
 380:	6a 0a       	sbc	r6, r26
 382:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
 384:	1e 3f       	cpi	r17, 0xFE	; 254
 386:	ec f4       	brge	.+58     	; 0x3c2 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 388:	6d ef       	ldi	r22, 0xFD	; 253
 38a:	7f ef       	ldi	r23, 0xFF	; 255
 38c:	61 1b       	sub	r22, r17
 38e:	71 09       	sbc	r23, r1
 390:	17 fd       	sbrc	r17, 7
 392:	73 95       	inc	r23
 394:	04 c0       	rjmp	.+8      	; 0x39e <usart_set_baudrate+0x11c>
 396:	44 0c       	add	r4, r4
 398:	55 1c       	adc	r5, r5
 39a:	66 1c       	adc	r6, r6
 39c:	77 1c       	adc	r7, r7
 39e:	6a 95       	dec	r22
 3a0:	d2 f7       	brpl	.-12     	; 0x396 <usart_set_baudrate+0x114>
 3a2:	d5 01       	movw	r26, r10
 3a4:	c4 01       	movw	r24, r8
 3a6:	b6 95       	lsr	r27
 3a8:	a7 95       	ror	r26
 3aa:	97 95       	ror	r25
 3ac:	87 95       	ror	r24
 3ae:	bc 01       	movw	r22, r24
 3b0:	cd 01       	movw	r24, r26
 3b2:	64 0d       	add	r22, r4
 3b4:	75 1d       	adc	r23, r5
 3b6:	86 1d       	adc	r24, r6
 3b8:	97 1d       	adc	r25, r7
 3ba:	a5 01       	movw	r20, r10
 3bc:	94 01       	movw	r18, r8
 3be:	08 d2       	rcall	.+1040   	; 0x7d0 <__udivmodsi4>
 3c0:	34 c0       	rjmp	.+104    	; 0x42a <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
 3c2:	23 e0       	ldi	r18, 0x03	; 3
 3c4:	21 0f       	add	r18, r17
 3c6:	d5 01       	movw	r26, r10
 3c8:	c4 01       	movw	r24, r8
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <usart_set_baudrate+0x152>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	aa 1f       	adc	r26, r26
 3d2:	bb 1f       	adc	r27, r27
 3d4:	2a 95       	dec	r18
 3d6:	d2 f7       	brpl	.-12     	; 0x3cc <usart_set_baudrate+0x14a>
 3d8:	9c 01       	movw	r18, r24
 3da:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
 3dc:	b6 95       	lsr	r27
 3de:	a7 95       	ror	r26
 3e0:	97 95       	ror	r25
 3e2:	87 95       	ror	r24
 3e4:	bc 01       	movw	r22, r24
 3e6:	cd 01       	movw	r24, r26
 3e8:	64 0d       	add	r22, r4
 3ea:	75 1d       	adc	r23, r5
 3ec:	86 1d       	adc	r24, r6
 3ee:	97 1d       	adc	r25, r7
 3f0:	ef d1       	rcall	.+990    	; 0x7d0 <__udivmodsi4>
 3f2:	1b c0       	rjmp	.+54     	; 0x42a <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
 3f4:	2d 5f       	subi	r18, 0xFD	; 253
 3f6:	d5 01       	movw	r26, r10
 3f8:	c4 01       	movw	r24, r8
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <usart_set_baudrate+0x182>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	aa 1f       	adc	r26, r26
 402:	bb 1f       	adc	r27, r27
 404:	2a 95       	dec	r18
 406:	d2 f7       	brpl	.-12     	; 0x3fc <usart_set_baudrate+0x17a>
 408:	9c 01       	movw	r18, r24
 40a:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
 40c:	b6 95       	lsr	r27
 40e:	a7 95       	ror	r26
 410:	97 95       	ror	r25
 412:	87 95       	ror	r24
 414:	bc 01       	movw	r22, r24
 416:	cd 01       	movw	r24, r26
 418:	64 0d       	add	r22, r4
 41a:	75 1d       	adc	r23, r5
 41c:	86 1d       	adc	r24, r6
 41e:	97 1d       	adc	r25, r7
 420:	d7 d1       	rcall	.+942    	; 0x7d0 <__udivmodsi4>
 422:	21 50       	subi	r18, 0x01	; 1
 424:	31 09       	sbc	r19, r1
 426:	41 09       	sbc	r20, r1
 428:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 42a:	83 2f       	mov	r24, r19
 42c:	8f 70       	andi	r24, 0x0F	; 15
 42e:	12 95       	swap	r17
 430:	10 7f       	andi	r17, 0xF0	; 240
 432:	18 2b       	or	r17, r24
 434:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
 436:	2e 83       	std	Y+6, r18	; 0x06

	return true;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	18 c0       	rjmp	.+48     	; 0x46c <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	16 c0       	rjmp	.+44     	; 0x46c <usart_set_baudrate+0x1ea>
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	14 c0       	rjmp	.+40     	; 0x46c <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 444:	d5 01       	movw	r26, r10
 446:	c4 01       	movw	r24, r8
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	aa 1f       	adc	r26, r26
 44e:	bb 1f       	adc	r27, r27
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	aa 1f       	adc	r26, r26
 456:	bb 1f       	adc	r27, r27
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	aa 1f       	adc	r26, r26
 45e:	bb 1f       	adc	r27, r27
 460:	48 1a       	sub	r4, r24
 462:	59 0a       	sbc	r5, r25
 464:	6a 0a       	sbc	r6, r26
 466:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 468:	19 ef       	ldi	r17, 0xF9	; 249
 46a:	8e cf       	rjmp	.-228    	; 0x388 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	ff 90       	pop	r15
 476:	ef 90       	pop	r14
 478:	df 90       	pop	r13
 47a:	cf 90       	pop	r12
 47c:	bf 90       	pop	r11
 47e:	af 90       	pop	r10
 480:	9f 90       	pop	r9
 482:	8f 90       	pop	r8
 484:	7f 90       	pop	r7
 486:	6f 90       	pop	r6
 488:	5f 90       	pop	r5
 48a:	4f 90       	pop	r4
 48c:	08 95       	ret

0000048e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	ec 01       	movw	r28, r24
 498:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	09 f4       	brne	.+2      	; 0x4a0 <usart_init_rs232+0x12>
 49e:	be c0       	rjmp	.+380    	; 0x61c <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 4a0:	80 3c       	cpi	r24, 0xC0	; 192
 4a2:	91 05       	cpc	r25, r1
 4a4:	21 f4       	brne	.+8      	; 0x4ae <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 4a6:	60 e1       	ldi	r22, 0x10	; 16
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	16 d1       	rcall	.+556    	; 0x6d8 <sysclk_enable_module>
 4ac:	b7 c0       	rjmp	.+366    	; 0x61c <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
 4ae:	c1 15       	cp	r28, r1
 4b0:	84 e0       	ldi	r24, 0x04	; 4
 4b2:	d8 07       	cpc	r29, r24
 4b4:	21 f4       	brne	.+8      	; 0x4be <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 4b6:	64 e0       	ldi	r22, 0x04	; 4
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e d1       	rcall	.+540    	; 0x6d8 <sysclk_enable_module>
 4bc:	af c0       	rjmp	.+350    	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 4be:	c0 38       	cpi	r28, 0x80	; 128
 4c0:	e1 e0       	ldi	r30, 0x01	; 1
 4c2:	de 07       	cpc	r29, r30
 4c4:	21 f4       	brne	.+8      	; 0x4ce <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 4c6:	62 e0       	ldi	r22, 0x02	; 2
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	06 d1       	rcall	.+524    	; 0x6d8 <sysclk_enable_module>
 4cc:	a7 c0       	rjmp	.+334    	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 4ce:	c1 15       	cp	r28, r1
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	df 07       	cpc	r29, r31
 4d4:	21 f4       	brne	.+8      	; 0x4de <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	fe d0       	rcall	.+508    	; 0x6d8 <sysclk_enable_module>
 4dc:	9f c0       	rjmp	.+318    	; 0x61c <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 4de:	c0 38       	cpi	r28, 0x80	; 128
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	d8 07       	cpc	r29, r24
 4e4:	21 f4       	brne	.+8      	; 0x4ee <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	f6 d0       	rcall	.+492    	; 0x6d8 <sysclk_enable_module>
 4ec:	97 c0       	rjmp	.+302    	; 0x61c <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 4ee:	c1 15       	cp	r28, r1
 4f0:	e2 e0       	ldi	r30, 0x02	; 2
 4f2:	de 07       	cpc	r29, r30
 4f4:	21 f4       	brne	.+8      	; 0x4fe <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 4f6:	62 e0       	ldi	r22, 0x02	; 2
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	ee d0       	rcall	.+476    	; 0x6d8 <sysclk_enable_module>
 4fc:	8f c0       	rjmp	.+286    	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 4fe:	c0 32       	cpi	r28, 0x20	; 32
 500:	f3 e0       	ldi	r31, 0x03	; 3
 502:	df 07       	cpc	r29, r31
 504:	21 f4       	brne	.+8      	; 0x50e <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 506:	64 e0       	ldi	r22, 0x04	; 4
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	e6 d0       	rcall	.+460    	; 0x6d8 <sysclk_enable_module>
 50c:	87 c0       	rjmp	.+270    	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 50e:	c1 15       	cp	r28, r1
 510:	88 e0       	ldi	r24, 0x08	; 8
 512:	d8 07       	cpc	r29, r24
 514:	21 f4       	brne	.+8      	; 0x51e <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	83 e0       	ldi	r24, 0x03	; 3
 51a:	de d0       	rcall	.+444    	; 0x6d8 <sysclk_enable_module>
 51c:	7f c0       	rjmp	.+254    	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 51e:	c1 15       	cp	r28, r1
 520:	e9 e0       	ldi	r30, 0x09	; 9
 522:	de 07       	cpc	r29, r30
 524:	21 f4       	brne	.+8      	; 0x52e <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	84 e0       	ldi	r24, 0x04	; 4
 52a:	d6 d0       	rcall	.+428    	; 0x6d8 <sysclk_enable_module>
 52c:	77 c0       	rjmp	.+238    	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 52e:	c1 15       	cp	r28, r1
 530:	fa e0       	ldi	r31, 0x0A	; 10
 532:	df 07       	cpc	r29, r31
 534:	21 f4       	brne	.+8      	; 0x53e <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	85 e0       	ldi	r24, 0x05	; 5
 53a:	ce d0       	rcall	.+412    	; 0x6d8 <sysclk_enable_module>
 53c:	6f c0       	rjmp	.+222    	; 0x61c <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 53e:	c0 34       	cpi	r28, 0x40	; 64
 540:	88 e0       	ldi	r24, 0x08	; 8
 542:	d8 07       	cpc	r29, r24
 544:	21 f4       	brne	.+8      	; 0x54e <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 546:	62 e0       	ldi	r22, 0x02	; 2
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	c6 d0       	rcall	.+396    	; 0x6d8 <sysclk_enable_module>
 54c:	67 c0       	rjmp	.+206    	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 54e:	c0 34       	cpi	r28, 0x40	; 64
 550:	e9 e0       	ldi	r30, 0x09	; 9
 552:	de 07       	cpc	r29, r30
 554:	21 f4       	brne	.+8      	; 0x55e <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 556:	62 e0       	ldi	r22, 0x02	; 2
 558:	84 e0       	ldi	r24, 0x04	; 4
 55a:	be d0       	rcall	.+380    	; 0x6d8 <sysclk_enable_module>
 55c:	5f c0       	rjmp	.+190    	; 0x61c <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 55e:	c0 39       	cpi	r28, 0x90	; 144
 560:	f8 e0       	ldi	r31, 0x08	; 8
 562:	df 07       	cpc	r29, r31
 564:	21 f4       	brne	.+8      	; 0x56e <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 566:	64 e0       	ldi	r22, 0x04	; 4
 568:	83 e0       	ldi	r24, 0x03	; 3
 56a:	b6 d0       	rcall	.+364    	; 0x6d8 <sysclk_enable_module>
 56c:	57 c0       	rjmp	.+174    	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 56e:	c0 39       	cpi	r28, 0x90	; 144
 570:	89 e0       	ldi	r24, 0x09	; 9
 572:	d8 07       	cpc	r29, r24
 574:	21 f4       	brne	.+8      	; 0x57e <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 576:	64 e0       	ldi	r22, 0x04	; 4
 578:	84 e0       	ldi	r24, 0x04	; 4
 57a:	ae d0       	rcall	.+348    	; 0x6d8 <sysclk_enable_module>
 57c:	4f c0       	rjmp	.+158    	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 57e:	c0 39       	cpi	r28, 0x90	; 144
 580:	ea e0       	ldi	r30, 0x0A	; 10
 582:	de 07       	cpc	r29, r30
 584:	21 f4       	brne	.+8      	; 0x58e <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 586:	64 e0       	ldi	r22, 0x04	; 4
 588:	85 e0       	ldi	r24, 0x05	; 5
 58a:	a6 d0       	rcall	.+332    	; 0x6d8 <sysclk_enable_module>
 58c:	47 c0       	rjmp	.+142    	; 0x61c <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 58e:	c0 3c       	cpi	r28, 0xC0	; 192
 590:	f8 e0       	ldi	r31, 0x08	; 8
 592:	df 07       	cpc	r29, r31
 594:	21 f4       	brne	.+8      	; 0x59e <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 596:	68 e0       	ldi	r22, 0x08	; 8
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	9e d0       	rcall	.+316    	; 0x6d8 <sysclk_enable_module>
 59c:	3f c0       	rjmp	.+126    	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 59e:	c0 3c       	cpi	r28, 0xC0	; 192
 5a0:	89 e0       	ldi	r24, 0x09	; 9
 5a2:	d8 07       	cpc	r29, r24
 5a4:	21 f4       	brne	.+8      	; 0x5ae <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 5a6:	68 e0       	ldi	r22, 0x08	; 8
 5a8:	84 e0       	ldi	r24, 0x04	; 4
 5aa:	96 d0       	rcall	.+300    	; 0x6d8 <sysclk_enable_module>
 5ac:	37 c0       	rjmp	.+110    	; 0x61c <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 5ae:	c0 3a       	cpi	r28, 0xA0	; 160
 5b0:	e8 e0       	ldi	r30, 0x08	; 8
 5b2:	de 07       	cpc	r29, r30
 5b4:	21 f4       	brne	.+8      	; 0x5be <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 5b6:	60 e1       	ldi	r22, 0x10	; 16
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	8e d0       	rcall	.+284    	; 0x6d8 <sysclk_enable_module>
 5bc:	2f c0       	rjmp	.+94     	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 5be:	c0 3a       	cpi	r28, 0xA0	; 160
 5c0:	f9 e0       	ldi	r31, 0x09	; 9
 5c2:	df 07       	cpc	r29, r31
 5c4:	21 f4       	brne	.+8      	; 0x5ce <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 5c6:	60 e1       	ldi	r22, 0x10	; 16
 5c8:	84 e0       	ldi	r24, 0x04	; 4
 5ca:	86 d0       	rcall	.+268    	; 0x6d8 <sysclk_enable_module>
 5cc:	27 c0       	rjmp	.+78     	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 5ce:	c0 3a       	cpi	r28, 0xA0	; 160
 5d0:	8a e0       	ldi	r24, 0x0A	; 10
 5d2:	d8 07       	cpc	r29, r24
 5d4:	21 f4       	brne	.+8      	; 0x5de <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 5d6:	60 e1       	ldi	r22, 0x10	; 16
 5d8:	85 e0       	ldi	r24, 0x05	; 5
 5da:	7e d0       	rcall	.+252    	; 0x6d8 <sysclk_enable_module>
 5dc:	1f c0       	rjmp	.+62     	; 0x61c <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 5de:	c0 3b       	cpi	r28, 0xB0	; 176
 5e0:	e8 e0       	ldi	r30, 0x08	; 8
 5e2:	de 07       	cpc	r29, r30
 5e4:	21 f4       	brne	.+8      	; 0x5ee <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 5e6:	60 e2       	ldi	r22, 0x20	; 32
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	76 d0       	rcall	.+236    	; 0x6d8 <sysclk_enable_module>
 5ec:	17 c0       	rjmp	.+46     	; 0x61c <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 5ee:	c0 3b       	cpi	r28, 0xB0	; 176
 5f0:	f9 e0       	ldi	r31, 0x09	; 9
 5f2:	df 07       	cpc	r29, r31
 5f4:	21 f4       	brne	.+8      	; 0x5fe <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 5f6:	60 e2       	ldi	r22, 0x20	; 32
 5f8:	84 e0       	ldi	r24, 0x04	; 4
 5fa:	6e d0       	rcall	.+220    	; 0x6d8 <sysclk_enable_module>
 5fc:	0f c0       	rjmp	.+30     	; 0x61c <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 5fe:	c0 38       	cpi	r28, 0x80	; 128
 600:	84 e0       	ldi	r24, 0x04	; 4
 602:	d8 07       	cpc	r29, r24
 604:	21 f4       	brne	.+8      	; 0x60e <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 606:	60 e4       	ldi	r22, 0x40	; 64
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	66 d0       	rcall	.+204    	; 0x6d8 <sysclk_enable_module>
 60c:	07 c0       	rjmp	.+14     	; 0x61c <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 60e:	c0 3a       	cpi	r28, 0xA0	; 160
 610:	e4 e0       	ldi	r30, 0x04	; 4
 612:	de 07       	cpc	r29, r30
 614:	19 f4       	brne	.+6      	; 0x61c <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 616:	60 e4       	ldi	r22, 0x40	; 64
 618:	85 e0       	ldi	r24, 0x05	; 5
 61a:	5e d0       	rcall	.+188    	; 0x6d8 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 61c:	8d 81       	ldd	r24, Y+5	; 0x05
 61e:	8f 73       	andi	r24, 0x3F	; 63
 620:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
 622:	f8 01       	movw	r30, r16
 624:	94 81       	ldd	r25, Z+4	; 0x04
 626:	85 81       	ldd	r24, Z+5	; 0x05
 628:	89 2b       	or	r24, r25
 62a:	96 81       	ldd	r25, Z+6	; 0x06
 62c:	99 23       	and	r25, r25
 62e:	11 f0       	breq	.+4      	; 0x634 <usart_init_rs232+0x1a6>
 630:	98 e0       	ldi	r25, 0x08	; 8
 632:	01 c0       	rjmp	.+2      	; 0x636 <usart_init_rs232+0x1a8>
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	89 2b       	or	r24, r25
 638:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 63a:	f8 01       	movw	r30, r16
 63c:	40 81       	ld	r20, Z
 63e:	51 81       	ldd	r21, Z+1	; 0x01
 640:	62 81       	ldd	r22, Z+2	; 0x02
 642:	73 81       	ldd	r23, Z+3	; 0x03
 644:	00 e0       	ldi	r16, 0x00	; 0
 646:	18 e4       	ldi	r17, 0x48	; 72
 648:	28 ee       	ldi	r18, 0xE8	; 232
 64a:	31 e0       	ldi	r19, 0x01	; 1
 64c:	ce 01       	movw	r24, r28
 64e:	19 de       	rcall	.-974    	; 0x282 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 650:	9c 81       	ldd	r25, Y+4	; 0x04
 652:	98 60       	ori	r25, 0x08	; 8
 654:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 656:	9c 81       	ldd	r25, Y+4	; 0x04
 658:	90 61       	ori	r25, 0x10	; 16
 65a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	08 95       	ret

00000666 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
 666:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
 668:	80 91 34 20 	lds	r24, 0x2034
 66c:	90 91 35 20 	lds	r25, 0x2035
 670:	e0 91 32 20 	lds	r30, 0x2032
 674:	f0 91 33 20 	lds	r31, 0x2033
 678:	09 95       	icall
 67a:	99 23       	and	r25, r25
 67c:	1c f4       	brge	.+6      	; 0x684 <_write+0x1e>
		return -1;
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	9f ef       	ldi	r25, 0xFF	; 255
 682:	08 95       	ret
	}
	return 1;
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
}
 688:	08 95       	ret

0000068a <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	80 93 70 00 	sts	0x0070, r24
 690:	80 93 71 00 	sts	0x0071, r24
 694:	80 93 72 00 	sts	0x0072, r24
 698:	80 93 73 00 	sts	0x0073, r24
 69c:	80 93 74 00 	sts	0x0074, r24
 6a0:	80 93 75 00 	sts	0x0075, r24
 6a4:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 6a8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 6aa:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 6ac:	e0 e5       	ldi	r30, 0x50	; 80
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	90 81       	ld	r25, Z
 6b2:	92 60       	ori	r25, 0x02	; 2
 6b4:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 6b6:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 6b8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 6ba:	81 ff       	sbrs	r24, 1
 6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 6be:	61 e0       	ldi	r22, 0x01	; 1
 6c0:	80 e4       	ldi	r24, 0x40	; 64
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	15 d0       	rcall	.+42     	; 0x6f0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 6c6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 6c8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 6ca:	e0 e5       	ldi	r30, 0x50	; 80
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	90 81       	ld	r25, Z
 6d0:	9e 7f       	andi	r25, 0xFE	; 254
 6d2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 6d4:	8f bf       	out	0x3f, r24	; 63
 6d6:	08 95       	ret

000006d8 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 6d8:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 6da:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 6dc:	e8 2f       	mov	r30, r24
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	e0 59       	subi	r30, 0x90	; 144
 6e2:	ff 4f       	sbci	r31, 0xFF	; 255
 6e4:	60 95       	com	r22
 6e6:	80 81       	ld	r24, Z
 6e8:	68 23       	and	r22, r24
 6ea:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 6ec:	9f bf       	out	0x3f, r25	; 63
 6ee:	08 95       	ret

000006f0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 6f0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 6f2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 6f4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 6f6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 6f8:	60 83       	st	Z, r22
	ret                             // Return to caller
 6fa:	08 95       	ret

000006fc <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
 702:	b9 dd       	rcall	.-1166   	; 0x276 <usart_getchar>
 704:	88 83       	st	Y, r24
}
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
 70c:	ac cd       	rjmp	.-1192   	; 0x266 <usart_putchar>
}
 70e:	08 95       	ret

00000710 <main>:
#include <asf.h>

#define UART_TXPIN IOPORT_CREATE_PIN(PORTD, 2)

int main (void) {
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	27 97       	sbiw	r28, 0x07	; 7
 71a:	cd bf       	out	0x3d, r28	; 61
 71c:	de bf       	out	0x3e, r29	; 62

	sysclk_init();	
 71e:	b5 df       	rcall	.-150    	; 0x68a <sysclk_init>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
 720:	80 ea       	ldi	r24, 0xA0	; 160
 722:	9a e0       	ldi	r25, 0x0A	; 10
 724:	80 93 34 20 	sts	0x2034, r24
 728:	90 93 35 20 	sts	0x2035, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
 72c:	86 e8       	ldi	r24, 0x86	; 134
 72e:	93 e0       	ldi	r25, 0x03	; 3
 730:	80 93 32 20 	sts	0x2032, r24
 734:	90 93 33 20 	sts	0x2033, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
 738:	8e e7       	ldi	r24, 0x7E	; 126
 73a:	93 e0       	ldi	r25, 0x03	; 3
 73c:	80 93 30 20 	sts	0x2030, r24
 740:	90 93 31 20 	sts	0x2031, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
 744:	80 91 0a 20 	lds	r24, 0x200A
 748:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
 74a:	80 91 0b 20 	lds	r24, 0x200B
 74e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
 750:	80 91 0c 20 	lds	r24, 0x200C
 754:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
 756:	80 91 06 20 	lds	r24, 0x2006
 75a:	90 91 07 20 	lds	r25, 0x2007
 75e:	a0 91 08 20 	lds	r26, 0x2008
 762:	b0 91 09 20 	lds	r27, 0x2009
 766:	89 83       	std	Y+1, r24	; 0x01
 768:	9a 83       	std	Y+2, r25	; 0x02
 76a:	ab 83       	std	Y+3, r26	; 0x03
 76c:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
 76e:	60 e1       	ldi	r22, 0x10	; 16
 770:	85 e0       	ldi	r24, 0x05	; 5
 772:	b2 df       	rcall	.-156    	; 0x6d8 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
 774:	be 01       	movw	r22, r28
 776:	6f 5f       	subi	r22, 0xFF	; 255
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	80 ea       	ldi	r24, 0xA0	; 160
 77c:	9a e0       	ldi	r25, 0x0A	; 10
 77e:	87 de       	rcall	.-754    	; 0x48e <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
 780:	6a e1       	ldi	r22, 0x1A	; 26
 782:	71 e0       	ldi	r23, 0x01	; 1
 784:	83 e3       	ldi	r24, 0x33	; 51
 786:	93 e0       	ldi	r25, 0x03	; 3
 788:	45 d0       	rcall	.+138    	; 0x814 <fdevopen>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
 78a:	84 e0       	ldi	r24, 0x04	; 4
 78c:	e0 e6       	ldi	r30, 0x60	; 96
 78e:	f6 e0       	ldi	r31, 0x06	; 6
 790:	81 83       	std	Z+1, r24	; 0x01
	
	unsigned int c = 0;
	while(1) {
		
		//scanf("%s",ch);
		c = getchar();
 792:	06 e3       	ldi	r16, 0x36	; 54
 794:	10 e2       	ldi	r17, 0x20	; 32
 796:	f8 01       	movw	r30, r16
 798:	80 81       	ld	r24, Z
 79a:	91 81       	ldd	r25, Z+1	; 0x01
 79c:	85 d0       	rcall	.+266    	; 0x8a8 <fgetc>
		
		if (c == 'b'){
 79e:	82 36       	cpi	r24, 0x62	; 98
 7a0:	91 05       	cpc	r25, r1
 7a2:	21 f4       	brne	.+8      	; 0x7ac <main+0x9c>
			printf("Binary\n");
 7a4:	8d e0       	ldi	r24, 0x0D	; 13
 7a6:	90 e2       	ldi	r25, 0x20	; 32
 7a8:	bd d0       	rcall	.+378    	; 0x924 <puts>
 7aa:	f5 cf       	rjmp	.-22     	; 0x796 <main+0x86>
		} 
		else if(c == 'v'){
 7ac:	86 37       	cpi	r24, 0x76	; 118
 7ae:	91 05       	cpc	r25, r1
 7b0:	21 f4       	brne	.+8      	; 0x7ba <main+0xaa>
			printf("Voltage\n");
 7b2:	84 e1       	ldi	r24, 0x14	; 20
 7b4:	90 e2       	ldi	r25, 0x20	; 32
 7b6:	b6 d0       	rcall	.+364    	; 0x924 <puts>
 7b8:	ee cf       	rjmp	.-36     	; 0x796 <main+0x86>
		}
		else if(c == 't'){
 7ba:	84 37       	cpi	r24, 0x74	; 116
 7bc:	91 05       	cpc	r25, r1
 7be:	21 f4       	brne	.+8      	; 0x7c8 <main+0xb8>
			printf("Temperature\n");
 7c0:	8c e1       	ldi	r24, 0x1C	; 28
 7c2:	90 e2       	ldi	r25, 0x20	; 32
 7c4:	af d0       	rcall	.+350    	; 0x924 <puts>
 7c6:	e7 cf       	rjmp	.-50     	; 0x796 <main+0x86>
		}
		else
		printf("Nothing\n");
 7c8:	88 e2       	ldi	r24, 0x28	; 40
 7ca:	90 e2       	ldi	r25, 0x20	; 32
 7cc:	ab d0       	rcall	.+342    	; 0x924 <puts>
 7ce:	e3 cf       	rjmp	.-58     	; 0x796 <main+0x86>

000007d0 <__udivmodsi4>:
 7d0:	a1 e2       	ldi	r26, 0x21	; 33
 7d2:	1a 2e       	mov	r1, r26
 7d4:	aa 1b       	sub	r26, r26
 7d6:	bb 1b       	sub	r27, r27
 7d8:	fd 01       	movw	r30, r26
 7da:	0d c0       	rjmp	.+26     	; 0x7f6 <__udivmodsi4_ep>

000007dc <__udivmodsi4_loop>:
 7dc:	aa 1f       	adc	r26, r26
 7de:	bb 1f       	adc	r27, r27
 7e0:	ee 1f       	adc	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	a2 17       	cp	r26, r18
 7e6:	b3 07       	cpc	r27, r19
 7e8:	e4 07       	cpc	r30, r20
 7ea:	f5 07       	cpc	r31, r21
 7ec:	20 f0       	brcs	.+8      	; 0x7f6 <__udivmodsi4_ep>
 7ee:	a2 1b       	sub	r26, r18
 7f0:	b3 0b       	sbc	r27, r19
 7f2:	e4 0b       	sbc	r30, r20
 7f4:	f5 0b       	sbc	r31, r21

000007f6 <__udivmodsi4_ep>:
 7f6:	66 1f       	adc	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	1a 94       	dec	r1
 800:	69 f7       	brne	.-38     	; 0x7dc <__udivmodsi4_loop>
 802:	60 95       	com	r22
 804:	70 95       	com	r23
 806:	80 95       	com	r24
 808:	90 95       	com	r25
 80a:	9b 01       	movw	r18, r22
 80c:	ac 01       	movw	r20, r24
 80e:	bd 01       	movw	r22, r26
 810:	cf 01       	movw	r24, r30
 812:	08 95       	ret

00000814 <fdevopen>:
 814:	0f 93       	push	r16
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	ec 01       	movw	r28, r24
 81e:	8b 01       	movw	r16, r22
 820:	00 97       	sbiw	r24, 0x00	; 0
 822:	31 f4       	brne	.+12     	; 0x830 <fdevopen+0x1c>
 824:	61 15       	cp	r22, r1
 826:	71 05       	cpc	r23, r1
 828:	19 f4       	brne	.+6      	; 0x830 <fdevopen+0x1c>
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	37 c0       	rjmp	.+110    	; 0x89e <fdevopen+0x8a>
 830:	6e e0       	ldi	r22, 0x0E	; 14
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	a2 d0       	rcall	.+324    	; 0x97e <calloc>
 83a:	fc 01       	movw	r30, r24
 83c:	00 97       	sbiw	r24, 0x00	; 0
 83e:	a9 f3       	breq	.-22     	; 0x82a <fdevopen+0x16>
 840:	80 e8       	ldi	r24, 0x80	; 128
 842:	83 83       	std	Z+3, r24	; 0x03
 844:	01 15       	cp	r16, r1
 846:	11 05       	cpc	r17, r1
 848:	71 f0       	breq	.+28     	; 0x866 <fdevopen+0x52>
 84a:	02 87       	std	Z+10, r16	; 0x0a
 84c:	13 87       	std	Z+11, r17	; 0x0b
 84e:	81 e8       	ldi	r24, 0x81	; 129
 850:	83 83       	std	Z+3, r24	; 0x03
 852:	80 91 36 20 	lds	r24, 0x2036
 856:	90 91 37 20 	lds	r25, 0x2037
 85a:	89 2b       	or	r24, r25
 85c:	21 f4       	brne	.+8      	; 0x866 <fdevopen+0x52>
 85e:	e0 93 36 20 	sts	0x2036, r30
 862:	f0 93 37 20 	sts	0x2037, r31
 866:	20 97       	sbiw	r28, 0x00	; 0
 868:	c9 f0       	breq	.+50     	; 0x89c <fdevopen+0x88>
 86a:	c0 87       	std	Z+8, r28	; 0x08
 86c:	d1 87       	std	Z+9, r29	; 0x09
 86e:	83 81       	ldd	r24, Z+3	; 0x03
 870:	82 60       	ori	r24, 0x02	; 2
 872:	83 83       	std	Z+3, r24	; 0x03
 874:	80 91 38 20 	lds	r24, 0x2038
 878:	90 91 39 20 	lds	r25, 0x2039
 87c:	89 2b       	or	r24, r25
 87e:	71 f4       	brne	.+28     	; 0x89c <fdevopen+0x88>
 880:	e0 93 38 20 	sts	0x2038, r30
 884:	f0 93 39 20 	sts	0x2039, r31
 888:	80 91 3a 20 	lds	r24, 0x203A
 88c:	90 91 3b 20 	lds	r25, 0x203B
 890:	89 2b       	or	r24, r25
 892:	21 f4       	brne	.+8      	; 0x89c <fdevopen+0x88>
 894:	e0 93 3a 20 	sts	0x203A, r30
 898:	f0 93 3b 20 	sts	0x203B, r31
 89c:	cf 01       	movw	r24, r30
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	1f 91       	pop	r17
 8a4:	0f 91       	pop	r16
 8a6:	08 95       	ret

000008a8 <fgetc>:
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	ec 01       	movw	r28, r24
 8ae:	2b 81       	ldd	r18, Y+3	; 0x03
 8b0:	20 ff       	sbrs	r18, 0
 8b2:	33 c0       	rjmp	.+102    	; 0x91a <fgetc+0x72>
 8b4:	26 ff       	sbrs	r18, 6
 8b6:	0a c0       	rjmp	.+20     	; 0x8cc <fgetc+0x24>
 8b8:	2f 7b       	andi	r18, 0xBF	; 191
 8ba:	2b 83       	std	Y+3, r18	; 0x03
 8bc:	8e 81       	ldd	r24, Y+6	; 0x06
 8be:	9f 81       	ldd	r25, Y+7	; 0x07
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	8e 83       	std	Y+6, r24	; 0x06
 8c4:	9f 83       	std	Y+7, r25	; 0x07
 8c6:	8a 81       	ldd	r24, Y+2	; 0x02
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	29 c0       	rjmp	.+82     	; 0x91e <fgetc+0x76>
 8cc:	22 ff       	sbrs	r18, 2
 8ce:	0f c0       	rjmp	.+30     	; 0x8ee <fgetc+0x46>
 8d0:	e8 81       	ld	r30, Y
 8d2:	f9 81       	ldd	r31, Y+1	; 0x01
 8d4:	80 81       	ld	r24, Z
 8d6:	99 27       	eor	r25, r25
 8d8:	87 fd       	sbrc	r24, 7
 8da:	90 95       	com	r25
 8dc:	00 97       	sbiw	r24, 0x00	; 0
 8de:	19 f4       	brne	.+6      	; 0x8e6 <fgetc+0x3e>
 8e0:	20 62       	ori	r18, 0x20	; 32
 8e2:	2b 83       	std	Y+3, r18	; 0x03
 8e4:	1a c0       	rjmp	.+52     	; 0x91a <fgetc+0x72>
 8e6:	31 96       	adiw	r30, 0x01	; 1
 8e8:	e8 83       	st	Y, r30
 8ea:	f9 83       	std	Y+1, r31	; 0x01
 8ec:	0e c0       	rjmp	.+28     	; 0x90a <fgetc+0x62>
 8ee:	ea 85       	ldd	r30, Y+10	; 0x0a
 8f0:	fb 85       	ldd	r31, Y+11	; 0x0b
 8f2:	09 95       	icall
 8f4:	97 ff       	sbrs	r25, 7
 8f6:	09 c0       	rjmp	.+18     	; 0x90a <fgetc+0x62>
 8f8:	2b 81       	ldd	r18, Y+3	; 0x03
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	11 f4       	brne	.+4      	; 0x902 <fgetc+0x5a>
 8fe:	80 e1       	ldi	r24, 0x10	; 16
 900:	01 c0       	rjmp	.+2      	; 0x904 <fgetc+0x5c>
 902:	80 e2       	ldi	r24, 0x20	; 32
 904:	82 2b       	or	r24, r18
 906:	8b 83       	std	Y+3, r24	; 0x03
 908:	08 c0       	rjmp	.+16     	; 0x91a <fgetc+0x72>
 90a:	2e 81       	ldd	r18, Y+6	; 0x06
 90c:	3f 81       	ldd	r19, Y+7	; 0x07
 90e:	2f 5f       	subi	r18, 0xFF	; 255
 910:	3f 4f       	sbci	r19, 0xFF	; 255
 912:	2e 83       	std	Y+6, r18	; 0x06
 914:	3f 83       	std	Y+7, r19	; 0x07
 916:	99 27       	eor	r25, r25
 918:	02 c0       	rjmp	.+4      	; 0x91e <fgetc+0x76>
 91a:	8f ef       	ldi	r24, 0xFF	; 255
 91c:	9f ef       	ldi	r25, 0xFF	; 255
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	08 95       	ret

00000924 <puts>:
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	e0 91 38 20 	lds	r30, 0x2038
 930:	f0 91 39 20 	lds	r31, 0x2039
 934:	23 81       	ldd	r18, Z+3	; 0x03
 936:	21 ff       	sbrs	r18, 1
 938:	1b c0       	rjmp	.+54     	; 0x970 <puts+0x4c>
 93a:	ec 01       	movw	r28, r24
 93c:	00 e0       	ldi	r16, 0x00	; 0
 93e:	10 e0       	ldi	r17, 0x00	; 0
 940:	89 91       	ld	r24, Y+
 942:	60 91 38 20 	lds	r22, 0x2038
 946:	70 91 39 20 	lds	r23, 0x2039
 94a:	db 01       	movw	r26, r22
 94c:	18 96       	adiw	r26, 0x08	; 8
 94e:	ed 91       	ld	r30, X+
 950:	fc 91       	ld	r31, X
 952:	19 97       	sbiw	r26, 0x09	; 9
 954:	88 23       	and	r24, r24
 956:	31 f0       	breq	.+12     	; 0x964 <puts+0x40>
 958:	09 95       	icall
 95a:	89 2b       	or	r24, r25
 95c:	89 f3       	breq	.-30     	; 0x940 <puts+0x1c>
 95e:	0f ef       	ldi	r16, 0xFF	; 255
 960:	1f ef       	ldi	r17, 0xFF	; 255
 962:	ee cf       	rjmp	.-36     	; 0x940 <puts+0x1c>
 964:	8a e0       	ldi	r24, 0x0A	; 10
 966:	09 95       	icall
 968:	89 2b       	or	r24, r25
 96a:	11 f4       	brne	.+4      	; 0x970 <puts+0x4c>
 96c:	c8 01       	movw	r24, r16
 96e:	02 c0       	rjmp	.+4      	; 0x974 <puts+0x50>
 970:	8f ef       	ldi	r24, 0xFF	; 255
 972:	9f ef       	ldi	r25, 0xFF	; 255
 974:	df 91       	pop	r29
 976:	cf 91       	pop	r28
 978:	1f 91       	pop	r17
 97a:	0f 91       	pop	r16
 97c:	08 95       	ret

0000097e <calloc>:
 97e:	0f 93       	push	r16
 980:	1f 93       	push	r17
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	86 9f       	mul	r24, r22
 988:	80 01       	movw	r16, r0
 98a:	87 9f       	mul	r24, r23
 98c:	10 0d       	add	r17, r0
 98e:	96 9f       	mul	r25, r22
 990:	10 0d       	add	r17, r0
 992:	11 24       	eor	r1, r1
 994:	c8 01       	movw	r24, r16
 996:	0d d0       	rcall	.+26     	; 0x9b2 <malloc>
 998:	ec 01       	movw	r28, r24
 99a:	00 97       	sbiw	r24, 0x00	; 0
 99c:	21 f0       	breq	.+8      	; 0x9a6 <calloc+0x28>
 99e:	a8 01       	movw	r20, r16
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	70 e0       	ldi	r23, 0x00	; 0
 9a4:	2d d1       	rcall	.+602    	; 0xc00 <memset>
 9a6:	ce 01       	movw	r24, r28
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	1f 91       	pop	r17
 9ae:	0f 91       	pop	r16
 9b0:	08 95       	ret

000009b2 <malloc>:
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	82 30       	cpi	r24, 0x02	; 2
 9b8:	91 05       	cpc	r25, r1
 9ba:	10 f4       	brcc	.+4      	; 0x9c0 <malloc+0xe>
 9bc:	82 e0       	ldi	r24, 0x02	; 2
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	e0 91 3e 20 	lds	r30, 0x203E
 9c4:	f0 91 3f 20 	lds	r31, 0x203F
 9c8:	20 e0       	ldi	r18, 0x00	; 0
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	a0 e0       	ldi	r26, 0x00	; 0
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	30 97       	sbiw	r30, 0x00	; 0
 9d2:	39 f1       	breq	.+78     	; 0xa22 <malloc+0x70>
 9d4:	40 81       	ld	r20, Z
 9d6:	51 81       	ldd	r21, Z+1	; 0x01
 9d8:	48 17       	cp	r20, r24
 9da:	59 07       	cpc	r21, r25
 9dc:	b8 f0       	brcs	.+46     	; 0xa0c <malloc+0x5a>
 9de:	48 17       	cp	r20, r24
 9e0:	59 07       	cpc	r21, r25
 9e2:	71 f4       	brne	.+28     	; 0xa00 <malloc+0x4e>
 9e4:	82 81       	ldd	r24, Z+2	; 0x02
 9e6:	93 81       	ldd	r25, Z+3	; 0x03
 9e8:	10 97       	sbiw	r26, 0x00	; 0
 9ea:	29 f0       	breq	.+10     	; 0x9f6 <malloc+0x44>
 9ec:	12 96       	adiw	r26, 0x02	; 2
 9ee:	8d 93       	st	X+, r24
 9f0:	9c 93       	st	X, r25
 9f2:	13 97       	sbiw	r26, 0x03	; 3
 9f4:	2c c0       	rjmp	.+88     	; 0xa4e <malloc+0x9c>
 9f6:	80 93 3e 20 	sts	0x203E, r24
 9fa:	90 93 3f 20 	sts	0x203F, r25
 9fe:	27 c0       	rjmp	.+78     	; 0xa4e <malloc+0x9c>
 a00:	21 15       	cp	r18, r1
 a02:	31 05       	cpc	r19, r1
 a04:	31 f0       	breq	.+12     	; 0xa12 <malloc+0x60>
 a06:	42 17       	cp	r20, r18
 a08:	53 07       	cpc	r21, r19
 a0a:	18 f0       	brcs	.+6      	; 0xa12 <malloc+0x60>
 a0c:	a9 01       	movw	r20, r18
 a0e:	db 01       	movw	r26, r22
 a10:	01 c0       	rjmp	.+2      	; 0xa14 <malloc+0x62>
 a12:	ef 01       	movw	r28, r30
 a14:	9a 01       	movw	r18, r20
 a16:	bd 01       	movw	r22, r26
 a18:	df 01       	movw	r26, r30
 a1a:	02 80       	ldd	r0, Z+2	; 0x02
 a1c:	f3 81       	ldd	r31, Z+3	; 0x03
 a1e:	e0 2d       	mov	r30, r0
 a20:	d7 cf       	rjmp	.-82     	; 0x9d0 <malloc+0x1e>
 a22:	21 15       	cp	r18, r1
 a24:	31 05       	cpc	r19, r1
 a26:	f9 f0       	breq	.+62     	; 0xa66 <malloc+0xb4>
 a28:	28 1b       	sub	r18, r24
 a2a:	39 0b       	sbc	r19, r25
 a2c:	24 30       	cpi	r18, 0x04	; 4
 a2e:	31 05       	cpc	r19, r1
 a30:	80 f4       	brcc	.+32     	; 0xa52 <malloc+0xa0>
 a32:	8a 81       	ldd	r24, Y+2	; 0x02
 a34:	9b 81       	ldd	r25, Y+3	; 0x03
 a36:	61 15       	cp	r22, r1
 a38:	71 05       	cpc	r23, r1
 a3a:	21 f0       	breq	.+8      	; 0xa44 <malloc+0x92>
 a3c:	fb 01       	movw	r30, r22
 a3e:	82 83       	std	Z+2, r24	; 0x02
 a40:	93 83       	std	Z+3, r25	; 0x03
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <malloc+0x9a>
 a44:	80 93 3e 20 	sts	0x203E, r24
 a48:	90 93 3f 20 	sts	0x203F, r25
 a4c:	fe 01       	movw	r30, r28
 a4e:	32 96       	adiw	r30, 0x02	; 2
 a50:	44 c0       	rjmp	.+136    	; 0xada <malloc+0x128>
 a52:	fe 01       	movw	r30, r28
 a54:	e2 0f       	add	r30, r18
 a56:	f3 1f       	adc	r31, r19
 a58:	81 93       	st	Z+, r24
 a5a:	91 93       	st	Z+, r25
 a5c:	22 50       	subi	r18, 0x02	; 2
 a5e:	31 09       	sbc	r19, r1
 a60:	28 83       	st	Y, r18
 a62:	39 83       	std	Y+1, r19	; 0x01
 a64:	3a c0       	rjmp	.+116    	; 0xada <malloc+0x128>
 a66:	20 91 3c 20 	lds	r18, 0x203C
 a6a:	30 91 3d 20 	lds	r19, 0x203D
 a6e:	23 2b       	or	r18, r19
 a70:	41 f4       	brne	.+16     	; 0xa82 <malloc+0xd0>
 a72:	20 91 02 20 	lds	r18, 0x2002
 a76:	30 91 03 20 	lds	r19, 0x2003
 a7a:	20 93 3c 20 	sts	0x203C, r18
 a7e:	30 93 3d 20 	sts	0x203D, r19
 a82:	20 91 00 20 	lds	r18, 0x2000
 a86:	30 91 01 20 	lds	r19, 0x2001
 a8a:	21 15       	cp	r18, r1
 a8c:	31 05       	cpc	r19, r1
 a8e:	41 f4       	brne	.+16     	; 0xaa0 <malloc+0xee>
 a90:	2d b7       	in	r18, 0x3d	; 61
 a92:	3e b7       	in	r19, 0x3e	; 62
 a94:	40 91 04 20 	lds	r20, 0x2004
 a98:	50 91 05 20 	lds	r21, 0x2005
 a9c:	24 1b       	sub	r18, r20
 a9e:	35 0b       	sbc	r19, r21
 aa0:	e0 91 3c 20 	lds	r30, 0x203C
 aa4:	f0 91 3d 20 	lds	r31, 0x203D
 aa8:	e2 17       	cp	r30, r18
 aaa:	f3 07       	cpc	r31, r19
 aac:	a0 f4       	brcc	.+40     	; 0xad6 <malloc+0x124>
 aae:	2e 1b       	sub	r18, r30
 ab0:	3f 0b       	sbc	r19, r31
 ab2:	28 17       	cp	r18, r24
 ab4:	39 07       	cpc	r19, r25
 ab6:	78 f0       	brcs	.+30     	; 0xad6 <malloc+0x124>
 ab8:	ac 01       	movw	r20, r24
 aba:	4e 5f       	subi	r20, 0xFE	; 254
 abc:	5f 4f       	sbci	r21, 0xFF	; 255
 abe:	24 17       	cp	r18, r20
 ac0:	35 07       	cpc	r19, r21
 ac2:	48 f0       	brcs	.+18     	; 0xad6 <malloc+0x124>
 ac4:	4e 0f       	add	r20, r30
 ac6:	5f 1f       	adc	r21, r31
 ac8:	40 93 3c 20 	sts	0x203C, r20
 acc:	50 93 3d 20 	sts	0x203D, r21
 ad0:	81 93       	st	Z+, r24
 ad2:	91 93       	st	Z+, r25
 ad4:	02 c0       	rjmp	.+4      	; 0xada <malloc+0x128>
 ad6:	e0 e0       	ldi	r30, 0x00	; 0
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	cf 01       	movw	r24, r30
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	08 95       	ret

00000ae2 <free>:
 ae2:	cf 93       	push	r28
 ae4:	df 93       	push	r29
 ae6:	00 97       	sbiw	r24, 0x00	; 0
 ae8:	09 f4       	brne	.+2      	; 0xaec <free+0xa>
 aea:	87 c0       	rjmp	.+270    	; 0xbfa <free+0x118>
 aec:	fc 01       	movw	r30, r24
 aee:	32 97       	sbiw	r30, 0x02	; 2
 af0:	12 82       	std	Z+2, r1	; 0x02
 af2:	13 82       	std	Z+3, r1	; 0x03
 af4:	c0 91 3e 20 	lds	r28, 0x203E
 af8:	d0 91 3f 20 	lds	r29, 0x203F
 afc:	20 97       	sbiw	r28, 0x00	; 0
 afe:	81 f4       	brne	.+32     	; 0xb20 <free+0x3e>
 b00:	20 81       	ld	r18, Z
 b02:	31 81       	ldd	r19, Z+1	; 0x01
 b04:	28 0f       	add	r18, r24
 b06:	39 1f       	adc	r19, r25
 b08:	80 91 3c 20 	lds	r24, 0x203C
 b0c:	90 91 3d 20 	lds	r25, 0x203D
 b10:	82 17       	cp	r24, r18
 b12:	93 07       	cpc	r25, r19
 b14:	79 f5       	brne	.+94     	; 0xb74 <free+0x92>
 b16:	e0 93 3c 20 	sts	0x203C, r30
 b1a:	f0 93 3d 20 	sts	0x203D, r31
 b1e:	6d c0       	rjmp	.+218    	; 0xbfa <free+0x118>
 b20:	de 01       	movw	r26, r28
 b22:	20 e0       	ldi	r18, 0x00	; 0
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	ae 17       	cp	r26, r30
 b28:	bf 07       	cpc	r27, r31
 b2a:	50 f4       	brcc	.+20     	; 0xb40 <free+0x5e>
 b2c:	12 96       	adiw	r26, 0x02	; 2
 b2e:	4d 91       	ld	r20, X+
 b30:	5c 91       	ld	r21, X
 b32:	13 97       	sbiw	r26, 0x03	; 3
 b34:	9d 01       	movw	r18, r26
 b36:	41 15       	cp	r20, r1
 b38:	51 05       	cpc	r21, r1
 b3a:	09 f1       	breq	.+66     	; 0xb7e <free+0x9c>
 b3c:	da 01       	movw	r26, r20
 b3e:	f3 cf       	rjmp	.-26     	; 0xb26 <free+0x44>
 b40:	a2 83       	std	Z+2, r26	; 0x02
 b42:	b3 83       	std	Z+3, r27	; 0x03
 b44:	40 81       	ld	r20, Z
 b46:	51 81       	ldd	r21, Z+1	; 0x01
 b48:	84 0f       	add	r24, r20
 b4a:	95 1f       	adc	r25, r21
 b4c:	8a 17       	cp	r24, r26
 b4e:	9b 07       	cpc	r25, r27
 b50:	71 f4       	brne	.+28     	; 0xb6e <free+0x8c>
 b52:	8d 91       	ld	r24, X+
 b54:	9c 91       	ld	r25, X
 b56:	11 97       	sbiw	r26, 0x01	; 1
 b58:	84 0f       	add	r24, r20
 b5a:	95 1f       	adc	r25, r21
 b5c:	02 96       	adiw	r24, 0x02	; 2
 b5e:	80 83       	st	Z, r24
 b60:	91 83       	std	Z+1, r25	; 0x01
 b62:	12 96       	adiw	r26, 0x02	; 2
 b64:	8d 91       	ld	r24, X+
 b66:	9c 91       	ld	r25, X
 b68:	13 97       	sbiw	r26, 0x03	; 3
 b6a:	82 83       	std	Z+2, r24	; 0x02
 b6c:	93 83       	std	Z+3, r25	; 0x03
 b6e:	21 15       	cp	r18, r1
 b70:	31 05       	cpc	r19, r1
 b72:	29 f4       	brne	.+10     	; 0xb7e <free+0x9c>
 b74:	e0 93 3e 20 	sts	0x203E, r30
 b78:	f0 93 3f 20 	sts	0x203F, r31
 b7c:	3e c0       	rjmp	.+124    	; 0xbfa <free+0x118>
 b7e:	d9 01       	movw	r26, r18
 b80:	12 96       	adiw	r26, 0x02	; 2
 b82:	ed 93       	st	X+, r30
 b84:	fc 93       	st	X, r31
 b86:	13 97       	sbiw	r26, 0x03	; 3
 b88:	4d 91       	ld	r20, X+
 b8a:	5d 91       	ld	r21, X+
 b8c:	a4 0f       	add	r26, r20
 b8e:	b5 1f       	adc	r27, r21
 b90:	ea 17       	cp	r30, r26
 b92:	fb 07       	cpc	r31, r27
 b94:	79 f4       	brne	.+30     	; 0xbb4 <free+0xd2>
 b96:	80 81       	ld	r24, Z
 b98:	91 81       	ldd	r25, Z+1	; 0x01
 b9a:	84 0f       	add	r24, r20
 b9c:	95 1f       	adc	r25, r21
 b9e:	02 96       	adiw	r24, 0x02	; 2
 ba0:	d9 01       	movw	r26, r18
 ba2:	8d 93       	st	X+, r24
 ba4:	9c 93       	st	X, r25
 ba6:	11 97       	sbiw	r26, 0x01	; 1
 ba8:	82 81       	ldd	r24, Z+2	; 0x02
 baa:	93 81       	ldd	r25, Z+3	; 0x03
 bac:	12 96       	adiw	r26, 0x02	; 2
 bae:	8d 93       	st	X+, r24
 bb0:	9c 93       	st	X, r25
 bb2:	13 97       	sbiw	r26, 0x03	; 3
 bb4:	e0 e0       	ldi	r30, 0x00	; 0
 bb6:	f0 e0       	ldi	r31, 0x00	; 0
 bb8:	8a 81       	ldd	r24, Y+2	; 0x02
 bba:	9b 81       	ldd	r25, Y+3	; 0x03
 bbc:	00 97       	sbiw	r24, 0x00	; 0
 bbe:	19 f0       	breq	.+6      	; 0xbc6 <free+0xe4>
 bc0:	fe 01       	movw	r30, r28
 bc2:	ec 01       	movw	r28, r24
 bc4:	f9 cf       	rjmp	.-14     	; 0xbb8 <free+0xd6>
 bc6:	ce 01       	movw	r24, r28
 bc8:	02 96       	adiw	r24, 0x02	; 2
 bca:	28 81       	ld	r18, Y
 bcc:	39 81       	ldd	r19, Y+1	; 0x01
 bce:	82 0f       	add	r24, r18
 bd0:	93 1f       	adc	r25, r19
 bd2:	20 91 3c 20 	lds	r18, 0x203C
 bd6:	30 91 3d 20 	lds	r19, 0x203D
 bda:	28 17       	cp	r18, r24
 bdc:	39 07       	cpc	r19, r25
 bde:	69 f4       	brne	.+26     	; 0xbfa <free+0x118>
 be0:	30 97       	sbiw	r30, 0x00	; 0
 be2:	29 f4       	brne	.+10     	; 0xbee <free+0x10c>
 be4:	10 92 3e 20 	sts	0x203E, r1
 be8:	10 92 3f 20 	sts	0x203F, r1
 bec:	02 c0       	rjmp	.+4      	; 0xbf2 <free+0x110>
 bee:	12 82       	std	Z+2, r1	; 0x02
 bf0:	13 82       	std	Z+3, r1	; 0x03
 bf2:	c0 93 3c 20 	sts	0x203C, r28
 bf6:	d0 93 3d 20 	sts	0x203D, r29
 bfa:	df 91       	pop	r29
 bfc:	cf 91       	pop	r28
 bfe:	08 95       	ret

00000c00 <memset>:
 c00:	dc 01       	movw	r26, r24
 c02:	01 c0       	rjmp	.+2      	; 0xc06 <memset+0x6>
 c04:	6d 93       	st	X+, r22
 c06:	41 50       	subi	r20, 0x01	; 1
 c08:	50 40       	sbci	r21, 0x00	; 0
 c0a:	e0 f7       	brcc	.-8      	; 0xc04 <memset+0x4>
 c0c:	08 95       	ret

00000c0e <_exit>:
 c0e:	f8 94       	cli

00000c10 <__stop_program>:
 c10:	ff cf       	rjmp	.-2      	; 0xc10 <__stop_program>
