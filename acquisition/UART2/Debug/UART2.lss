
UART2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00001476  0000150a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000817  0080200e  0080200e  00001518  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  00001548  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006420  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fb5  00000000  00000000  00007c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000035c0  00000000  00000000  00008bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c7c  00000000  00000000  0000c180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00028942  00000000  00000000  0000cdfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002dee  00000000  00000000  0003573e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  00038530  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000017d3  00000000  00000000  00038770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
       6:	00 00       	nop
       8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
       a:	00 00       	nop
       c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
       e:	00 00       	nop
      10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
      12:	00 00       	nop
      14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
      16:	00 00       	nop
      18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
      1e:	00 00       	nop
      20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
      22:	00 00       	nop
      24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
      26:	00 00       	nop
      28:	05 c1       	rjmp	.+522    	; 0x234 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	03 c1       	rjmp	.+518    	; 0x234 <__bad_interrupt>
      2e:	00 00       	nop
      30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
      32:	00 00       	nop
      34:	ff c0       	rjmp	.+510    	; 0x234 <__bad_interrupt>
      36:	00 00       	nop
      38:	17 c1       	rjmp	.+558    	; 0x268 <__vector_14>
      3a:	00 00       	nop
      3c:	3e c1       	rjmp	.+636    	; 0x2ba <__vector_15>
      3e:	00 00       	nop
      40:	65 c1       	rjmp	.+714    	; 0x30c <__vector_16>
      42:	00 00       	nop
      44:	8c c1       	rjmp	.+792    	; 0x35e <__vector_17>
      46:	00 00       	nop
      48:	b3 c1       	rjmp	.+870    	; 0x3b0 <__vector_18>
      4a:	00 00       	nop
      4c:	da c1       	rjmp	.+948    	; 0x402 <__vector_19>
      4e:	00 00       	nop
      50:	01 c2       	rjmp	.+1026   	; 0x454 <__vector_20>
      52:	00 00       	nop
      54:	28 c2       	rjmp	.+1104   	; 0x4a6 <__vector_21>
      56:	00 00       	nop
      58:	4f c2       	rjmp	.+1182   	; 0x4f8 <__vector_22>
      5a:	00 00       	nop
      5c:	76 c2       	rjmp	.+1260   	; 0x54a <__vector_23>
      5e:	00 00       	nop
      60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
      62:	00 00       	nop
      64:	e7 c0       	rjmp	.+462    	; 0x234 <__bad_interrupt>
      66:	00 00       	nop
      68:	e5 c0       	rjmp	.+458    	; 0x234 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
      72:	00 00       	nop
      74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
      76:	00 00       	nop
      78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
      82:	00 00       	nop
      84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
      86:	00 00       	nop
      88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
      92:	00 00       	nop
      94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
      96:	00 00       	nop
      98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c3 c0       	rjmp	.+390    	; 0x234 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c1 c0       	rjmp	.+386    	; 0x234 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bf c0       	rjmp	.+382    	; 0x234 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bd c0       	rjmp	.+378    	; 0x234 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c4       	rjmp	.+2066   	; 0x8d0 <__vector_47>
      be:	00 00       	nop
      c0:	30 c4       	rjmp	.+2144   	; 0x922 <__vector_48>
      c2:	00 00       	nop
      c4:	57 c4       	rjmp	.+2222   	; 0x974 <__vector_49>
      c6:	00 00       	nop
      c8:	7e c4       	rjmp	.+2300   	; 0x9c6 <__vector_50>
      ca:	00 00       	nop
      cc:	a5 c4       	rjmp	.+2378   	; 0xa18 <__vector_51>
      ce:	00 00       	nop
      d0:	cc c4       	rjmp	.+2456   	; 0xa6a <__vector_52>
      d2:	00 00       	nop
      d4:	af c0       	rjmp	.+350    	; 0x234 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ad c0       	rjmp	.+346    	; 0x234 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ab c0       	rjmp	.+342    	; 0x234 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a9 c0       	rjmp	.+338    	; 0x234 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a7 c0       	rjmp	.+334    	; 0x234 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a5 c0       	rjmp	.+330    	; 0x234 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a3 c0       	rjmp	.+326    	; 0x234 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a1 c0       	rjmp	.+322    	; 0x234 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	9f c0       	rjmp	.+318    	; 0x234 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9d c0       	rjmp	.+314    	; 0x234 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9b c0       	rjmp	.+310    	; 0x234 <__bad_interrupt>
      fe:	00 00       	nop
     100:	99 c0       	rjmp	.+306    	; 0x234 <__bad_interrupt>
     102:	00 00       	nop
     104:	97 c0       	rjmp	.+302    	; 0x234 <__bad_interrupt>
     106:	00 00       	nop
     108:	95 c0       	rjmp	.+298    	; 0x234 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	93 c0       	rjmp	.+294    	; 0x234 <__bad_interrupt>
     10e:	00 00       	nop
     110:	91 c0       	rjmp	.+290    	; 0x234 <__bad_interrupt>
     112:	00 00       	nop
     114:	8f c0       	rjmp	.+286    	; 0x234 <__bad_interrupt>
     116:	00 00       	nop
     118:	8d c0       	rjmp	.+282    	; 0x234 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8b c0       	rjmp	.+278    	; 0x234 <__bad_interrupt>
     11e:	00 00       	nop
     120:	89 c0       	rjmp	.+274    	; 0x234 <__bad_interrupt>
     122:	00 00       	nop
     124:	87 c0       	rjmp	.+270    	; 0x234 <__bad_interrupt>
     126:	00 00       	nop
     128:	85 c0       	rjmp	.+266    	; 0x234 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	83 c0       	rjmp	.+262    	; 0x234 <__bad_interrupt>
     12e:	00 00       	nop
     130:	81 c0       	rjmp	.+258    	; 0x234 <__bad_interrupt>
     132:	00 00       	nop
     134:	33 c2       	rjmp	.+1126   	; 0x59c <__vector_77>
     136:	00 00       	nop
     138:	5a c2       	rjmp	.+1204   	; 0x5ee <__vector_78>
     13a:	00 00       	nop
     13c:	81 c2       	rjmp	.+1282   	; 0x640 <__vector_79>
     13e:	00 00       	nop
     140:	a8 c2       	rjmp	.+1360   	; 0x692 <__vector_80>
     142:	00 00       	nop
     144:	cf c2       	rjmp	.+1438   	; 0x6e4 <__vector_81>
     146:	00 00       	nop
     148:	f6 c2       	rjmp	.+1516   	; 0x736 <__vector_82>
     14a:	00 00       	nop
     14c:	1d c3       	rjmp	.+1594   	; 0x788 <__vector_83>
     14e:	00 00       	nop
     150:	44 c3       	rjmp	.+1672   	; 0x7da <__vector_84>
     152:	00 00       	nop
     154:	6b c3       	rjmp	.+1750   	; 0x82c <__vector_85>
     156:	00 00       	nop
     158:	92 c3       	rjmp	.+1828   	; 0x87e <__vector_86>
     15a:	00 00       	nop
     15c:	6b c0       	rjmp	.+214    	; 0x234 <__bad_interrupt>
     15e:	00 00       	nop
     160:	69 c0       	rjmp	.+210    	; 0x234 <__bad_interrupt>
     162:	00 00       	nop
     164:	67 c0       	rjmp	.+206    	; 0x234 <__bad_interrupt>
     166:	00 00       	nop
     168:	65 c0       	rjmp	.+202    	; 0x234 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	63 c0       	rjmp	.+198    	; 0x234 <__bad_interrupt>
     16e:	00 00       	nop
     170:	61 c0       	rjmp	.+194    	; 0x234 <__bad_interrupt>
     172:	00 00       	nop
     174:	5f c0       	rjmp	.+190    	; 0x234 <__bad_interrupt>
     176:	00 00       	nop
     178:	5d c0       	rjmp	.+186    	; 0x234 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5b c0       	rjmp	.+182    	; 0x234 <__bad_interrupt>
     17e:	00 00       	nop
     180:	59 c0       	rjmp	.+178    	; 0x234 <__bad_interrupt>
     182:	00 00       	nop
     184:	57 c0       	rjmp	.+174    	; 0x234 <__bad_interrupt>
     186:	00 00       	nop
     188:	55 c0       	rjmp	.+170    	; 0x234 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	53 c0       	rjmp	.+166    	; 0x234 <__bad_interrupt>
     18e:	00 00       	nop
     190:	51 c0       	rjmp	.+162    	; 0x234 <__bad_interrupt>
     192:	00 00       	nop
     194:	4f c0       	rjmp	.+158    	; 0x234 <__bad_interrupt>
     196:	00 00       	nop
     198:	4d c0       	rjmp	.+154    	; 0x234 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4b c0       	rjmp	.+150    	; 0x234 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	49 c0       	rjmp	.+146    	; 0x234 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	47 c0       	rjmp	.+142    	; 0x234 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	45 c0       	rjmp	.+138    	; 0x234 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	43 c0       	rjmp	.+134    	; 0x234 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	41 c0       	rjmp	.+130    	; 0x234 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	3f c0       	rjmp	.+126    	; 0x234 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3d c0       	rjmp	.+122    	; 0x234 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3b c0       	rjmp	.+118    	; 0x234 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	39 c0       	rjmp	.+114    	; 0x234 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	37 c0       	rjmp	.+110    	; 0x234 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	35 c0       	rjmp	.+106    	; 0x234 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	33 c0       	rjmp	.+102    	; 0x234 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	31 c0       	rjmp	.+98     	; 0x234 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	2f c0       	rjmp	.+94     	; 0x234 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2d c0       	rjmp	.+90     	; 0x234 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2b c0       	rjmp	.+86     	; 0x234 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	29 c0       	rjmp	.+82     	; 0x234 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	27 c0       	rjmp	.+78     	; 0x234 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	25 c0       	rjmp	.+74     	; 0x234 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	23 c0       	rjmp	.+70     	; 0x234 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	21 c0       	rjmp	.+66     	; 0x234 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	1f c0       	rjmp	.+62     	; 0x234 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1d c0       	rjmp	.+58     	; 0x234 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e6 e7       	ldi	r30, 0x76	; 118
     210:	f4 e1       	ldi	r31, 0x14	; 20
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	ae 30       	cpi	r26, 0x0E	; 14
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	28 e2       	ldi	r18, 0x28	; 40
     220:	ae e0       	ldi	r26, 0x0E	; 14
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a5 32       	cpi	r26, 0x25	; 37
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	05 d7       	rcall	.+3594   	; 0x103a <main>
     230:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <_exit>

00000234 <__bad_interrupt>:
     234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	1f 92       	push	r1
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     240:	80 91 46 20 	lds	r24, 0x2046
     244:	90 91 47 20 	lds	r25, 0x2047
     248:	e0 91 42 20 	lds	r30, 0x2042
     24c:	f0 91 43 20 	lds	r31, 0x2043
     250:	be 01       	movw	r22, r28
     252:	6f 5f       	subi	r22, 0xFF	; 255
     254:	7f 4f       	sbci	r23, 0xFF	; 255
     256:	09 95       	icall
	return c;
     258:	89 81       	ldd	r24, Y+1	; 0x01
}
     25a:	99 27       	eor	r25, r25
     25c:	87 fd       	sbrc	r24, 7
     25e:	90 95       	com	r25
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
     272:	2f 93       	push	r18
     274:	3f 93       	push	r19
     276:	4f 93       	push	r20
     278:	5f 93       	push	r21
     27a:	6f 93       	push	r22
     27c:	7f 93       	push	r23
     27e:	8f 93       	push	r24
     280:	9f 93       	push	r25
     282:	af 93       	push	r26
     284:	bf 93       	push	r27
     286:	ef 93       	push	r30
     288:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     28a:	e0 91 40 20 	lds	r30, 0x2040
     28e:	f0 91 41 20 	lds	r31, 0x2041
     292:	30 97       	sbiw	r30, 0x00	; 0
     294:	09 f0       	breq	.+2      	; 0x298 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     296:	09 95       	icall
	}
}
     298:	ff 91       	pop	r31
     29a:	ef 91       	pop	r30
     29c:	bf 91       	pop	r27
     29e:	af 91       	pop	r26
     2a0:	9f 91       	pop	r25
     2a2:	8f 91       	pop	r24
     2a4:	7f 91       	pop	r23
     2a6:	6f 91       	pop	r22
     2a8:	5f 91       	pop	r21
     2aa:	4f 91       	pop	r20
     2ac:	3f 91       	pop	r19
     2ae:	2f 91       	pop	r18
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     2dc:	e0 91 3e 20 	lds	r30, 0x203E
     2e0:	f0 91 3f 20 	lds	r31, 0x203F
     2e4:	30 97       	sbiw	r30, 0x00	; 0
     2e6:	09 f0       	breq	.+2      	; 0x2ea <__vector_15+0x30>
		tc_tcc0_err_callback();
     2e8:	09 95       	icall
	}
}
     2ea:	ff 91       	pop	r31
     2ec:	ef 91       	pop	r30
     2ee:	bf 91       	pop	r27
     2f0:	af 91       	pop	r26
     2f2:	9f 91       	pop	r25
     2f4:	8f 91       	pop	r24
     2f6:	7f 91       	pop	r23
     2f8:	6f 91       	pop	r22
     2fa:	5f 91       	pop	r21
     2fc:	4f 91       	pop	r20
     2fe:	3f 91       	pop	r19
     300:	2f 91       	pop	r18
     302:	0f 90       	pop	r0
     304:	0f be       	out	0x3f, r0	; 63
     306:	0f 90       	pop	r0
     308:	1f 90       	pop	r1
     30a:	18 95       	reti

0000030c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     30c:	1f 92       	push	r1
     30e:	0f 92       	push	r0
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	0f 92       	push	r0
     314:	11 24       	eor	r1, r1
     316:	2f 93       	push	r18
     318:	3f 93       	push	r19
     31a:	4f 93       	push	r20
     31c:	5f 93       	push	r21
     31e:	6f 93       	push	r22
     320:	7f 93       	push	r23
     322:	8f 93       	push	r24
     324:	9f 93       	push	r25
     326:	af 93       	push	r26
     328:	bf 93       	push	r27
     32a:	ef 93       	push	r30
     32c:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     32e:	e0 91 3c 20 	lds	r30, 0x203C
     332:	f0 91 3d 20 	lds	r31, 0x203D
     336:	30 97       	sbiw	r30, 0x00	; 0
     338:	09 f0       	breq	.+2      	; 0x33c <__vector_16+0x30>
		tc_tcc0_cca_callback();
     33a:	09 95       	icall
	}
}
     33c:	ff 91       	pop	r31
     33e:	ef 91       	pop	r30
     340:	bf 91       	pop	r27
     342:	af 91       	pop	r26
     344:	9f 91       	pop	r25
     346:	8f 91       	pop	r24
     348:	7f 91       	pop	r23
     34a:	6f 91       	pop	r22
     34c:	5f 91       	pop	r21
     34e:	4f 91       	pop	r20
     350:	3f 91       	pop	r19
     352:	2f 91       	pop	r18
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     35e:	1f 92       	push	r1
     360:	0f 92       	push	r0
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	0f 92       	push	r0
     366:	11 24       	eor	r1, r1
     368:	2f 93       	push	r18
     36a:	3f 93       	push	r19
     36c:	4f 93       	push	r20
     36e:	5f 93       	push	r21
     370:	6f 93       	push	r22
     372:	7f 93       	push	r23
     374:	8f 93       	push	r24
     376:	9f 93       	push	r25
     378:	af 93       	push	r26
     37a:	bf 93       	push	r27
     37c:	ef 93       	push	r30
     37e:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     380:	e0 91 3a 20 	lds	r30, 0x203A
     384:	f0 91 3b 20 	lds	r31, 0x203B
     388:	30 97       	sbiw	r30, 0x00	; 0
     38a:	09 f0       	breq	.+2      	; 0x38e <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     38c:	09 95       	icall
	}
}
     38e:	ff 91       	pop	r31
     390:	ef 91       	pop	r30
     392:	bf 91       	pop	r27
     394:	af 91       	pop	r26
     396:	9f 91       	pop	r25
     398:	8f 91       	pop	r24
     39a:	7f 91       	pop	r23
     39c:	6f 91       	pop	r22
     39e:	5f 91       	pop	r21
     3a0:	4f 91       	pop	r20
     3a2:	3f 91       	pop	r19
     3a4:	2f 91       	pop	r18
     3a6:	0f 90       	pop	r0
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	0f 90       	pop	r0
     3ac:	1f 90       	pop	r1
     3ae:	18 95       	reti

000003b0 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     3b0:	1f 92       	push	r1
     3b2:	0f 92       	push	r0
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	0f 92       	push	r0
     3b8:	11 24       	eor	r1, r1
     3ba:	2f 93       	push	r18
     3bc:	3f 93       	push	r19
     3be:	4f 93       	push	r20
     3c0:	5f 93       	push	r21
     3c2:	6f 93       	push	r22
     3c4:	7f 93       	push	r23
     3c6:	8f 93       	push	r24
     3c8:	9f 93       	push	r25
     3ca:	af 93       	push	r26
     3cc:	bf 93       	push	r27
     3ce:	ef 93       	push	r30
     3d0:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     3d2:	e0 91 38 20 	lds	r30, 0x2038
     3d6:	f0 91 39 20 	lds	r31, 0x2039
     3da:	30 97       	sbiw	r30, 0x00	; 0
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     3de:	09 95       	icall
	}
}
     3e0:	ff 91       	pop	r31
     3e2:	ef 91       	pop	r30
     3e4:	bf 91       	pop	r27
     3e6:	af 91       	pop	r26
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	7f 91       	pop	r23
     3ee:	6f 91       	pop	r22
     3f0:	5f 91       	pop	r21
     3f2:	4f 91       	pop	r20
     3f4:	3f 91       	pop	r19
     3f6:	2f 91       	pop	r18
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     424:	e0 91 36 20 	lds	r30, 0x2036
     428:	f0 91 37 20 	lds	r31, 0x2037
     42c:	30 97       	sbiw	r30, 0x00	; 0
     42e:	09 f0       	breq	.+2      	; 0x432 <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     430:	09 95       	icall
	}
}
     432:	ff 91       	pop	r31
     434:	ef 91       	pop	r30
     436:	bf 91       	pop	r27
     438:	af 91       	pop	r26
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	7f 91       	pop	r23
     440:	6f 91       	pop	r22
     442:	5f 91       	pop	r21
     444:	4f 91       	pop	r20
     446:	3f 91       	pop	r19
     448:	2f 91       	pop	r18
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
     45e:	2f 93       	push	r18
     460:	3f 93       	push	r19
     462:	4f 93       	push	r20
     464:	5f 93       	push	r21
     466:	6f 93       	push	r22
     468:	7f 93       	push	r23
     46a:	8f 93       	push	r24
     46c:	9f 93       	push	r25
     46e:	af 93       	push	r26
     470:	bf 93       	push	r27
     472:	ef 93       	push	r30
     474:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     476:	e0 91 34 20 	lds	r30, 0x2034
     47a:	f0 91 35 20 	lds	r31, 0x2035
     47e:	30 97       	sbiw	r30, 0x00	; 0
     480:	09 f0       	breq	.+2      	; 0x484 <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     482:	09 95       	icall
	}
}
     484:	ff 91       	pop	r31
     486:	ef 91       	pop	r30
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	7f 91       	pop	r23
     492:	6f 91       	pop	r22
     494:	5f 91       	pop	r21
     496:	4f 91       	pop	r20
     498:	3f 91       	pop	r19
     49a:	2f 91       	pop	r18
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	11 24       	eor	r1, r1
     4b0:	2f 93       	push	r18
     4b2:	3f 93       	push	r19
     4b4:	4f 93       	push	r20
     4b6:	5f 93       	push	r21
     4b8:	6f 93       	push	r22
     4ba:	7f 93       	push	r23
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
     4c0:	af 93       	push	r26
     4c2:	bf 93       	push	r27
     4c4:	ef 93       	push	r30
     4c6:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     4c8:	e0 91 32 20 	lds	r30, 0x2032
     4cc:	f0 91 33 20 	lds	r31, 0x2033
     4d0:	30 97       	sbiw	r30, 0x00	; 0
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <__vector_21+0x30>
		tc_tcc1_err_callback();
     4d4:	09 95       	icall
	}
}
     4d6:	ff 91       	pop	r31
     4d8:	ef 91       	pop	r30
     4da:	bf 91       	pop	r27
     4dc:	af 91       	pop	r26
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	7f 91       	pop	r23
     4e4:	6f 91       	pop	r22
     4e6:	5f 91       	pop	r21
     4e8:	4f 91       	pop	r20
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	2f 93       	push	r18
     504:	3f 93       	push	r19
     506:	4f 93       	push	r20
     508:	5f 93       	push	r21
     50a:	6f 93       	push	r22
     50c:	7f 93       	push	r23
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
     512:	af 93       	push	r26
     514:	bf 93       	push	r27
     516:	ef 93       	push	r30
     518:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     51a:	e0 91 30 20 	lds	r30, 0x2030
     51e:	f0 91 31 20 	lds	r31, 0x2031
     522:	30 97       	sbiw	r30, 0x00	; 0
     524:	09 f0       	breq	.+2      	; 0x528 <__vector_22+0x30>
		tc_tcc1_cca_callback();
     526:	09 95       	icall
	}
}
     528:	ff 91       	pop	r31
     52a:	ef 91       	pop	r30
     52c:	bf 91       	pop	r27
     52e:	af 91       	pop	r26
     530:	9f 91       	pop	r25
     532:	8f 91       	pop	r24
     534:	7f 91       	pop	r23
     536:	6f 91       	pop	r22
     538:	5f 91       	pop	r21
     53a:	4f 91       	pop	r20
     53c:	3f 91       	pop	r19
     53e:	2f 91       	pop	r18
     540:	0f 90       	pop	r0
     542:	0f be       	out	0x3f, r0	; 63
     544:	0f 90       	pop	r0
     546:	1f 90       	pop	r1
     548:	18 95       	reti

0000054a <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     54a:	1f 92       	push	r1
     54c:	0f 92       	push	r0
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	0f 92       	push	r0
     552:	11 24       	eor	r1, r1
     554:	2f 93       	push	r18
     556:	3f 93       	push	r19
     558:	4f 93       	push	r20
     55a:	5f 93       	push	r21
     55c:	6f 93       	push	r22
     55e:	7f 93       	push	r23
     560:	8f 93       	push	r24
     562:	9f 93       	push	r25
     564:	af 93       	push	r26
     566:	bf 93       	push	r27
     568:	ef 93       	push	r30
     56a:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     56c:	e0 91 2e 20 	lds	r30, 0x202E
     570:	f0 91 2f 20 	lds	r31, 0x202F
     574:	30 97       	sbiw	r30, 0x00	; 0
     576:	09 f0       	breq	.+2      	; 0x57a <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     578:	09 95       	icall
	}
}
     57a:	ff 91       	pop	r31
     57c:	ef 91       	pop	r30
     57e:	bf 91       	pop	r27
     580:	af 91       	pop	r26
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	7f 91       	pop	r23
     588:	6f 91       	pop	r22
     58a:	5f 91       	pop	r21
     58c:	4f 91       	pop	r20
     58e:	3f 91       	pop	r19
     590:	2f 91       	pop	r18
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	2f 93       	push	r18
     5a8:	3f 93       	push	r19
     5aa:	4f 93       	push	r20
     5ac:	5f 93       	push	r21
     5ae:	6f 93       	push	r22
     5b0:	7f 93       	push	r23
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	af 93       	push	r26
     5b8:	bf 93       	push	r27
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     5be:	e0 91 2c 20 	lds	r30, 0x202C
     5c2:	f0 91 2d 20 	lds	r31, 0x202D
     5c6:	30 97       	sbiw	r30, 0x00	; 0
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     5ca:	09 95       	icall
	}
}
     5cc:	ff 91       	pop	r31
     5ce:	ef 91       	pop	r30
     5d0:	bf 91       	pop	r27
     5d2:	af 91       	pop	r26
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	7f 91       	pop	r23
     5da:	6f 91       	pop	r22
     5dc:	5f 91       	pop	r21
     5de:	4f 91       	pop	r20
     5e0:	3f 91       	pop	r19
     5e2:	2f 91       	pop	r18
     5e4:	0f 90       	pop	r0
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	0f 90       	pop	r0
     5ea:	1f 90       	pop	r1
     5ec:	18 95       	reti

000005ee <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     5ee:	1f 92       	push	r1
     5f0:	0f 92       	push	r0
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	0f 92       	push	r0
     5f6:	11 24       	eor	r1, r1
     5f8:	2f 93       	push	r18
     5fa:	3f 93       	push	r19
     5fc:	4f 93       	push	r20
     5fe:	5f 93       	push	r21
     600:	6f 93       	push	r22
     602:	7f 93       	push	r23
     604:	8f 93       	push	r24
     606:	9f 93       	push	r25
     608:	af 93       	push	r26
     60a:	bf 93       	push	r27
     60c:	ef 93       	push	r30
     60e:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     610:	e0 91 2a 20 	lds	r30, 0x202A
     614:	f0 91 2b 20 	lds	r31, 0x202B
     618:	30 97       	sbiw	r30, 0x00	; 0
     61a:	09 f0       	breq	.+2      	; 0x61e <__vector_78+0x30>
		tc_tcd0_err_callback();
     61c:	09 95       	icall
	}
}
     61e:	ff 91       	pop	r31
     620:	ef 91       	pop	r30
     622:	bf 91       	pop	r27
     624:	af 91       	pop	r26
     626:	9f 91       	pop	r25
     628:	8f 91       	pop	r24
     62a:	7f 91       	pop	r23
     62c:	6f 91       	pop	r22
     62e:	5f 91       	pop	r21
     630:	4f 91       	pop	r20
     632:	3f 91       	pop	r19
     634:	2f 91       	pop	r18
     636:	0f 90       	pop	r0
     638:	0f be       	out	0x3f, r0	; 63
     63a:	0f 90       	pop	r0
     63c:	1f 90       	pop	r1
     63e:	18 95       	reti

00000640 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     640:	1f 92       	push	r1
     642:	0f 92       	push	r0
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	0f 92       	push	r0
     648:	11 24       	eor	r1, r1
     64a:	2f 93       	push	r18
     64c:	3f 93       	push	r19
     64e:	4f 93       	push	r20
     650:	5f 93       	push	r21
     652:	6f 93       	push	r22
     654:	7f 93       	push	r23
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
     65a:	af 93       	push	r26
     65c:	bf 93       	push	r27
     65e:	ef 93       	push	r30
     660:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     662:	e0 91 28 20 	lds	r30, 0x2028
     666:	f0 91 29 20 	lds	r31, 0x2029
     66a:	30 97       	sbiw	r30, 0x00	; 0
     66c:	09 f0       	breq	.+2      	; 0x670 <__vector_79+0x30>
		tc_tcd0_cca_callback();
     66e:	09 95       	icall
	}
}
     670:	ff 91       	pop	r31
     672:	ef 91       	pop	r30
     674:	bf 91       	pop	r27
     676:	af 91       	pop	r26
     678:	9f 91       	pop	r25
     67a:	8f 91       	pop	r24
     67c:	7f 91       	pop	r23
     67e:	6f 91       	pop	r22
     680:	5f 91       	pop	r21
     682:	4f 91       	pop	r20
     684:	3f 91       	pop	r19
     686:	2f 91       	pop	r18
     688:	0f 90       	pop	r0
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	0f 90       	pop	r0
     68e:	1f 90       	pop	r1
     690:	18 95       	reti

00000692 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	11 24       	eor	r1, r1
     69c:	2f 93       	push	r18
     69e:	3f 93       	push	r19
     6a0:	4f 93       	push	r20
     6a2:	5f 93       	push	r21
     6a4:	6f 93       	push	r22
     6a6:	7f 93       	push	r23
     6a8:	8f 93       	push	r24
     6aa:	9f 93       	push	r25
     6ac:	af 93       	push	r26
     6ae:	bf 93       	push	r27
     6b0:	ef 93       	push	r30
     6b2:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     6b4:	e0 91 26 20 	lds	r30, 0x2026
     6b8:	f0 91 27 20 	lds	r31, 0x2027
     6bc:	30 97       	sbiw	r30, 0x00	; 0
     6be:	09 f0       	breq	.+2      	; 0x6c2 <__vector_80+0x30>
		tc_tcd0_ccb_callback();
     6c0:	09 95       	icall
	}
}
     6c2:	ff 91       	pop	r31
     6c4:	ef 91       	pop	r30
     6c6:	bf 91       	pop	r27
     6c8:	af 91       	pop	r26
     6ca:	9f 91       	pop	r25
     6cc:	8f 91       	pop	r24
     6ce:	7f 91       	pop	r23
     6d0:	6f 91       	pop	r22
     6d2:	5f 91       	pop	r21
     6d4:	4f 91       	pop	r20
     6d6:	3f 91       	pop	r19
     6d8:	2f 91       	pop	r18
     6da:	0f 90       	pop	r0
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	0f 90       	pop	r0
     6e0:	1f 90       	pop	r1
     6e2:	18 95       	reti

000006e4 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	4f 93       	push	r20
     6f4:	5f 93       	push	r21
     6f6:	6f 93       	push	r22
     6f8:	7f 93       	push	r23
     6fa:	8f 93       	push	r24
     6fc:	9f 93       	push	r25
     6fe:	af 93       	push	r26
     700:	bf 93       	push	r27
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     706:	e0 91 24 20 	lds	r30, 0x2024
     70a:	f0 91 25 20 	lds	r31, 0x2025
     70e:	30 97       	sbiw	r30, 0x00	; 0
     710:	09 f0       	breq	.+2      	; 0x714 <__vector_81+0x30>
		tc_tcd0_ccc_callback();
     712:	09 95       	icall
	}
}
     714:	ff 91       	pop	r31
     716:	ef 91       	pop	r30
     718:	bf 91       	pop	r27
     71a:	af 91       	pop	r26
     71c:	9f 91       	pop	r25
     71e:	8f 91       	pop	r24
     720:	7f 91       	pop	r23
     722:	6f 91       	pop	r22
     724:	5f 91       	pop	r21
     726:	4f 91       	pop	r20
     728:	3f 91       	pop	r19
     72a:	2f 91       	pop	r18
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     736:	1f 92       	push	r1
     738:	0f 92       	push	r0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	0f 92       	push	r0
     73e:	11 24       	eor	r1, r1
     740:	2f 93       	push	r18
     742:	3f 93       	push	r19
     744:	4f 93       	push	r20
     746:	5f 93       	push	r21
     748:	6f 93       	push	r22
     74a:	7f 93       	push	r23
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	af 93       	push	r26
     752:	bf 93       	push	r27
     754:	ef 93       	push	r30
     756:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     758:	e0 91 22 20 	lds	r30, 0x2022
     75c:	f0 91 23 20 	lds	r31, 0x2023
     760:	30 97       	sbiw	r30, 0x00	; 0
     762:	09 f0       	breq	.+2      	; 0x766 <__vector_82+0x30>
		tc_tcd0_ccd_callback();
     764:	09 95       	icall
	}
}
     766:	ff 91       	pop	r31
     768:	ef 91       	pop	r30
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	7f 91       	pop	r23
     774:	6f 91       	pop	r22
     776:	5f 91       	pop	r21
     778:	4f 91       	pop	r20
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
     7a4:	bf 93       	push	r27
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     7aa:	e0 91 20 20 	lds	r30, 0x2020
     7ae:	f0 91 21 20 	lds	r31, 0x2021
     7b2:	30 97       	sbiw	r30, 0x00	; 0
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
     7b6:	09 95       	icall
	}
}
     7b8:	ff 91       	pop	r31
     7ba:	ef 91       	pop	r30
     7bc:	bf 91       	pop	r27
     7be:	af 91       	pop	r26
     7c0:	9f 91       	pop	r25
     7c2:	8f 91       	pop	r24
     7c4:	7f 91       	pop	r23
     7c6:	6f 91       	pop	r22
     7c8:	5f 91       	pop	r21
     7ca:	4f 91       	pop	r20
     7cc:	3f 91       	pop	r19
     7ce:	2f 91       	pop	r18
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti

000007da <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	2f 93       	push	r18
     7e6:	3f 93       	push	r19
     7e8:	4f 93       	push	r20
     7ea:	5f 93       	push	r21
     7ec:	6f 93       	push	r22
     7ee:	7f 93       	push	r23
     7f0:	8f 93       	push	r24
     7f2:	9f 93       	push	r25
     7f4:	af 93       	push	r26
     7f6:	bf 93       	push	r27
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     7fc:	e0 91 1e 20 	lds	r30, 0x201E
     800:	f0 91 1f 20 	lds	r31, 0x201F
     804:	30 97       	sbiw	r30, 0x00	; 0
     806:	09 f0       	breq	.+2      	; 0x80a <__vector_84+0x30>
		tc_tcd1_err_callback();
     808:	09 95       	icall
	}
}
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	bf 91       	pop	r27
     810:	af 91       	pop	r26
     812:	9f 91       	pop	r25
     814:	8f 91       	pop	r24
     816:	7f 91       	pop	r23
     818:	6f 91       	pop	r22
     81a:	5f 91       	pop	r21
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     82c:	1f 92       	push	r1
     82e:	0f 92       	push	r0
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	0f 92       	push	r0
     834:	11 24       	eor	r1, r1
     836:	2f 93       	push	r18
     838:	3f 93       	push	r19
     83a:	4f 93       	push	r20
     83c:	5f 93       	push	r21
     83e:	6f 93       	push	r22
     840:	7f 93       	push	r23
     842:	8f 93       	push	r24
     844:	9f 93       	push	r25
     846:	af 93       	push	r26
     848:	bf 93       	push	r27
     84a:	ef 93       	push	r30
     84c:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     84e:	e0 91 1c 20 	lds	r30, 0x201C
     852:	f0 91 1d 20 	lds	r31, 0x201D
     856:	30 97       	sbiw	r30, 0x00	; 0
     858:	09 f0       	breq	.+2      	; 0x85c <__vector_85+0x30>
		tc_tcd1_cca_callback();
     85a:	09 95       	icall
	}
}
     85c:	ff 91       	pop	r31
     85e:	ef 91       	pop	r30
     860:	bf 91       	pop	r27
     862:	af 91       	pop	r26
     864:	9f 91       	pop	r25
     866:	8f 91       	pop	r24
     868:	7f 91       	pop	r23
     86a:	6f 91       	pop	r22
     86c:	5f 91       	pop	r21
     86e:	4f 91       	pop	r20
     870:	3f 91       	pop	r19
     872:	2f 91       	pop	r18
     874:	0f 90       	pop	r0
     876:	0f be       	out	0x3f, r0	; 63
     878:	0f 90       	pop	r0
     87a:	1f 90       	pop	r1
     87c:	18 95       	reti

0000087e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     87e:	1f 92       	push	r1
     880:	0f 92       	push	r0
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	0f 92       	push	r0
     886:	11 24       	eor	r1, r1
     888:	2f 93       	push	r18
     88a:	3f 93       	push	r19
     88c:	4f 93       	push	r20
     88e:	5f 93       	push	r21
     890:	6f 93       	push	r22
     892:	7f 93       	push	r23
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	ef 93       	push	r30
     89e:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     8a0:	e0 91 1a 20 	lds	r30, 0x201A
     8a4:	f0 91 1b 20 	lds	r31, 0x201B
     8a8:	30 97       	sbiw	r30, 0x00	; 0
     8aa:	09 f0       	breq	.+2      	; 0x8ae <__vector_86+0x30>
		tc_tcd1_ccb_callback();
     8ac:	09 95       	icall
	}
}
     8ae:	ff 91       	pop	r31
     8b0:	ef 91       	pop	r30
     8b2:	bf 91       	pop	r27
     8b4:	af 91       	pop	r26
     8b6:	9f 91       	pop	r25
     8b8:	8f 91       	pop	r24
     8ba:	7f 91       	pop	r23
     8bc:	6f 91       	pop	r22
     8be:	5f 91       	pop	r21
     8c0:	4f 91       	pop	r20
     8c2:	3f 91       	pop	r19
     8c4:	2f 91       	pop	r18
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

000008d0 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	11 24       	eor	r1, r1
     8da:	2f 93       	push	r18
     8dc:	3f 93       	push	r19
     8de:	4f 93       	push	r20
     8e0:	5f 93       	push	r21
     8e2:	6f 93       	push	r22
     8e4:	7f 93       	push	r23
     8e6:	8f 93       	push	r24
     8e8:	9f 93       	push	r25
     8ea:	af 93       	push	r26
     8ec:	bf 93       	push	r27
     8ee:	ef 93       	push	r30
     8f0:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     8f2:	e0 91 18 20 	lds	r30, 0x2018
     8f6:	f0 91 19 20 	lds	r31, 0x2019
     8fa:	30 97       	sbiw	r30, 0x00	; 0
     8fc:	09 f0       	breq	.+2      	; 0x900 <__vector_47+0x30>
		tc_tce0_ovf_callback();
     8fe:	09 95       	icall
	}
}
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	0f 90       	pop	r0
     91e:	1f 90       	pop	r1
     920:	18 95       	reti

00000922 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	2f 93       	push	r18
     92e:	3f 93       	push	r19
     930:	4f 93       	push	r20
     932:	5f 93       	push	r21
     934:	6f 93       	push	r22
     936:	7f 93       	push	r23
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	af 93       	push	r26
     93e:	bf 93       	push	r27
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     944:	e0 91 16 20 	lds	r30, 0x2016
     948:	f0 91 17 20 	lds	r31, 0x2017
     94c:	30 97       	sbiw	r30, 0x00	; 0
     94e:	09 f0       	breq	.+2      	; 0x952 <__vector_48+0x30>
		tc_tce0_err_callback();
     950:	09 95       	icall
	}
}
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	bf 91       	pop	r27
     958:	af 91       	pop	r26
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	7f 91       	pop	r23
     960:	6f 91       	pop	r22
     962:	5f 91       	pop	r21
     964:	4f 91       	pop	r20
     966:	3f 91       	pop	r19
     968:	2f 91       	pop	r18
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     996:	e0 91 14 20 	lds	r30, 0x2014
     99a:	f0 91 15 20 	lds	r31, 0x2015
     99e:	30 97       	sbiw	r30, 0x00	; 0
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <__vector_49+0x30>
		tc_tce0_cca_callback();
     9a2:	09 95       	icall
	}
}
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     9c6:	1f 92       	push	r1
     9c8:	0f 92       	push	r0
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1
     9d0:	2f 93       	push	r18
     9d2:	3f 93       	push	r19
     9d4:	4f 93       	push	r20
     9d6:	5f 93       	push	r21
     9d8:	6f 93       	push	r22
     9da:	7f 93       	push	r23
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	ef 93       	push	r30
     9e6:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     9e8:	e0 91 12 20 	lds	r30, 0x2012
     9ec:	f0 91 13 20 	lds	r31, 0x2013
     9f0:	30 97       	sbiw	r30, 0x00	; 0
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <__vector_50+0x30>
		tc_tce0_ccb_callback();
     9f4:	09 95       	icall
	}
}
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	bf 91       	pop	r27
     9fc:	af 91       	pop	r26
     9fe:	9f 91       	pop	r25
     a00:	8f 91       	pop	r24
     a02:	7f 91       	pop	r23
     a04:	6f 91       	pop	r22
     a06:	5f 91       	pop	r21
     a08:	4f 91       	pop	r20
     a0a:	3f 91       	pop	r19
     a0c:	2f 91       	pop	r18
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     a18:	1f 92       	push	r1
     a1a:	0f 92       	push	r0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	0f 92       	push	r0
     a20:	11 24       	eor	r1, r1
     a22:	2f 93       	push	r18
     a24:	3f 93       	push	r19
     a26:	4f 93       	push	r20
     a28:	5f 93       	push	r21
     a2a:	6f 93       	push	r22
     a2c:	7f 93       	push	r23
     a2e:	8f 93       	push	r24
     a30:	9f 93       	push	r25
     a32:	af 93       	push	r26
     a34:	bf 93       	push	r27
     a36:	ef 93       	push	r30
     a38:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     a3a:	e0 91 10 20 	lds	r30, 0x2010
     a3e:	f0 91 11 20 	lds	r31, 0x2011
     a42:	30 97       	sbiw	r30, 0x00	; 0
     a44:	09 f0       	breq	.+2      	; 0xa48 <__vector_51+0x30>
		tc_tce0_ccc_callback();
     a46:	09 95       	icall
	}
}
     a48:	ff 91       	pop	r31
     a4a:	ef 91       	pop	r30
     a4c:	bf 91       	pop	r27
     a4e:	af 91       	pop	r26
     a50:	9f 91       	pop	r25
     a52:	8f 91       	pop	r24
     a54:	7f 91       	pop	r23
     a56:	6f 91       	pop	r22
     a58:	5f 91       	pop	r21
     a5a:	4f 91       	pop	r20
     a5c:	3f 91       	pop	r19
     a5e:	2f 91       	pop	r18
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     a6a:	1f 92       	push	r1
     a6c:	0f 92       	push	r0
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	0f 92       	push	r0
     a72:	11 24       	eor	r1, r1
     a74:	2f 93       	push	r18
     a76:	3f 93       	push	r19
     a78:	4f 93       	push	r20
     a7a:	5f 93       	push	r21
     a7c:	6f 93       	push	r22
     a7e:	7f 93       	push	r23
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	af 93       	push	r26
     a86:	bf 93       	push	r27
     a88:	ef 93       	push	r30
     a8a:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     a8c:	e0 91 0e 20 	lds	r30, 0x200E
     a90:	f0 91 0f 20 	lds	r31, 0x200F
     a94:	30 97       	sbiw	r30, 0x00	; 0
     a96:	09 f0       	breq	.+2      	; 0xa9a <__vector_52+0x30>
		tc_tce0_ccd_callback();
     a98:	09 95       	icall
	}
}
     a9a:	ff 91       	pop	r31
     a9c:	ef 91       	pop	r30
     a9e:	bf 91       	pop	r27
     aa0:	af 91       	pop	r26
     aa2:	9f 91       	pop	r25
     aa4:	8f 91       	pop	r24
     aa6:	7f 91       	pop	r23
     aa8:	6f 91       	pop	r22
     aaa:	5f 91       	pop	r21
     aac:	4f 91       	pop	r20
     aae:	3f 91       	pop	r19
     ab0:	2f 91       	pop	r18
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     abc:	fc 01       	movw	r30, r24
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	85 ff       	sbrs	r24, 5
     ac2:	fd cf       	rjmp	.-6      	; 0xabe <usart_putchar+0x2>
     ac4:	60 83       	st	Z, r22
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	08 95       	ret

00000acc <usart_getchar>:
     acc:	fc 01       	movw	r30, r24
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	ec f7       	brge	.-6      	; 0xace <usart_getchar+0x2>
     ad4:	80 81       	ld	r24, Z
     ad6:	08 95       	ret

00000ad8 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ad8:	4f 92       	push	r4
     ada:	5f 92       	push	r5
     adc:	6f 92       	push	r6
     ade:	7f 92       	push	r7
     ae0:	8f 92       	push	r8
     ae2:	9f 92       	push	r9
     ae4:	af 92       	push	r10
     ae6:	bf 92       	push	r11
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	ec 01       	movw	r28, r24
     afa:	4a 01       	movw	r8, r20
     afc:	5b 01       	movw	r10, r22
     afe:	28 01       	movw	r4, r16
     b00:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     b02:	d9 01       	movw	r26, r18
     b04:	c8 01       	movw	r24, r16
     b06:	68 94       	set
     b08:	12 f8       	bld	r1, 2
     b0a:	b6 95       	lsr	r27
     b0c:	a7 95       	ror	r26
     b0e:	97 95       	ror	r25
     b10:	87 95       	ror	r24
     b12:	16 94       	lsr	r1
     b14:	d1 f7       	brne	.-12     	; 0xb0a <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     b16:	b9 01       	movw	r22, r18
     b18:	a8 01       	movw	r20, r16
     b1a:	03 2e       	mov	r0, r19
     b1c:	36 e1       	ldi	r19, 0x16	; 22
     b1e:	76 95       	lsr	r23
     b20:	67 95       	ror	r22
     b22:	57 95       	ror	r21
     b24:	47 95       	ror	r20
     b26:	3a 95       	dec	r19
     b28:	d1 f7       	brne	.-12     	; 0xb1e <usart_set_baudrate+0x46>
     b2a:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     b2c:	2c 81       	ldd	r18, Y+4	; 0x04
     b2e:	22 fd       	sbrc	r18, 2
     b30:	08 c0       	rjmp	.+16     	; 0xb42 <usart_set_baudrate+0x6a>
		max_rate /= 2;
     b32:	b6 95       	lsr	r27
     b34:	a7 95       	ror	r26
     b36:	97 95       	ror	r25
     b38:	87 95       	ror	r24
		min_rate /= 2;
     b3a:	76 95       	lsr	r23
     b3c:	67 95       	ror	r22
     b3e:	57 95       	ror	r21
     b40:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     b42:	88 15       	cp	r24, r8
     b44:	99 05       	cpc	r25, r9
     b46:	aa 05       	cpc	r26, r10
     b48:	bb 05       	cpc	r27, r11
     b4a:	08 f4       	brcc	.+2      	; 0xb4e <usart_set_baudrate+0x76>
     b4c:	a2 c0       	rjmp	.+324    	; 0xc92 <usart_set_baudrate+0x1ba>
     b4e:	84 16       	cp	r8, r20
     b50:	95 06       	cpc	r9, r21
     b52:	a6 06       	cpc	r10, r22
     b54:	b7 06       	cpc	r11, r23
     b56:	08 f4       	brcc	.+2      	; 0xb5a <usart_set_baudrate+0x82>
     b58:	9e c0       	rjmp	.+316    	; 0xc96 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     b5a:	8c 81       	ldd	r24, Y+4	; 0x04
     b5c:	82 fd       	sbrc	r24, 2
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <usart_set_baudrate+0x90>
		baud *= 2;
     b60:	88 0c       	add	r8, r8
     b62:	99 1c       	adc	r9, r9
     b64:	aa 1c       	adc	r10, r10
     b66:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     b68:	c3 01       	movw	r24, r6
     b6a:	b2 01       	movw	r22, r4
     b6c:	a5 01       	movw	r20, r10
     b6e:	94 01       	movw	r18, r8
     b70:	cc d2       	rcall	.+1432   	; 0x110a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     b72:	2f 3f       	cpi	r18, 0xFF	; 255
     b74:	31 05       	cpc	r19, r1
     b76:	41 05       	cpc	r20, r1
     b78:	51 05       	cpc	r21, r1
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <usart_set_baudrate+0xa6>
     b7c:	8e c0       	rjmp	.+284    	; 0xc9a <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     b7e:	c1 2c       	mov	r12, r1
     b80:	d1 2c       	mov	r13, r1
     b82:	76 01       	movw	r14, r12
     b84:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     b86:	19 ef       	ldi	r17, 0xF9	; 249
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
     b8a:	2c 15       	cp	r18, r12
     b8c:	3d 05       	cpc	r19, r13
     b8e:	4e 05       	cpc	r20, r14
     b90:	5f 05       	cpc	r21, r15
     b92:	68 f0       	brcs	.+26     	; 0xbae <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
     b94:	cc 0c       	add	r12, r12
     b96:	dd 1c       	adc	r13, r13
     b98:	ee 1c       	adc	r14, r14
     b9a:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     b9c:	1d 3f       	cpi	r17, 0xFD	; 253
     b9e:	14 f4       	brge	.+4      	; 0xba4 <usart_set_baudrate+0xcc>
			limit |= 1;
     ba0:	68 94       	set
     ba2:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     ba4:	1f 5f       	subi	r17, 0xFF	; 255
     ba6:	17 30       	cpi	r17, 0x07	; 7
     ba8:	81 f7       	brne	.-32     	; 0xb8a <usart_set_baudrate+0xb2>
     baa:	21 2f       	mov	r18, r17
     bac:	4e c0       	rjmp	.+156    	; 0xc4a <usart_set_baudrate+0x172>
     bae:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     bb0:	11 23       	and	r17, r17
     bb2:	0c f0       	brlt	.+2      	; 0xbb6 <usart_set_baudrate+0xde>
     bb4:	4a c0       	rjmp	.+148    	; 0xc4a <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     bb6:	d5 01       	movw	r26, r10
     bb8:	c4 01       	movw	r24, r8
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	aa 1f       	adc	r26, r26
     bc0:	bb 1f       	adc	r27, r27
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	aa 1f       	adc	r26, r26
     bc8:	bb 1f       	adc	r27, r27
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	aa 1f       	adc	r26, r26
     bd0:	bb 1f       	adc	r27, r27
     bd2:	48 1a       	sub	r4, r24
     bd4:	59 0a       	sbc	r5, r25
     bd6:	6a 0a       	sbc	r6, r26
     bd8:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     bda:	1e 3f       	cpi	r17, 0xFE	; 254
     bdc:	ec f4       	brge	.+58     	; 0xc18 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     bde:	6d ef       	ldi	r22, 0xFD	; 253
     be0:	7f ef       	ldi	r23, 0xFF	; 255
     be2:	61 1b       	sub	r22, r17
     be4:	71 09       	sbc	r23, r1
     be6:	17 fd       	sbrc	r17, 7
     be8:	73 95       	inc	r23
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <usart_set_baudrate+0x11c>
     bec:	44 0c       	add	r4, r4
     bee:	55 1c       	adc	r5, r5
     bf0:	66 1c       	adc	r6, r6
     bf2:	77 1c       	adc	r7, r7
     bf4:	6a 95       	dec	r22
     bf6:	d2 f7       	brpl	.-12     	; 0xbec <usart_set_baudrate+0x114>
     bf8:	d5 01       	movw	r26, r10
     bfa:	c4 01       	movw	r24, r8
     bfc:	b6 95       	lsr	r27
     bfe:	a7 95       	ror	r26
     c00:	97 95       	ror	r25
     c02:	87 95       	ror	r24
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	64 0d       	add	r22, r4
     c0a:	75 1d       	adc	r23, r5
     c0c:	86 1d       	adc	r24, r6
     c0e:	97 1d       	adc	r25, r7
     c10:	a5 01       	movw	r20, r10
     c12:	94 01       	movw	r18, r8
     c14:	7a d2       	rcall	.+1268   	; 0x110a <__udivmodsi4>
     c16:	34 c0       	rjmp	.+104    	; 0xc80 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
     c18:	23 e0       	ldi	r18, 0x03	; 3
     c1a:	21 0f       	add	r18, r17
     c1c:	d5 01       	movw	r26, r10
     c1e:	c4 01       	movw	r24, r8
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <usart_set_baudrate+0x152>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <usart_set_baudrate+0x14a>
     c2e:	9c 01       	movw	r18, r24
     c30:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     c32:	b6 95       	lsr	r27
     c34:	a7 95       	ror	r26
     c36:	97 95       	ror	r25
     c38:	87 95       	ror	r24
     c3a:	bc 01       	movw	r22, r24
     c3c:	cd 01       	movw	r24, r26
     c3e:	64 0d       	add	r22, r4
     c40:	75 1d       	adc	r23, r5
     c42:	86 1d       	adc	r24, r6
     c44:	97 1d       	adc	r25, r7
     c46:	61 d2       	rcall	.+1218   	; 0x110a <__udivmodsi4>
     c48:	1b c0       	rjmp	.+54     	; 0xc80 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     c4a:	2d 5f       	subi	r18, 0xFD	; 253
     c4c:	d5 01       	movw	r26, r10
     c4e:	c4 01       	movw	r24, r8
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <usart_set_baudrate+0x182>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	aa 1f       	adc	r26, r26
     c58:	bb 1f       	adc	r27, r27
     c5a:	2a 95       	dec	r18
     c5c:	d2 f7       	brpl	.-12     	; 0xc52 <usart_set_baudrate+0x17a>
     c5e:	9c 01       	movw	r18, r24
     c60:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     c62:	b6 95       	lsr	r27
     c64:	a7 95       	ror	r26
     c66:	97 95       	ror	r25
     c68:	87 95       	ror	r24
     c6a:	bc 01       	movw	r22, r24
     c6c:	cd 01       	movw	r24, r26
     c6e:	64 0d       	add	r22, r4
     c70:	75 1d       	adc	r23, r5
     c72:	86 1d       	adc	r24, r6
     c74:	97 1d       	adc	r25, r7
     c76:	49 d2       	rcall	.+1170   	; 0x110a <__udivmodsi4>
     c78:	21 50       	subi	r18, 0x01	; 1
     c7a:	31 09       	sbc	r19, r1
     c7c:	41 09       	sbc	r20, r1
     c7e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     c80:	83 2f       	mov	r24, r19
     c82:	8f 70       	andi	r24, 0x0F	; 15
     c84:	12 95       	swap	r17
     c86:	10 7f       	andi	r17, 0xF0	; 240
     c88:	18 2b       	or	r17, r24
     c8a:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     c8c:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	18 c0       	rjmp	.+48     	; 0xcc2 <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	16 c0       	rjmp	.+44     	; 0xcc2 <usart_set_baudrate+0x1ea>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	14 c0       	rjmp	.+40     	; 0xcc2 <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     c9a:	d5 01       	movw	r26, r10
     c9c:	c4 01       	movw	r24, r8
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	aa 1f       	adc	r26, r26
     ca4:	bb 1f       	adc	r27, r27
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	aa 1f       	adc	r26, r26
     cac:	bb 1f       	adc	r27, r27
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	aa 1f       	adc	r26, r26
     cb4:	bb 1f       	adc	r27, r27
     cb6:	48 1a       	sub	r4, r24
     cb8:	59 0a       	sbc	r5, r25
     cba:	6a 0a       	sbc	r6, r26
     cbc:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     cbe:	19 ef       	ldi	r17, 0xF9	; 249
     cc0:	8e cf       	rjmp	.-228    	; 0xbde <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	cf 90       	pop	r12
     cd2:	bf 90       	pop	r11
     cd4:	af 90       	pop	r10
     cd6:	9f 90       	pop	r9
     cd8:	8f 90       	pop	r8
     cda:	7f 90       	pop	r7
     cdc:	6f 90       	pop	r6
     cde:	5f 90       	pop	r5
     ce0:	4f 90       	pop	r4
     ce2:	08 95       	ret

00000ce4 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
     cee:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <usart_init_rs232+0x12>
     cf4:	be c0       	rjmp	.+380    	; 0xe72 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     cf6:	80 3c       	cpi	r24, 0xC0	; 192
     cf8:	91 05       	cpc	r25, r1
     cfa:	21 f4       	brne	.+8      	; 0xd04 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     cfc:	60 e1       	ldi	r22, 0x10	; 16
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	76 d1       	rcall	.+748    	; 0xfee <sysclk_enable_module>
     d02:	b7 c0       	rjmp	.+366    	; 0xe72 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     d04:	c1 15       	cp	r28, r1
     d06:	84 e0       	ldi	r24, 0x04	; 4
     d08:	d8 07       	cpc	r29, r24
     d0a:	21 f4       	brne	.+8      	; 0xd14 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     d0c:	64 e0       	ldi	r22, 0x04	; 4
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	6e d1       	rcall	.+732    	; 0xfee <sysclk_enable_module>
     d12:	af c0       	rjmp	.+350    	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     d14:	c0 38       	cpi	r28, 0x80	; 128
     d16:	e1 e0       	ldi	r30, 0x01	; 1
     d18:	de 07       	cpc	r29, r30
     d1a:	21 f4       	brne	.+8      	; 0xd24 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     d1c:	62 e0       	ldi	r22, 0x02	; 2
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	66 d1       	rcall	.+716    	; 0xfee <sysclk_enable_module>
     d22:	a7 c0       	rjmp	.+334    	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     d24:	c1 15       	cp	r28, r1
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	df 07       	cpc	r29, r31
     d2a:	21 f4       	brne	.+8      	; 0xd34 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	5e d1       	rcall	.+700    	; 0xfee <sysclk_enable_module>
     d32:	9f c0       	rjmp	.+318    	; 0xe72 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     d34:	c0 38       	cpi	r28, 0x80	; 128
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	d8 07       	cpc	r29, r24
     d3a:	21 f4       	brne	.+8      	; 0xd44 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	56 d1       	rcall	.+684    	; 0xfee <sysclk_enable_module>
     d42:	97 c0       	rjmp	.+302    	; 0xe72 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     d44:	c1 15       	cp	r28, r1
     d46:	e2 e0       	ldi	r30, 0x02	; 2
     d48:	de 07       	cpc	r29, r30
     d4a:	21 f4       	brne	.+8      	; 0xd54 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d4c:	62 e0       	ldi	r22, 0x02	; 2
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	4e d1       	rcall	.+668    	; 0xfee <sysclk_enable_module>
     d52:	8f c0       	rjmp	.+286    	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     d54:	c0 32       	cpi	r28, 0x20	; 32
     d56:	f3 e0       	ldi	r31, 0x03	; 3
     d58:	df 07       	cpc	r29, r31
     d5a:	21 f4       	brne	.+8      	; 0xd64 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     d5c:	64 e0       	ldi	r22, 0x04	; 4
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	46 d1       	rcall	.+652    	; 0xfee <sysclk_enable_module>
     d62:	87 c0       	rjmp	.+270    	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     d64:	c1 15       	cp	r28, r1
     d66:	88 e0       	ldi	r24, 0x08	; 8
     d68:	d8 07       	cpc	r29, r24
     d6a:	21 f4       	brne	.+8      	; 0xd74 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	3e d1       	rcall	.+636    	; 0xfee <sysclk_enable_module>
     d72:	7f c0       	rjmp	.+254    	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     d74:	c1 15       	cp	r28, r1
     d76:	e9 e0       	ldi	r30, 0x09	; 9
     d78:	de 07       	cpc	r29, r30
     d7a:	21 f4       	brne	.+8      	; 0xd84 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	36 d1       	rcall	.+620    	; 0xfee <sysclk_enable_module>
     d82:	77 c0       	rjmp	.+238    	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     d84:	c1 15       	cp	r28, r1
     d86:	fa e0       	ldi	r31, 0x0A	; 10
     d88:	df 07       	cpc	r29, r31
     d8a:	21 f4       	brne	.+8      	; 0xd94 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	85 e0       	ldi	r24, 0x05	; 5
     d90:	2e d1       	rcall	.+604    	; 0xfee <sysclk_enable_module>
     d92:	6f c0       	rjmp	.+222    	; 0xe72 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     d94:	c0 34       	cpi	r28, 0x40	; 64
     d96:	88 e0       	ldi	r24, 0x08	; 8
     d98:	d8 07       	cpc	r29, r24
     d9a:	21 f4       	brne	.+8      	; 0xda4 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     d9c:	62 e0       	ldi	r22, 0x02	; 2
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	26 d1       	rcall	.+588    	; 0xfee <sysclk_enable_module>
     da2:	67 c0       	rjmp	.+206    	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     da4:	c0 34       	cpi	r28, 0x40	; 64
     da6:	e9 e0       	ldi	r30, 0x09	; 9
     da8:	de 07       	cpc	r29, r30
     daa:	21 f4       	brne	.+8      	; 0xdb4 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     dac:	62 e0       	ldi	r22, 0x02	; 2
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	1e d1       	rcall	.+572    	; 0xfee <sysclk_enable_module>
     db2:	5f c0       	rjmp	.+190    	; 0xe72 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     db4:	c0 39       	cpi	r28, 0x90	; 144
     db6:	f8 e0       	ldi	r31, 0x08	; 8
     db8:	df 07       	cpc	r29, r31
     dba:	21 f4       	brne	.+8      	; 0xdc4 <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     dbc:	64 e0       	ldi	r22, 0x04	; 4
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	16 d1       	rcall	.+556    	; 0xfee <sysclk_enable_module>
     dc2:	57 c0       	rjmp	.+174    	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     dc4:	c0 39       	cpi	r28, 0x90	; 144
     dc6:	89 e0       	ldi	r24, 0x09	; 9
     dc8:	d8 07       	cpc	r29, r24
     dca:	21 f4       	brne	.+8      	; 0xdd4 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     dcc:	64 e0       	ldi	r22, 0x04	; 4
     dce:	84 e0       	ldi	r24, 0x04	; 4
     dd0:	0e d1       	rcall	.+540    	; 0xfee <sysclk_enable_module>
     dd2:	4f c0       	rjmp	.+158    	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     dd4:	c0 39       	cpi	r28, 0x90	; 144
     dd6:	ea e0       	ldi	r30, 0x0A	; 10
     dd8:	de 07       	cpc	r29, r30
     dda:	21 f4       	brne	.+8      	; 0xde4 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     ddc:	64 e0       	ldi	r22, 0x04	; 4
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	06 d1       	rcall	.+524    	; 0xfee <sysclk_enable_module>
     de2:	47 c0       	rjmp	.+142    	; 0xe72 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     de4:	c0 3c       	cpi	r28, 0xC0	; 192
     de6:	f8 e0       	ldi	r31, 0x08	; 8
     de8:	df 07       	cpc	r29, r31
     dea:	21 f4       	brne	.+8      	; 0xdf4 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     dec:	68 e0       	ldi	r22, 0x08	; 8
     dee:	83 e0       	ldi	r24, 0x03	; 3
     df0:	fe d0       	rcall	.+508    	; 0xfee <sysclk_enable_module>
     df2:	3f c0       	rjmp	.+126    	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     df4:	c0 3c       	cpi	r28, 0xC0	; 192
     df6:	89 e0       	ldi	r24, 0x09	; 9
     df8:	d8 07       	cpc	r29, r24
     dfa:	21 f4       	brne	.+8      	; 0xe04 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     dfc:	68 e0       	ldi	r22, 0x08	; 8
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	f6 d0       	rcall	.+492    	; 0xfee <sysclk_enable_module>
     e02:	37 c0       	rjmp	.+110    	; 0xe72 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     e04:	c0 3a       	cpi	r28, 0xA0	; 160
     e06:	e8 e0       	ldi	r30, 0x08	; 8
     e08:	de 07       	cpc	r29, r30
     e0a:	21 f4       	brne	.+8      	; 0xe14 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     e0c:	60 e1       	ldi	r22, 0x10	; 16
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	ee d0       	rcall	.+476    	; 0xfee <sysclk_enable_module>
     e12:	2f c0       	rjmp	.+94     	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     e14:	c0 3a       	cpi	r28, 0xA0	; 160
     e16:	f9 e0       	ldi	r31, 0x09	; 9
     e18:	df 07       	cpc	r29, r31
     e1a:	21 f4       	brne	.+8      	; 0xe24 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     e1c:	60 e1       	ldi	r22, 0x10	; 16
     e1e:	84 e0       	ldi	r24, 0x04	; 4
     e20:	e6 d0       	rcall	.+460    	; 0xfee <sysclk_enable_module>
     e22:	27 c0       	rjmp	.+78     	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     e24:	c0 3a       	cpi	r28, 0xA0	; 160
     e26:	8a e0       	ldi	r24, 0x0A	; 10
     e28:	d8 07       	cpc	r29, r24
     e2a:	21 f4       	brne	.+8      	; 0xe34 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     e2c:	60 e1       	ldi	r22, 0x10	; 16
     e2e:	85 e0       	ldi	r24, 0x05	; 5
     e30:	de d0       	rcall	.+444    	; 0xfee <sysclk_enable_module>
     e32:	1f c0       	rjmp	.+62     	; 0xe72 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     e34:	c0 3b       	cpi	r28, 0xB0	; 176
     e36:	e8 e0       	ldi	r30, 0x08	; 8
     e38:	de 07       	cpc	r29, r30
     e3a:	21 f4       	brne	.+8      	; 0xe44 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     e3c:	60 e2       	ldi	r22, 0x20	; 32
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	d6 d0       	rcall	.+428    	; 0xfee <sysclk_enable_module>
     e42:	17 c0       	rjmp	.+46     	; 0xe72 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     e44:	c0 3b       	cpi	r28, 0xB0	; 176
     e46:	f9 e0       	ldi	r31, 0x09	; 9
     e48:	df 07       	cpc	r29, r31
     e4a:	21 f4       	brne	.+8      	; 0xe54 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     e4c:	60 e2       	ldi	r22, 0x20	; 32
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	ce d0       	rcall	.+412    	; 0xfee <sysclk_enable_module>
     e52:	0f c0       	rjmp	.+30     	; 0xe72 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     e54:	c0 38       	cpi	r28, 0x80	; 128
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	d8 07       	cpc	r29, r24
     e5a:	21 f4       	brne	.+8      	; 0xe64 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     e5c:	60 e4       	ldi	r22, 0x40	; 64
     e5e:	83 e0       	ldi	r24, 0x03	; 3
     e60:	c6 d0       	rcall	.+396    	; 0xfee <sysclk_enable_module>
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     e64:	c0 3a       	cpi	r28, 0xA0	; 160
     e66:	e4 e0       	ldi	r30, 0x04	; 4
     e68:	de 07       	cpc	r29, r30
     e6a:	19 f4       	brne	.+6      	; 0xe72 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     e6c:	60 e4       	ldi	r22, 0x40	; 64
     e6e:	85 e0       	ldi	r24, 0x05	; 5
     e70:	be d0       	rcall	.+380    	; 0xfee <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	8f 73       	andi	r24, 0x3F	; 63
     e76:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     e78:	f8 01       	movw	r30, r16
     e7a:	94 81       	ldd	r25, Z+4	; 0x04
     e7c:	85 81       	ldd	r24, Z+5	; 0x05
     e7e:	89 2b       	or	r24, r25
     e80:	96 81       	ldd	r25, Z+6	; 0x06
     e82:	99 23       	and	r25, r25
     e84:	11 f0       	breq	.+4      	; 0xe8a <usart_init_rs232+0x1a6>
     e86:	98 e0       	ldi	r25, 0x08	; 8
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <usart_init_rs232+0x1a8>
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	89 2b       	or	r24, r25
     e8e:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     e90:	f8 01       	movw	r30, r16
     e92:	40 81       	ld	r20, Z
     e94:	51 81       	ldd	r21, Z+1	; 0x01
     e96:	62 81       	ldd	r22, Z+2	; 0x02
     e98:	73 81       	ldd	r23, Z+3	; 0x03
     e9a:	00 e0       	ldi	r16, 0x00	; 0
     e9c:	16 e3       	ldi	r17, 0x36	; 54
     e9e:	2e e6       	ldi	r18, 0x6E	; 110
     ea0:	31 e0       	ldi	r19, 0x01	; 1
     ea2:	ce 01       	movw	r24, r28
     ea4:	19 de       	rcall	.-974    	; 0xad8 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	98 60       	ori	r25, 0x08	; 8
     eaa:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	90 61       	ori	r25, 0x10	; 16
     eb0:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     ebc:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     ebe:	80 91 46 20 	lds	r24, 0x2046
     ec2:	90 91 47 20 	lds	r25, 0x2047
     ec6:	e0 91 44 20 	lds	r30, 0x2044
     eca:	f0 91 45 20 	lds	r31, 0x2045
     ece:	09 95       	icall
     ed0:	99 23       	and	r25, r25
     ed2:	1c f4       	brge	.+6      	; 0xeda <_write+0x1e>
		return -1;
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	9f ef       	ldi	r25, 0xFF	; 255
     ed8:	08 95       	ret
	}
	return 1;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
}
     ede:	08 95       	ret

00000ee0 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	7c 01       	movw	r14, r24
     eee:	8b 01       	movw	r16, r22
     ef0:	ea 01       	movw	r28, r20
	while (len) {
     ef2:	20 97       	sbiw	r28, 0x00	; 0
     ef4:	41 f0       	breq	.+16     	; 0xf06 <usart_serial_write_packet+0x26>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     ef6:	f8 01       	movw	r30, r16
     ef8:	61 91       	ld	r22, Z+
     efa:	8f 01       	movw	r16, r30
     efc:	c7 01       	movw	r24, r14
     efe:	de dd       	rcall	.-1092   	; 0xabc <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     f00:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     f02:	20 97       	sbiw	r28, 0x00	; 0
     f04:	c1 f7       	brne	.-16     	; 0xef6 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	08 95       	ret

00000f16 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <sysclk_init+0x6>
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <sysclk_init+0x8>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	80 93 70 00 	sts	0x0070, r24
     f28:	80 93 71 00 	sts	0x0071, r24
     f2c:	80 93 72 00 	sts	0x0072, r24
     f30:	80 93 73 00 	sts	0x0073, r24
     f34:	80 93 74 00 	sts	0x0074, r24
     f38:	80 93 75 00 	sts	0x0075, r24
     f3c:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     f40:	64 e0       	ldi	r22, 0x04	; 4
     f42:	81 e4       	ldi	r24, 0x41	; 65
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	69 d0       	rcall	.+210    	; 0x101a <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     f48:	6c e1       	ldi	r22, 0x1C	; 28
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	5b d0       	rcall	.+182    	; 0x1006 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	6d e1       	ldi	r22, 0x1D	; 29
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	56 d0       	rcall	.+172    	; 0x1006 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
     f5a:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	21 f4       	brne	.+8      	; 0xf6c <sysclk_init+0x56>
		cal = 0x2340;
     f64:	80 e4       	ldi	r24, 0x40	; 64
     f66:	93 e2       	ldi	r25, 0x23	; 35
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	8b 83       	std	Y+3, r24	; 0x03
     f72:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
     f74:	e0 e6       	ldi	r30, 0x60	; 96
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f7e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     f80:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f82:	e0 e5       	ldi	r30, 0x50	; 80
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	90 81       	ld	r25, Z
     f88:	92 60       	ori	r25, 0x02	; 2
     f8a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f8c:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f8e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f90:	81 ff       	sbrs	r24, 1
     f92:	fd cf       	rjmp	.-6      	; 0xf8e <sysclk_init+0x78>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f94:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     f96:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     f98:	a0 e5       	ldi	r26, 0x50	; 80
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	16 96       	adiw	r26, 0x06	; 6
     f9e:	9c 91       	ld	r25, X
     fa0:	16 97       	sbiw	r26, 0x06	; 6
     fa2:	99 7f       	andi	r25, 0xF9	; 249
     fa4:	16 96       	adiw	r26, 0x06	; 6
     fa6:	9c 93       	st	X, r25
     fa8:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     faa:	e0 e6       	ldi	r30, 0x60	; 96
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	90 e8       	ldi	r25, 0x80	; 128
     fb0:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     fb2:	9b eb       	ldi	r25, 0xBB	; 187
     fb4:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     fb6:	16 96       	adiw	r26, 0x06	; 6
     fb8:	9c 91       	ld	r25, X
     fba:	16 97       	sbiw	r26, 0x06	; 6
     fbc:	94 60       	ori	r25, 0x04	; 4
     fbe:	16 96       	adiw	r26, 0x06	; 6
     fc0:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     fc2:	90 81       	ld	r25, Z
     fc4:	91 60       	ori	r25, 0x01	; 1
     fc6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fc8:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	80 e4       	ldi	r24, 0x40	; 64
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	24 d0       	rcall	.+72     	; 0x101a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     fd2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     fd4:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     fd6:	e0 e5       	ldi	r30, 0x50	; 80
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	90 81       	ld	r25, Z
     fdc:	9e 7f       	andi	r25, 0xFE	; 254
     fde:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fe0:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     fe2:	24 96       	adiw	r28, 0x04	; 4
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     fee:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     ff0:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     ff2:	e8 2f       	mov	r30, r24
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	e0 59       	subi	r30, 0x90	; 144
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	60 95       	com	r22
     ffc:	80 81       	ld	r24, Z
     ffe:	68 23       	and	r22, r24
    1000:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1002:	9f bf       	out	0x3f, r25	; 63
    1004:	08 95       	ret

00001006 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1006:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    100a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    100c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    100e:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1012:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1014:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1018:	08 95       	ret

0000101a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    101a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    101c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    101e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1020:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1022:	60 83       	st	Z, r22
	ret                             // Return to caller
    1024:	08 95       	ret

00001026 <usart_serial_putchar>:
    1026:	4a cd       	rjmp	.-1388   	; 0xabc <usart_putchar>
}
    1028:	08 95       	ret

0000102a <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1030:	4d dd       	rcall	.-1382   	; 0xacc <usart_getchar>
    1032:	88 83       	st	Y, r24
}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <main>:
 {
 usart_serial_write_packet(&USARTD0, probe, SAMPLES_NR);
 }*/
 uint16_t counter;
 uint8_t licznik_modulo;
int main (void) {
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	29 97       	sbiw	r28, 0x09	; 9
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	de bf       	out	0x3e, r29	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1048:	87 e0       	ldi	r24, 0x07	; 7
    104a:	e0 ea       	ldi	r30, 0xA0	; 160
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	82 83       	std	Z+2, r24	; 0x02

	pmic_init();
	sysclk_init();
    1050:	62 df       	rcall	.-316    	; 0xf16 <sysclk_init>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1052:	80 ea       	ldi	r24, 0xA0	; 160
    1054:	99 e0       	ldi	r25, 0x09	; 9
    1056:	80 93 46 20 	sts	0x2046, r24
    105a:	90 93 47 20 	sts	0x2047, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    105e:	83 e1       	ldi	r24, 0x13	; 19
    1060:	98 e0       	ldi	r25, 0x08	; 8
    1062:	80 93 44 20 	sts	0x2044, r24
    1066:	90 93 45 20 	sts	0x2045, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    106a:	85 e1       	ldi	r24, 0x15	; 21
    106c:	98 e0       	ldi	r25, 0x08	; 8
    106e:	80 93 42 20 	sts	0x2042, r24
    1072:	90 93 43 20 	sts	0x2043, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1076:	80 91 0a 20 	lds	r24, 0x200A
    107a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.paritytype   = options->paritytype;
    107c:	80 91 0b 20 	lds	r24, 0x200B
    1080:	88 87       	std	Y+8, r24	; 0x08
	usart_rs232_options.stopbits     = options->stopbits;
    1082:	80 91 0c 20 	lds	r24, 0x200C
    1086:	89 87       	std	Y+9, r24	; 0x09
	usart_rs232_options.baudrate     = options->baudrate;
    1088:	80 91 06 20 	lds	r24, 0x2006
    108c:	90 91 07 20 	lds	r25, 0x2007
    1090:	a0 91 08 20 	lds	r26, 0x2008
    1094:	b0 91 09 20 	lds	r27, 0x2009
    1098:	8b 83       	std	Y+3, r24	; 0x03
    109a:	9c 83       	std	Y+4, r25	; 0x04
    109c:	ad 83       	std	Y+5, r26	; 0x05
    109e:	be 83       	std	Y+6, r27	; 0x06
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    10a0:	60 e1       	ldi	r22, 0x10	; 16
    10a2:	84 e0       	ldi	r24, 0x04	; 4
    10a4:	a4 df       	rcall	.-184    	; 0xfee <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    10a6:	be 01       	movw	r22, r28
    10a8:	6d 5f       	subi	r22, 0xFD	; 253
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	80 ea       	ldi	r24, 0xA0	; 160
    10ae:	99 e0       	ldi	r25, 0x09	; 9
    10b0:	19 de       	rcall	.-974    	; 0xce4 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    10b2:	6b e1       	ldi	r22, 0x1B	; 27
    10b4:	71 e0       	ldi	r23, 0x01	; 1
    10b6:	8e e5       	ldi	r24, 0x5E	; 94
    10b8:	97 e0       	ldi	r25, 0x07	; 7
    10ba:	49 d0       	rcall	.+146    	; 0x114e <fdevopen>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    10bc:	88 e0       	ldi	r24, 0x08	; 8
    10be:	e0 e6       	ldi	r30, 0x60	; 96
    10c0:	f6 e0       	ldi	r31, 0x06	; 6
    10c2:	81 83       	std	Z+1, r24	; 0x01
    10c4:	30 91 18 28 	lds	r19, 0x2818
    10c8:	e8 e4       	ldi	r30, 0x48	; 72
    10ca:	f0 e2       	ldi	r31, 0x20	; 32
    10cc:	88 e1       	ldi	r24, 0x18	; 24
    10ce:	98 e2       	ldi	r25, 0x28	; 40
    10d0:	23 2f       	mov	r18, r19
		{
			probe[counter] = (uint8_t)OFFSET + AMP_MVOLT*sin(counter*2.0*PI/T);
		}*/
		for(counter=0;counter<SAMPLES_NR;counter++)
		{
			probe[counter] = licznik_modulo++;
    10d2:	21 93       	st	Z+, r18
    10d4:	2f 5f       	subi	r18, 0xFF	; 255
*/	
		/*for(counter=0;counter<SAMPLES_NR;counter++)
		{
			probe[counter] = (uint8_t)OFFSET + AMP_MVOLT*sin(counter*2.0*PI/T);
		}*/
		for(counter=0;counter<SAMPLES_NR;counter++)
    10d6:	e8 17       	cp	r30, r24
    10d8:	f9 07       	cpc	r31, r25
    10da:	d9 f7       	brne	.-10     	; 0x10d2 <main+0x98>
    10dc:	30 53       	subi	r19, 0x30	; 48
    10de:	30 93 18 28 	sts	0x2818, r19
    10e2:	80 ed       	ldi	r24, 0xD0	; 208
    10e4:	97 e0       	ldi	r25, 0x07	; 7
    10e6:	80 93 19 28 	sts	0x2819, r24
    10ea:	90 93 1a 28 	sts	0x281A, r25
		{
			probe[counter] = licznik_modulo++;
		}
	unsigned int c = 0;
    10ee:	19 82       	std	Y+1, r1	; 0x01
    10f0:	1a 82       	std	Y+2, r1	; 0x02
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
    10f2:	80 ea       	ldi	r24, 0xA0	; 160
    10f4:	99 e0       	ldi	r25, 0x09	; 9
    10f6:	ea dc       	rcall	.-1580   	; 0xacc <usart_getchar>
    10f8:	89 83       	std	Y+1, r24	; 0x01
	while(1) {	
		usart_serial_getchar(&USARTD0,&c);
		usart_serial_write_packet(&USARTD0, probe, SAMPLES_NR);	
    10fa:	40 ed       	ldi	r20, 0xD0	; 208
    10fc:	57 e0       	ldi	r21, 0x07	; 7
    10fe:	68 e4       	ldi	r22, 0x48	; 72
    1100:	70 e2       	ldi	r23, 0x20	; 32
    1102:	80 ea       	ldi	r24, 0xA0	; 160
    1104:	99 e0       	ldi	r25, 0x09	; 9
    1106:	ec de       	rcall	.-552    	; 0xee0 <usart_serial_write_packet>
    1108:	f4 cf       	rjmp	.-24     	; 0x10f2 <main+0xb8>

0000110a <__udivmodsi4>:
    110a:	a1 e2       	ldi	r26, 0x21	; 33
    110c:	1a 2e       	mov	r1, r26
    110e:	aa 1b       	sub	r26, r26
    1110:	bb 1b       	sub	r27, r27
    1112:	fd 01       	movw	r30, r26
    1114:	0d c0       	rjmp	.+26     	; 0x1130 <__udivmodsi4_ep>

00001116 <__udivmodsi4_loop>:
    1116:	aa 1f       	adc	r26, r26
    1118:	bb 1f       	adc	r27, r27
    111a:	ee 1f       	adc	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	a2 17       	cp	r26, r18
    1120:	b3 07       	cpc	r27, r19
    1122:	e4 07       	cpc	r30, r20
    1124:	f5 07       	cpc	r31, r21
    1126:	20 f0       	brcs	.+8      	; 0x1130 <__udivmodsi4_ep>
    1128:	a2 1b       	sub	r26, r18
    112a:	b3 0b       	sbc	r27, r19
    112c:	e4 0b       	sbc	r30, r20
    112e:	f5 0b       	sbc	r31, r21

00001130 <__udivmodsi4_ep>:
    1130:	66 1f       	adc	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	88 1f       	adc	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	1a 94       	dec	r1
    113a:	69 f7       	brne	.-38     	; 0x1116 <__udivmodsi4_loop>
    113c:	60 95       	com	r22
    113e:	70 95       	com	r23
    1140:	80 95       	com	r24
    1142:	90 95       	com	r25
    1144:	9b 01       	movw	r18, r22
    1146:	ac 01       	movw	r20, r24
    1148:	bd 01       	movw	r22, r26
    114a:	cf 01       	movw	r24, r30
    114c:	08 95       	ret

0000114e <fdevopen>:
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	8b 01       	movw	r16, r22
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	31 f4       	brne	.+12     	; 0x116a <fdevopen+0x1c>
    115e:	61 15       	cp	r22, r1
    1160:	71 05       	cpc	r23, r1
    1162:	19 f4       	brne	.+6      	; 0x116a <fdevopen+0x1c>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	37 c0       	rjmp	.+110    	; 0x11d8 <fdevopen+0x8a>
    116a:	6e e0       	ldi	r22, 0x0E	; 14
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	37 d0       	rcall	.+110    	; 0x11e2 <calloc>
    1174:	fc 01       	movw	r30, r24
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	a9 f3       	breq	.-22     	; 0x1164 <fdevopen+0x16>
    117a:	80 e8       	ldi	r24, 0x80	; 128
    117c:	83 83       	std	Z+3, r24	; 0x03
    117e:	01 15       	cp	r16, r1
    1180:	11 05       	cpc	r17, r1
    1182:	71 f0       	breq	.+28     	; 0x11a0 <fdevopen+0x52>
    1184:	02 87       	std	Z+10, r16	; 0x0a
    1186:	13 87       	std	Z+11, r17	; 0x0b
    1188:	81 e8       	ldi	r24, 0x81	; 129
    118a:	83 83       	std	Z+3, r24	; 0x03
    118c:	80 91 1b 28 	lds	r24, 0x281B
    1190:	90 91 1c 28 	lds	r25, 0x281C
    1194:	89 2b       	or	r24, r25
    1196:	21 f4       	brne	.+8      	; 0x11a0 <fdevopen+0x52>
    1198:	e0 93 1b 28 	sts	0x281B, r30
    119c:	f0 93 1c 28 	sts	0x281C, r31
    11a0:	20 97       	sbiw	r28, 0x00	; 0
    11a2:	c9 f0       	breq	.+50     	; 0x11d6 <fdevopen+0x88>
    11a4:	c0 87       	std	Z+8, r28	; 0x08
    11a6:	d1 87       	std	Z+9, r29	; 0x09
    11a8:	83 81       	ldd	r24, Z+3	; 0x03
    11aa:	82 60       	ori	r24, 0x02	; 2
    11ac:	83 83       	std	Z+3, r24	; 0x03
    11ae:	80 91 1d 28 	lds	r24, 0x281D
    11b2:	90 91 1e 28 	lds	r25, 0x281E
    11b6:	89 2b       	or	r24, r25
    11b8:	71 f4       	brne	.+28     	; 0x11d6 <fdevopen+0x88>
    11ba:	e0 93 1d 28 	sts	0x281D, r30
    11be:	f0 93 1e 28 	sts	0x281E, r31
    11c2:	80 91 1f 28 	lds	r24, 0x281F
    11c6:	90 91 20 28 	lds	r25, 0x2820
    11ca:	89 2b       	or	r24, r25
    11cc:	21 f4       	brne	.+8      	; 0x11d6 <fdevopen+0x88>
    11ce:	e0 93 1f 28 	sts	0x281F, r30
    11d2:	f0 93 20 28 	sts	0x2820, r31
    11d6:	cf 01       	movw	r24, r30
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	08 95       	ret

000011e2 <calloc>:
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	86 9f       	mul	r24, r22
    11ec:	80 01       	movw	r16, r0
    11ee:	87 9f       	mul	r24, r23
    11f0:	10 0d       	add	r17, r0
    11f2:	96 9f       	mul	r25, r22
    11f4:	10 0d       	add	r17, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	c8 01       	movw	r24, r16
    11fa:	0d d0       	rcall	.+26     	; 0x1216 <malloc>
    11fc:	ec 01       	movw	r28, r24
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	21 f0       	breq	.+8      	; 0x120a <calloc+0x28>
    1202:	a8 01       	movw	r20, r16
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	2d d1       	rcall	.+602    	; 0x1464 <memset>
    120a:	ce 01       	movw	r24, r28
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	08 95       	ret

00001216 <malloc>:
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	82 30       	cpi	r24, 0x02	; 2
    121c:	91 05       	cpc	r25, r1
    121e:	10 f4       	brcc	.+4      	; 0x1224 <malloc+0xe>
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	e0 91 23 28 	lds	r30, 0x2823
    1228:	f0 91 24 28 	lds	r31, 0x2824
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	a0 e0       	ldi	r26, 0x00	; 0
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	39 f1       	breq	.+78     	; 0x1286 <malloc+0x70>
    1238:	40 81       	ld	r20, Z
    123a:	51 81       	ldd	r21, Z+1	; 0x01
    123c:	48 17       	cp	r20, r24
    123e:	59 07       	cpc	r21, r25
    1240:	b8 f0       	brcs	.+46     	; 0x1270 <malloc+0x5a>
    1242:	48 17       	cp	r20, r24
    1244:	59 07       	cpc	r21, r25
    1246:	71 f4       	brne	.+28     	; 0x1264 <malloc+0x4e>
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	10 97       	sbiw	r26, 0x00	; 0
    124e:	29 f0       	breq	.+10     	; 0x125a <malloc+0x44>
    1250:	12 96       	adiw	r26, 0x02	; 2
    1252:	8d 93       	st	X+, r24
    1254:	9c 93       	st	X, r25
    1256:	13 97       	sbiw	r26, 0x03	; 3
    1258:	2c c0       	rjmp	.+88     	; 0x12b2 <malloc+0x9c>
    125a:	80 93 23 28 	sts	0x2823, r24
    125e:	90 93 24 28 	sts	0x2824, r25
    1262:	27 c0       	rjmp	.+78     	; 0x12b2 <malloc+0x9c>
    1264:	21 15       	cp	r18, r1
    1266:	31 05       	cpc	r19, r1
    1268:	31 f0       	breq	.+12     	; 0x1276 <malloc+0x60>
    126a:	42 17       	cp	r20, r18
    126c:	53 07       	cpc	r21, r19
    126e:	18 f0       	brcs	.+6      	; 0x1276 <malloc+0x60>
    1270:	a9 01       	movw	r20, r18
    1272:	db 01       	movw	r26, r22
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <malloc+0x62>
    1276:	ef 01       	movw	r28, r30
    1278:	9a 01       	movw	r18, r20
    127a:	bd 01       	movw	r22, r26
    127c:	df 01       	movw	r26, r30
    127e:	02 80       	ldd	r0, Z+2	; 0x02
    1280:	f3 81       	ldd	r31, Z+3	; 0x03
    1282:	e0 2d       	mov	r30, r0
    1284:	d7 cf       	rjmp	.-82     	; 0x1234 <malloc+0x1e>
    1286:	21 15       	cp	r18, r1
    1288:	31 05       	cpc	r19, r1
    128a:	f9 f0       	breq	.+62     	; 0x12ca <malloc+0xb4>
    128c:	28 1b       	sub	r18, r24
    128e:	39 0b       	sbc	r19, r25
    1290:	24 30       	cpi	r18, 0x04	; 4
    1292:	31 05       	cpc	r19, r1
    1294:	80 f4       	brcc	.+32     	; 0x12b6 <malloc+0xa0>
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	61 15       	cp	r22, r1
    129c:	71 05       	cpc	r23, r1
    129e:	21 f0       	breq	.+8      	; 0x12a8 <malloc+0x92>
    12a0:	fb 01       	movw	r30, r22
    12a2:	82 83       	std	Z+2, r24	; 0x02
    12a4:	93 83       	std	Z+3, r25	; 0x03
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <malloc+0x9a>
    12a8:	80 93 23 28 	sts	0x2823, r24
    12ac:	90 93 24 28 	sts	0x2824, r25
    12b0:	fe 01       	movw	r30, r28
    12b2:	32 96       	adiw	r30, 0x02	; 2
    12b4:	44 c0       	rjmp	.+136    	; 0x133e <malloc+0x128>
    12b6:	fe 01       	movw	r30, r28
    12b8:	e2 0f       	add	r30, r18
    12ba:	f3 1f       	adc	r31, r19
    12bc:	81 93       	st	Z+, r24
    12be:	91 93       	st	Z+, r25
    12c0:	22 50       	subi	r18, 0x02	; 2
    12c2:	31 09       	sbc	r19, r1
    12c4:	28 83       	st	Y, r18
    12c6:	39 83       	std	Y+1, r19	; 0x01
    12c8:	3a c0       	rjmp	.+116    	; 0x133e <malloc+0x128>
    12ca:	20 91 21 28 	lds	r18, 0x2821
    12ce:	30 91 22 28 	lds	r19, 0x2822
    12d2:	23 2b       	or	r18, r19
    12d4:	41 f4       	brne	.+16     	; 0x12e6 <malloc+0xd0>
    12d6:	20 91 02 20 	lds	r18, 0x2002
    12da:	30 91 03 20 	lds	r19, 0x2003
    12de:	20 93 21 28 	sts	0x2821, r18
    12e2:	30 93 22 28 	sts	0x2822, r19
    12e6:	20 91 00 20 	lds	r18, 0x2000
    12ea:	30 91 01 20 	lds	r19, 0x2001
    12ee:	21 15       	cp	r18, r1
    12f0:	31 05       	cpc	r19, r1
    12f2:	41 f4       	brne	.+16     	; 0x1304 <malloc+0xee>
    12f4:	2d b7       	in	r18, 0x3d	; 61
    12f6:	3e b7       	in	r19, 0x3e	; 62
    12f8:	40 91 04 20 	lds	r20, 0x2004
    12fc:	50 91 05 20 	lds	r21, 0x2005
    1300:	24 1b       	sub	r18, r20
    1302:	35 0b       	sbc	r19, r21
    1304:	e0 91 21 28 	lds	r30, 0x2821
    1308:	f0 91 22 28 	lds	r31, 0x2822
    130c:	e2 17       	cp	r30, r18
    130e:	f3 07       	cpc	r31, r19
    1310:	a0 f4       	brcc	.+40     	; 0x133a <malloc+0x124>
    1312:	2e 1b       	sub	r18, r30
    1314:	3f 0b       	sbc	r19, r31
    1316:	28 17       	cp	r18, r24
    1318:	39 07       	cpc	r19, r25
    131a:	78 f0       	brcs	.+30     	; 0x133a <malloc+0x124>
    131c:	ac 01       	movw	r20, r24
    131e:	4e 5f       	subi	r20, 0xFE	; 254
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	24 17       	cp	r18, r20
    1324:	35 07       	cpc	r19, r21
    1326:	48 f0       	brcs	.+18     	; 0x133a <malloc+0x124>
    1328:	4e 0f       	add	r20, r30
    132a:	5f 1f       	adc	r21, r31
    132c:	40 93 21 28 	sts	0x2821, r20
    1330:	50 93 22 28 	sts	0x2822, r21
    1334:	81 93       	st	Z+, r24
    1336:	91 93       	st	Z+, r25
    1338:	02 c0       	rjmp	.+4      	; 0x133e <malloc+0x128>
    133a:	e0 e0       	ldi	r30, 0x00	; 0
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	cf 01       	movw	r24, r30
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <free>:
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	09 f4       	brne	.+2      	; 0x1350 <free+0xa>
    134e:	87 c0       	rjmp	.+270    	; 0x145e <free+0x118>
    1350:	fc 01       	movw	r30, r24
    1352:	32 97       	sbiw	r30, 0x02	; 2
    1354:	12 82       	std	Z+2, r1	; 0x02
    1356:	13 82       	std	Z+3, r1	; 0x03
    1358:	c0 91 23 28 	lds	r28, 0x2823
    135c:	d0 91 24 28 	lds	r29, 0x2824
    1360:	20 97       	sbiw	r28, 0x00	; 0
    1362:	81 f4       	brne	.+32     	; 0x1384 <free+0x3e>
    1364:	20 81       	ld	r18, Z
    1366:	31 81       	ldd	r19, Z+1	; 0x01
    1368:	28 0f       	add	r18, r24
    136a:	39 1f       	adc	r19, r25
    136c:	80 91 21 28 	lds	r24, 0x2821
    1370:	90 91 22 28 	lds	r25, 0x2822
    1374:	82 17       	cp	r24, r18
    1376:	93 07       	cpc	r25, r19
    1378:	79 f5       	brne	.+94     	; 0x13d8 <free+0x92>
    137a:	e0 93 21 28 	sts	0x2821, r30
    137e:	f0 93 22 28 	sts	0x2822, r31
    1382:	6d c0       	rjmp	.+218    	; 0x145e <free+0x118>
    1384:	de 01       	movw	r26, r28
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	ae 17       	cp	r26, r30
    138c:	bf 07       	cpc	r27, r31
    138e:	50 f4       	brcc	.+20     	; 0x13a4 <free+0x5e>
    1390:	12 96       	adiw	r26, 0x02	; 2
    1392:	4d 91       	ld	r20, X+
    1394:	5c 91       	ld	r21, X
    1396:	13 97       	sbiw	r26, 0x03	; 3
    1398:	9d 01       	movw	r18, r26
    139a:	41 15       	cp	r20, r1
    139c:	51 05       	cpc	r21, r1
    139e:	09 f1       	breq	.+66     	; 0x13e2 <free+0x9c>
    13a0:	da 01       	movw	r26, r20
    13a2:	f3 cf       	rjmp	.-26     	; 0x138a <free+0x44>
    13a4:	a2 83       	std	Z+2, r26	; 0x02
    13a6:	b3 83       	std	Z+3, r27	; 0x03
    13a8:	40 81       	ld	r20, Z
    13aa:	51 81       	ldd	r21, Z+1	; 0x01
    13ac:	84 0f       	add	r24, r20
    13ae:	95 1f       	adc	r25, r21
    13b0:	8a 17       	cp	r24, r26
    13b2:	9b 07       	cpc	r25, r27
    13b4:	71 f4       	brne	.+28     	; 0x13d2 <free+0x8c>
    13b6:	8d 91       	ld	r24, X+
    13b8:	9c 91       	ld	r25, X
    13ba:	11 97       	sbiw	r26, 0x01	; 1
    13bc:	84 0f       	add	r24, r20
    13be:	95 1f       	adc	r25, r21
    13c0:	02 96       	adiw	r24, 0x02	; 2
    13c2:	80 83       	st	Z, r24
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	12 96       	adiw	r26, 0x02	; 2
    13c8:	8d 91       	ld	r24, X+
    13ca:	9c 91       	ld	r25, X
    13cc:	13 97       	sbiw	r26, 0x03	; 3
    13ce:	82 83       	std	Z+2, r24	; 0x02
    13d0:	93 83       	std	Z+3, r25	; 0x03
    13d2:	21 15       	cp	r18, r1
    13d4:	31 05       	cpc	r19, r1
    13d6:	29 f4       	brne	.+10     	; 0x13e2 <free+0x9c>
    13d8:	e0 93 23 28 	sts	0x2823, r30
    13dc:	f0 93 24 28 	sts	0x2824, r31
    13e0:	3e c0       	rjmp	.+124    	; 0x145e <free+0x118>
    13e2:	d9 01       	movw	r26, r18
    13e4:	12 96       	adiw	r26, 0x02	; 2
    13e6:	ed 93       	st	X+, r30
    13e8:	fc 93       	st	X, r31
    13ea:	13 97       	sbiw	r26, 0x03	; 3
    13ec:	4d 91       	ld	r20, X+
    13ee:	5d 91       	ld	r21, X+
    13f0:	a4 0f       	add	r26, r20
    13f2:	b5 1f       	adc	r27, r21
    13f4:	ea 17       	cp	r30, r26
    13f6:	fb 07       	cpc	r31, r27
    13f8:	79 f4       	brne	.+30     	; 0x1418 <free+0xd2>
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	84 0f       	add	r24, r20
    1400:	95 1f       	adc	r25, r21
    1402:	02 96       	adiw	r24, 0x02	; 2
    1404:	d9 01       	movw	r26, r18
    1406:	8d 93       	st	X+, r24
    1408:	9c 93       	st	X, r25
    140a:	11 97       	sbiw	r26, 0x01	; 1
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	12 96       	adiw	r26, 0x02	; 2
    1412:	8d 93       	st	X+, r24
    1414:	9c 93       	st	X, r25
    1416:	13 97       	sbiw	r26, 0x03	; 3
    1418:	e0 e0       	ldi	r30, 0x00	; 0
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	19 f0       	breq	.+6      	; 0x142a <free+0xe4>
    1424:	fe 01       	movw	r30, r28
    1426:	ec 01       	movw	r28, r24
    1428:	f9 cf       	rjmp	.-14     	; 0x141c <free+0xd6>
    142a:	ce 01       	movw	r24, r28
    142c:	02 96       	adiw	r24, 0x02	; 2
    142e:	28 81       	ld	r18, Y
    1430:	39 81       	ldd	r19, Y+1	; 0x01
    1432:	82 0f       	add	r24, r18
    1434:	93 1f       	adc	r25, r19
    1436:	20 91 21 28 	lds	r18, 0x2821
    143a:	30 91 22 28 	lds	r19, 0x2822
    143e:	28 17       	cp	r18, r24
    1440:	39 07       	cpc	r19, r25
    1442:	69 f4       	brne	.+26     	; 0x145e <free+0x118>
    1444:	30 97       	sbiw	r30, 0x00	; 0
    1446:	29 f4       	brne	.+10     	; 0x1452 <free+0x10c>
    1448:	10 92 23 28 	sts	0x2823, r1
    144c:	10 92 24 28 	sts	0x2824, r1
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <free+0x110>
    1452:	12 82       	std	Z+2, r1	; 0x02
    1454:	13 82       	std	Z+3, r1	; 0x03
    1456:	c0 93 21 28 	sts	0x2821, r28
    145a:	d0 93 22 28 	sts	0x2822, r29
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <memset>:
    1464:	dc 01       	movw	r26, r24
    1466:	01 c0       	rjmp	.+2      	; 0x146a <memset+0x6>
    1468:	6d 93       	st	X+, r22
    146a:	41 50       	subi	r20, 0x01	; 1
    146c:	50 40       	sbci	r21, 0x00	; 0
    146e:	e0 f7       	brcc	.-8      	; 0x1468 <memset+0x4>
    1470:	08 95       	ret

00001472 <_exit>:
    1472:	f8 94       	cli

00001474 <__stop_program>:
    1474:	ff cf       	rjmp	.-2      	; 0x1474 <__stop_program>
