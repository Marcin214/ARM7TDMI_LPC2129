
ADC_OnDMA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000009a7  00802000  00802000  00001cf6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001cf6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000370  00000000  00000000  00001d28  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000976a  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001853  00000000  00000000  0000b802  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00004c09  00000000  00000000  0000d055  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00001098  00000000  00000000  00011c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0002aab4  00000000  00000000  00012cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003c17  00000000  00000000  0003d7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000348  00000000  00000000  000413c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000020ff  00000000  00000000  00041710  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c c1       	rjmp	.+536    	; 0x21a <__ctors_end>
       2:	00 00       	nop
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__vector_6>
      1a:	00 00       	nop
      1c:	ba c1       	rjmp	.+884    	; 0x392 <__vector_7>
      1e:	00 00       	nop
      20:	dc c1       	rjmp	.+952    	; 0x3da <__vector_8>
      22:	00 00       	nop
      24:	fe c1       	rjmp	.+1020   	; 0x422 <__vector_9>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	8c c2       	rjmp	.+1304   	; 0x552 <__vector_14>
      3a:	00 00       	nop
      3c:	b3 c2       	rjmp	.+1382   	; 0x5a4 <__vector_15>
      3e:	00 00       	nop
      40:	da c2       	rjmp	.+1460   	; 0x5f6 <__vector_16>
      42:	00 00       	nop
      44:	01 c3       	rjmp	.+1538   	; 0x648 <__vector_17>
      46:	00 00       	nop
      48:	28 c3       	rjmp	.+1616   	; 0x69a <__vector_18>
      4a:	00 00       	nop
      4c:	4f c3       	rjmp	.+1694   	; 0x6ec <__vector_19>
      4e:	00 00       	nop
      50:	76 c3       	rjmp	.+1772   	; 0x73e <__vector_20>
      52:	00 00       	nop
      54:	9d c3       	rjmp	.+1850   	; 0x790 <__vector_21>
      56:	00 00       	nop
      58:	c4 c3       	rjmp	.+1928   	; 0x7e2 <__vector_22>
      5a:	00 00       	nop
      5c:	eb c3       	rjmp	.+2006   	; 0x834 <__vector_23>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	f7 c0       	rjmp	.+494    	; 0x254 <__bad_interrupt>
      66:	00 00       	nop
      68:	f5 c0       	rjmp	.+490    	; 0x254 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 c0       	rjmp	.+454    	; 0x254 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop
      98:	dd c0       	rjmp	.+442    	; 0x254 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	db c0       	rjmp	.+438    	; 0x254 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d9 c0       	rjmp	.+434    	; 0x254 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d7 c0       	rjmp	.+430    	; 0x254 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d5 c0       	rjmp	.+426    	; 0x254 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d3 c0       	rjmp	.+422    	; 0x254 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cf c0       	rjmp	.+414    	; 0x254 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cd c0       	rjmp	.+410    	; 0x254 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	7e c5       	rjmp	.+2812   	; 0xbba <__vector_47>
      be:	00 00       	nop
      c0:	a5 c5       	rjmp	.+2890   	; 0xc0c <__vector_48>
      c2:	00 00       	nop
      c4:	cc c5       	rjmp	.+2968   	; 0xc5e <__vector_49>
      c6:	00 00       	nop
      c8:	f3 c5       	rjmp	.+3046   	; 0xcb0 <__vector_50>
      ca:	00 00       	nop
      cc:	1a c6       	rjmp	.+3124   	; 0xd02 <__vector_51>
      ce:	00 00       	nop
      d0:	41 c6       	rjmp	.+3202   	; 0xd54 <__vector_52>
      d2:	00 00       	nop
      d4:	bf c0       	rjmp	.+382    	; 0x254 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bd c0       	rjmp	.+378    	; 0x254 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bb c0       	rjmp	.+374    	; 0x254 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b9 c0       	rjmp	.+370    	; 0x254 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b7 c0       	rjmp	.+366    	; 0x254 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b5 c0       	rjmp	.+362    	; 0x254 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b3 c0       	rjmp	.+358    	; 0x254 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b1 c0       	rjmp	.+354    	; 0x254 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	af c0       	rjmp	.+350    	; 0x254 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ad c0       	rjmp	.+346    	; 0x254 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ab c0       	rjmp	.+342    	; 0x254 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a9 c0       	rjmp	.+338    	; 0x254 <__bad_interrupt>
     102:	00 00       	nop
     104:	a7 c0       	rjmp	.+334    	; 0x254 <__bad_interrupt>
     106:	00 00       	nop
     108:	a5 c0       	rjmp	.+330    	; 0x254 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a3 c0       	rjmp	.+326    	; 0x254 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a1 c0       	rjmp	.+322    	; 0x254 <__bad_interrupt>
     112:	00 00       	nop
     114:	9f c0       	rjmp	.+318    	; 0x254 <__bad_interrupt>
     116:	00 00       	nop
     118:	9d c0       	rjmp	.+314    	; 0x254 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_71>
     120:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_72>
     124:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_73>
     128:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__vector_74>
     12c:	93 c0       	rjmp	.+294    	; 0x254 <__bad_interrupt>
     12e:	00 00       	nop
     130:	91 c0       	rjmp	.+290    	; 0x254 <__bad_interrupt>
     132:	00 00       	nop
     134:	a8 c3       	rjmp	.+1872   	; 0x886 <__vector_77>
     136:	00 00       	nop
     138:	cf c3       	rjmp	.+1950   	; 0x8d8 <__vector_78>
     13a:	00 00       	nop
     13c:	f6 c3       	rjmp	.+2028   	; 0x92a <__vector_79>
     13e:	00 00       	nop
     140:	1d c4       	rjmp	.+2106   	; 0x97c <__vector_80>
     142:	00 00       	nop
     144:	44 c4       	rjmp	.+2184   	; 0x9ce <__vector_81>
     146:	00 00       	nop
     148:	6b c4       	rjmp	.+2262   	; 0xa20 <__vector_82>
     14a:	00 00       	nop
     14c:	92 c4       	rjmp	.+2340   	; 0xa72 <__vector_83>
     14e:	00 00       	nop
     150:	b9 c4       	rjmp	.+2418   	; 0xac4 <__vector_84>
     152:	00 00       	nop
     154:	e0 c4       	rjmp	.+2496   	; 0xb16 <__vector_85>
     156:	00 00       	nop
     158:	07 c5       	rjmp	.+2574   	; 0xb68 <__vector_86>
     15a:	00 00       	nop
     15c:	7b c0       	rjmp	.+246    	; 0x254 <__bad_interrupt>
     15e:	00 00       	nop
     160:	79 c0       	rjmp	.+242    	; 0x254 <__bad_interrupt>
     162:	00 00       	nop
     164:	77 c0       	rjmp	.+238    	; 0x254 <__bad_interrupt>
     166:	00 00       	nop
     168:	75 c0       	rjmp	.+234    	; 0x254 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	73 c0       	rjmp	.+230    	; 0x254 <__bad_interrupt>
     16e:	00 00       	nop
     170:	71 c0       	rjmp	.+226    	; 0x254 <__bad_interrupt>
     172:	00 00       	nop
     174:	6f c0       	rjmp	.+222    	; 0x254 <__bad_interrupt>
     176:	00 00       	nop
     178:	6d c0       	rjmp	.+218    	; 0x254 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6b c0       	rjmp	.+214    	; 0x254 <__bad_interrupt>
     17e:	00 00       	nop
     180:	69 c0       	rjmp	.+210    	; 0x254 <__bad_interrupt>
     182:	00 00       	nop
     184:	67 c0       	rjmp	.+206    	; 0x254 <__bad_interrupt>
     186:	00 00       	nop
     188:	65 c0       	rjmp	.+202    	; 0x254 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	63 c0       	rjmp	.+198    	; 0x254 <__bad_interrupt>
     18e:	00 00       	nop
     190:	61 c0       	rjmp	.+194    	; 0x254 <__bad_interrupt>
     192:	00 00       	nop
     194:	5f c0       	rjmp	.+190    	; 0x254 <__bad_interrupt>
     196:	00 00       	nop
     198:	5d c0       	rjmp	.+186    	; 0x254 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5b c0       	rjmp	.+182    	; 0x254 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	59 c0       	rjmp	.+178    	; 0x254 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	57 c0       	rjmp	.+174    	; 0x254 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	55 c0       	rjmp	.+170    	; 0x254 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	53 c0       	rjmp	.+166    	; 0x254 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	51 c0       	rjmp	.+162    	; 0x254 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4f c0       	rjmp	.+158    	; 0x254 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4d c0       	rjmp	.+154    	; 0x254 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4b c0       	rjmp	.+150    	; 0x254 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	49 c0       	rjmp	.+146    	; 0x254 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	47 c0       	rjmp	.+142    	; 0x254 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	45 c0       	rjmp	.+138    	; 0x254 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	43 c0       	rjmp	.+134    	; 0x254 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	41 c0       	rjmp	.+130    	; 0x254 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3f c0       	rjmp	.+126    	; 0x254 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3d c0       	rjmp	.+122    	; 0x254 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3b c0       	rjmp	.+118    	; 0x254 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	39 c0       	rjmp	.+114    	; 0x254 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	37 c0       	rjmp	.+110    	; 0x254 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	35 c0       	rjmp	.+106    	; 0x254 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	33 c0       	rjmp	.+102    	; 0x254 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	31 c0       	rjmp	.+98     	; 0x254 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	2f c0       	rjmp	.+94     	; 0x254 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	2d c0       	rjmp	.+90     	; 0x254 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	05 a8       	ldd	r0, Z+53	; 0x35
     1fe:	4c cd       	rjmp	.-1384   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     200:	b2 d4       	rcall	.+2404   	; 0xb66 <__vector_85+0x50>
     202:	4e b9       	out	0x0e, r20	; 14
     204:	38 36       	cpi	r19, 0x68	; 104
     206:	a9 02       	muls	r26, r25
     208:	0c 50       	subi	r16, 0x0C	; 12
     20a:	b9 91       	ld	r27, Y+
     20c:	86 88       	ldd	r8, Z+22	; 0x16
     20e:	08 3c       	cpi	r16, 0xC8	; 200
     210:	a6 aa       	std	Z+54, r10	; 0x36
     212:	aa 2a       	or	r10, r26
     214:	be 00       	.word	0x00be	; ????
     216:	00 00       	nop
     218:	80 3f       	cpi	r24, 0xF0	; 240

0000021a <__ctors_end>:
     21a:	11 24       	eor	r1, r1
     21c:	1f be       	out	0x3f, r1	; 63
     21e:	cf ef       	ldi	r28, 0xFF	; 255
     220:	cd bf       	out	0x3d, r28	; 61
     222:	df e2       	ldi	r29, 0x2F	; 47
     224:	de bf       	out	0x3e, r29	; 62

00000226 <__do_copy_data>:
     226:	10 e2       	ldi	r17, 0x20	; 32
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	e2 e8       	ldi	r30, 0x82	; 130
     22e:	fc e1       	ldi	r31, 0x1C	; 28
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x10>
     232:	05 90       	lpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	a0 30       	cpi	r26, 0x00	; 0
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0xc>

0000023c <__do_clear_bss>:
     23c:	29 e2       	ldi	r18, 0x29	; 41
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e2       	ldi	r27, 0x20	; 32
     242:	01 c0       	rjmp	.+2      	; 0x246 <.do_clear_bss_start>

00000244 <.do_clear_bss_loop>:
     244:	1d 92       	st	X+, r1

00000246 <.do_clear_bss_start>:
     246:	a7 3a       	cpi	r26, 0xA7	; 167
     248:	b2 07       	cpc	r27, r18
     24a:	e1 f7       	brne	.-8      	; 0x244 <.do_clear_bss_loop>
     24c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <main>
     250:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <_exit>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <dma_interrupt>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	28 2f       	mov	r18, r24
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	71 96       	adiw	r30, 0x11	; 17
     262:	e2 95       	swap	r30
     264:	f2 95       	swap	r31
     266:	f0 7f       	andi	r31, 0xF0	; 240
     268:	fe 27       	eor	r31, r30
     26a:	e0 7f       	andi	r30, 0xF0	; 240
     26c:	fe 27       	eor	r31, r30
     26e:	a0 e0       	ldi	r26, 0x00	; 0
     270:	b1 e0       	ldi	r27, 0x01	; 1
     272:	14 96       	adiw	r26, 0x04	; 4
     274:	9c 91       	ld	r25, X
     276:	14 97       	sbiw	r26, 0x04	; 4
     278:	13 96       	adiw	r26, 0x03	; 3
     27a:	ac 91       	ld	r26, X
     27c:	a9 01       	movw	r20, r18
     27e:	4c 5f       	subi	r20, 0xFC	; 252
     280:	5f 4f       	sbci	r21, 0xFF	; 255
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	eb 01       	movw	r28, r22
     288:	04 2e       	mov	r0, r20
     28a:	02 c0       	rjmp	.+4      	; 0x290 <dma_interrupt+0x3a>
     28c:	cc 0f       	add	r28, r28
     28e:	dd 1f       	adc	r29, r29
     290:	0a 94       	dec	r0
     292:	e2 f7       	brpl	.-8      	; 0x28c <dma_interrupt+0x36>
     294:	08 2e       	mov	r0, r24
     296:	02 c0       	rjmp	.+4      	; 0x29c <dma_interrupt+0x46>
     298:	66 0f       	add	r22, r22
     29a:	77 1f       	adc	r23, r23
     29c:	0a 94       	dec	r0
     29e:	e2 f7       	brpl	.-8      	; 0x298 <dma_interrupt+0x42>
     2a0:	6c 2b       	or	r22, r28
     2a2:	a6 23       	and	r26, r22
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	ed 01       	movw	r28, r26
     2a8:	04 2e       	mov	r0, r20
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <dma_interrupt+0x5a>
     2ac:	d5 95       	asr	r29
     2ae:	c7 95       	ror	r28
     2b0:	0a 94       	dec	r0
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <dma_interrupt+0x56>
     2b4:	c0 fd       	sbrc	r28, 0
     2b6:	1b c0       	rjmp	.+54     	; 0x2ee <dma_interrupt+0x98>
     2b8:	08 2e       	mov	r0, r24
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <dma_interrupt+0x6a>
     2bc:	b5 95       	asr	r27
     2be:	a7 95       	ror	r26
     2c0:	0a 94       	dec	r0
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <dma_interrupt+0x66>
     2c4:	a0 fd       	sbrc	r26, 0
     2c6:	15 c0       	rjmp	.+42     	; 0x2f2 <dma_interrupt+0x9c>
     2c8:	69 23       	and	r22, r25
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	db 01       	movw	r26, r22
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <dma_interrupt+0x7e>
     2d0:	b5 95       	asr	r27
     2d2:	a7 95       	ror	r26
     2d4:	4a 95       	dec	r20
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <dma_interrupt+0x7a>
     2d8:	a0 fd       	sbrc	r26, 0
     2da:	0d c0       	rjmp	.+26     	; 0x2f6 <dma_interrupt+0xa0>
     2dc:	ab 01       	movw	r20, r22
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <dma_interrupt+0x8e>
     2e0:	55 95       	asr	r21
     2e2:	47 95       	ror	r20
     2e4:	8a 95       	dec	r24
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <dma_interrupt+0x8a>
     2e8:	ca 01       	movw	r24, r20
     2ea:	81 70       	andi	r24, 0x01	; 1
     2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <dma_interrupt+0xa2>
     2ee:	84 e0       	ldi	r24, 0x04	; 4
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <dma_interrupt+0xa2>
     2f2:	83 e0       	ldi	r24, 0x03	; 3
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <dma_interrupt+0xa2>
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	91 81       	ldd	r25, Z+1	; 0x01
     2fa:	90 63       	ori	r25, 0x30	; 48
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	f9 01       	movw	r30, r18
     300:	ee 0f       	add	r30, r30
     302:	ff 1f       	adc	r31, r31
     304:	eb 5c       	subi	r30, 0xCB	; 203
     306:	ff 4d       	sbci	r31, 0xDF	; 223
     308:	01 90       	ld	r0, Z+
     30a:	f0 81       	ld	r31, Z
     30c:	e0 2d       	mov	r30, r0
     30e:	30 97       	sbiw	r30, 0x00	; 0
     310:	09 f0       	breq	.+2      	; 0x314 <dma_interrupt+0xbe>
     312:	09 95       	icall
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <dma_enable>:
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <sysclk_enable_module>
     322:	80 91 40 20 	lds	r24, 0x2040
     326:	8f 3f       	cpi	r24, 0xFF	; 255
     328:	09 f4       	brne	.+2      	; 0x32c <dma_enable+0x12>
     32a:	ff cf       	rjmp	.-2      	; 0x32a <dma_enable+0x10>
     32c:	8f b7       	in	r24, 0x3f	; 63
     32e:	f8 94       	cli
     330:	e0 e4       	ldi	r30, 0x40	; 64
     332:	f0 e2       	ldi	r31, 0x20	; 32
     334:	90 81       	ld	r25, Z
     336:	9f 5f       	subi	r25, 0xFF	; 255
     338:	90 83       	st	Z, r25
     33a:	8f bf       	out	0x3f, r24	; 63
     33c:	e0 e0       	ldi	r30, 0x00	; 0
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	80 e4       	ldi	r24, 0x40	; 64
     342:	80 83       	st	Z, r24
     344:	80 e8       	ldi	r24, 0x80	; 128
     346:	80 83       	st	Z, r24
     348:	08 95       	ret

0000034a <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	2f 93       	push	r18
     356:	3f 93       	push	r19
     358:	4f 93       	push	r20
     35a:	5f 93       	push	r21
     35c:	6f 93       	push	r22
     35e:	7f 93       	push	r23
     360:	8f 93       	push	r24
     362:	9f 93       	push	r25
     364:	af 93       	push	r26
     366:	bf 93       	push	r27
     368:	ef 93       	push	r30
     36a:	ff 93       	push	r31
	dma_interrupt(0);
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	73 df       	rcall	.-282    	; 0x256 <dma_interrupt>
}
     370:	ff 91       	pop	r31
     372:	ef 91       	pop	r30
     374:	bf 91       	pop	r27
     376:	af 91       	pop	r26
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	7f 91       	pop	r23
     37e:	6f 91       	pop	r22
     380:	5f 91       	pop	r21
     382:	4f 91       	pop	r20
     384:	3f 91       	pop	r19
     386:	2f 91       	pop	r18
     388:	0f 90       	pop	r0
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	0f 90       	pop	r0
     38e:	1f 90       	pop	r1
     390:	18 95       	reti

00000392 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
     39c:	2f 93       	push	r18
     39e:	3f 93       	push	r19
     3a0:	4f 93       	push	r20
     3a2:	5f 93       	push	r21
     3a4:	6f 93       	push	r22
     3a6:	7f 93       	push	r23
     3a8:	8f 93       	push	r24
     3aa:	9f 93       	push	r25
     3ac:	af 93       	push	r26
     3ae:	bf 93       	push	r27
     3b0:	ef 93       	push	r30
     3b2:	ff 93       	push	r31
	dma_interrupt(1);
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	4f df       	rcall	.-354    	; 0x256 <dma_interrupt>
}
     3b8:	ff 91       	pop	r31
     3ba:	ef 91       	pop	r30
     3bc:	bf 91       	pop	r27
     3be:	af 91       	pop	r26
     3c0:	9f 91       	pop	r25
     3c2:	8f 91       	pop	r24
     3c4:	7f 91       	pop	r23
     3c6:	6f 91       	pop	r22
     3c8:	5f 91       	pop	r21
     3ca:	4f 91       	pop	r20
     3cc:	3f 91       	pop	r19
     3ce:	2f 91       	pop	r18
     3d0:	0f 90       	pop	r0
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	0f 90       	pop	r0
     3d6:	1f 90       	pop	r1
     3d8:	18 95       	reti

000003da <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
     3da:	1f 92       	push	r1
     3dc:	0f 92       	push	r0
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	0f 92       	push	r0
     3e2:	11 24       	eor	r1, r1
     3e4:	2f 93       	push	r18
     3e6:	3f 93       	push	r19
     3e8:	4f 93       	push	r20
     3ea:	5f 93       	push	r21
     3ec:	6f 93       	push	r22
     3ee:	7f 93       	push	r23
     3f0:	8f 93       	push	r24
     3f2:	9f 93       	push	r25
     3f4:	af 93       	push	r26
     3f6:	bf 93       	push	r27
     3f8:	ef 93       	push	r30
     3fa:	ff 93       	push	r31
	dma_interrupt(2);
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	2b df       	rcall	.-426    	; 0x256 <dma_interrupt>
}
     400:	ff 91       	pop	r31
     402:	ef 91       	pop	r30
     404:	bf 91       	pop	r27
     406:	af 91       	pop	r26
     408:	9f 91       	pop	r25
     40a:	8f 91       	pop	r24
     40c:	7f 91       	pop	r23
     40e:	6f 91       	pop	r22
     410:	5f 91       	pop	r21
     412:	4f 91       	pop	r20
     414:	3f 91       	pop	r19
     416:	2f 91       	pop	r18
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	3f 93       	push	r19
     430:	4f 93       	push	r20
     432:	5f 93       	push	r21
     434:	6f 93       	push	r22
     436:	7f 93       	push	r23
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	af 93       	push	r26
     43e:	bf 93       	push	r27
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
	dma_interrupt(3);
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	07 df       	rcall	.-498    	; 0x256 <dma_interrupt>
}
     448:	ff 91       	pop	r31
     44a:	ef 91       	pop	r30
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	7f 91       	pop	r23
     456:	6f 91       	pop	r22
     458:	5f 91       	pop	r21
     45a:	4f 91       	pop	r20
     45c:	3f 91       	pop	r19
     45e:	2f 91       	pop	r18
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
     46a:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
     46c:	e8 2f       	mov	r30, r24
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	71 96       	adiw	r30, 0x11	; 17
     472:	e2 95       	swap	r30
     474:	f2 95       	swap	r31
     476:	f0 7f       	andi	r31, 0xF0	; 240
     478:	fe 27       	eor	r31, r30
     47a:	e0 7f       	andi	r30, 0xF0	; 240
     47c:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     47e:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     480:	f8 94       	cli
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
     482:	19 96       	adiw	r26, 0x09	; 9
     484:	8c 91       	ld	r24, X
     486:	19 97       	sbiw	r26, 0x09	; 9
     488:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
     48a:	1a 96       	adiw	r26, 0x0a	; 10
     48c:	8c 91       	ld	r24, X
     48e:	1a 97       	sbiw	r26, 0x0a	; 10
     490:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
     492:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
     494:	17 96       	adiw	r26, 0x07	; 7
     496:	8c 91       	ld	r24, X
     498:	17 97       	sbiw	r26, 0x07	; 7
     49a:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
     49c:	18 96       	adiw	r26, 0x08	; 8
     49e:	8c 91       	ld	r24, X
     4a0:	18 97       	sbiw	r26, 0x08	; 8
     4a2:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
     4a4:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
     4a6:	12 96       	adiw	r26, 0x02	; 2
     4a8:	8c 91       	ld	r24, X
     4aa:	12 97       	sbiw	r26, 0x02	; 2
     4ac:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
     4ae:	13 96       	adiw	r26, 0x03	; 3
     4b0:	8c 91       	ld	r24, X
     4b2:	13 97       	sbiw	r26, 0x03	; 3
     4b4:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
     4b6:	14 96       	adiw	r26, 0x04	; 4
     4b8:	8d 91       	ld	r24, X+
     4ba:	9c 91       	ld	r25, X
     4bc:	15 97       	sbiw	r26, 0x05	; 5
     4be:	84 83       	std	Z+4, r24	; 0x04
     4c0:	95 83       	std	Z+5, r25	; 0x05
	channel->REPCNT = config->repcnt;
     4c2:	16 96       	adiw	r26, 0x06	; 6
     4c4:	8c 91       	ld	r24, X
     4c6:	16 97       	sbiw	r26, 0x06	; 6
     4c8:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
     4ca:	11 96       	adiw	r26, 0x01	; 1
     4cc:	8c 91       	ld	r24, X
     4ce:	11 97       	sbiw	r26, 0x01	; 1
     4d0:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
     4d2:	8c 91       	ld	r24, X
     4d4:	8f 77       	andi	r24, 0x7F	; 127
     4d6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4d8:	2f bf       	out	0x3f, r18	; 63
     4da:	08 95       	ret

000004dc <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     4dc:	81 15       	cp	r24, r1
     4de:	92 40       	sbci	r25, 0x02	; 2
     4e0:	61 f4       	brne	.+24     	; 0x4fa <adc_enable_clock+0x1e>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     4e2:	80 91 00 20 	lds	r24, 0x2000
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	98 0f       	add	r25, r24
     4ea:	90 93 00 20 	sts	0x2000, r25
     4ee:	81 11       	cpse	r24, r1
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <adc_enable_clock+0x1e>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     4f2:	62 e0       	ldi	r22, 0x02	; 2
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <sysclk_enable_module>
     4fa:	08 95       	ret

000004fc <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     4fc:	81 15       	cp	r24, r1
     4fe:	92 40       	sbci	r25, 0x02	; 2
     500:	59 f4       	brne	.+22     	; 0x518 <adc_disable_clock+0x1c>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     502:	80 91 00 20 	lds	r24, 0x2000
     506:	81 50       	subi	r24, 0x01	; 1
     508:	80 93 00 20 	sts	0x2000, r24
     50c:	81 11       	cpse	r24, r1
     50e:	04 c0       	rjmp	.+8      	; 0x518 <adc_disable_clock+0x1c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     510:	62 e0       	ldi	r22, 0x02	; 2
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	0c 94 af 0a 	jmp	0x155e	; 0x155e <sysclk_disable_module>
     518:	08 95       	ret

0000051a <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     522:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     524:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     526:	da df       	rcall	.-76     	; 0x4dc <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     528:	88 81       	ld	r24, Y
     52a:	81 60       	ori	r24, 0x01	; 1
     52c:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     52e:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     530:	80 91 40 20 	lds	r24, 0x2040
     534:	8f 3f       	cpi	r24, 0xFF	; 255
     536:	09 f4       	brne	.+2      	; 0x53a <adc_enable+0x20>
     538:	ff cf       	rjmp	.-2      	; 0x538 <adc_enable+0x1e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     53a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     53c:	f8 94       	cli
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     53e:	e0 e4       	ldi	r30, 0x40	; 64
     540:	f0 e2       	ldi	r31, 0x20	; 32
     542:	90 81       	ld	r25, Z
     544:	9f 5f       	subi	r25, 0xFF	; 255
     546:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     548:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	08 95       	ret

00000552 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	2f 93       	push	r18
     55e:	3f 93       	push	r19
     560:	4f 93       	push	r20
     562:	5f 93       	push	r21
     564:	6f 93       	push	r22
     566:	7f 93       	push	r23
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
     56c:	af 93       	push	r26
     56e:	bf 93       	push	r27
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     574:	e0 91 33 20 	lds	r30, 0x2033
     578:	f0 91 34 20 	lds	r31, 0x2034
     57c:	30 97       	sbiw	r30, 0x00	; 0
     57e:	09 f0       	breq	.+2      	; 0x582 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     580:	09 95       	icall
	}
}
     582:	ff 91       	pop	r31
     584:	ef 91       	pop	r30
     586:	bf 91       	pop	r27
     588:	af 91       	pop	r26
     58a:	9f 91       	pop	r25
     58c:	8f 91       	pop	r24
     58e:	7f 91       	pop	r23
     590:	6f 91       	pop	r22
     592:	5f 91       	pop	r21
     594:	4f 91       	pop	r20
     596:	3f 91       	pop	r19
     598:	2f 91       	pop	r18
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     5a4:	1f 92       	push	r1
     5a6:	0f 92       	push	r0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	2f 93       	push	r18
     5b0:	3f 93       	push	r19
     5b2:	4f 93       	push	r20
     5b4:	5f 93       	push	r21
     5b6:	6f 93       	push	r22
     5b8:	7f 93       	push	r23
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
     5be:	af 93       	push	r26
     5c0:	bf 93       	push	r27
     5c2:	ef 93       	push	r30
     5c4:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     5c6:	e0 91 31 20 	lds	r30, 0x2031
     5ca:	f0 91 32 20 	lds	r31, 0x2032
     5ce:	30 97       	sbiw	r30, 0x00	; 0
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <__vector_15+0x30>
		tc_tcc0_err_callback();
     5d2:	09 95       	icall
	}
}
     5d4:	ff 91       	pop	r31
     5d6:	ef 91       	pop	r30
     5d8:	bf 91       	pop	r27
     5da:	af 91       	pop	r26
     5dc:	9f 91       	pop	r25
     5de:	8f 91       	pop	r24
     5e0:	7f 91       	pop	r23
     5e2:	6f 91       	pop	r22
     5e4:	5f 91       	pop	r21
     5e6:	4f 91       	pop	r20
     5e8:	3f 91       	pop	r19
     5ea:	2f 91       	pop	r18
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     5f6:	1f 92       	push	r1
     5f8:	0f 92       	push	r0
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	0f 92       	push	r0
     5fe:	11 24       	eor	r1, r1
     600:	2f 93       	push	r18
     602:	3f 93       	push	r19
     604:	4f 93       	push	r20
     606:	5f 93       	push	r21
     608:	6f 93       	push	r22
     60a:	7f 93       	push	r23
     60c:	8f 93       	push	r24
     60e:	9f 93       	push	r25
     610:	af 93       	push	r26
     612:	bf 93       	push	r27
     614:	ef 93       	push	r30
     616:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     618:	e0 91 2f 20 	lds	r30, 0x202F
     61c:	f0 91 30 20 	lds	r31, 0x2030
     620:	30 97       	sbiw	r30, 0x00	; 0
     622:	09 f0       	breq	.+2      	; 0x626 <__vector_16+0x30>
		tc_tcc0_cca_callback();
     624:	09 95       	icall
	}
}
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     66a:	e0 91 2d 20 	lds	r30, 0x202D
     66e:	f0 91 2e 20 	lds	r31, 0x202E
     672:	30 97       	sbiw	r30, 0x00	; 0
     674:	09 f0       	breq	.+2      	; 0x678 <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     676:	09 95       	icall
	}
}
     678:	ff 91       	pop	r31
     67a:	ef 91       	pop	r30
     67c:	bf 91       	pop	r27
     67e:	af 91       	pop	r26
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	7f 91       	pop	r23
     686:	6f 91       	pop	r22
     688:	5f 91       	pop	r21
     68a:	4f 91       	pop	r20
     68c:	3f 91       	pop	r19
     68e:	2f 91       	pop	r18
     690:	0f 90       	pop	r0
     692:	0f be       	out	0x3f, r0	; 63
     694:	0f 90       	pop	r0
     696:	1f 90       	pop	r1
     698:	18 95       	reti

0000069a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     69a:	1f 92       	push	r1
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	2f 93       	push	r18
     6a6:	3f 93       	push	r19
     6a8:	4f 93       	push	r20
     6aa:	5f 93       	push	r21
     6ac:	6f 93       	push	r22
     6ae:	7f 93       	push	r23
     6b0:	8f 93       	push	r24
     6b2:	9f 93       	push	r25
     6b4:	af 93       	push	r26
     6b6:	bf 93       	push	r27
     6b8:	ef 93       	push	r30
     6ba:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     6bc:	e0 91 2b 20 	lds	r30, 0x202B
     6c0:	f0 91 2c 20 	lds	r31, 0x202C
     6c4:	30 97       	sbiw	r30, 0x00	; 0
     6c6:	09 f0       	breq	.+2      	; 0x6ca <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     6c8:	09 95       	icall
	}
}
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	bf 91       	pop	r27
     6d0:	af 91       	pop	r26
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	7f 91       	pop	r23
     6d8:	6f 91       	pop	r22
     6da:	5f 91       	pop	r21
     6dc:	4f 91       	pop	r20
     6de:	3f 91       	pop	r19
     6e0:	2f 91       	pop	r18
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	2f 93       	push	r18
     6f8:	3f 93       	push	r19
     6fa:	4f 93       	push	r20
     6fc:	5f 93       	push	r21
     6fe:	6f 93       	push	r22
     700:	7f 93       	push	r23
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     70e:	e0 91 29 20 	lds	r30, 0x2029
     712:	f0 91 2a 20 	lds	r31, 0x202A
     716:	30 97       	sbiw	r30, 0x00	; 0
     718:	09 f0       	breq	.+2      	; 0x71c <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     71a:	09 95       	icall
	}
}
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	7f 91       	pop	r23
     72a:	6f 91       	pop	r22
     72c:	5f 91       	pop	r21
     72e:	4f 91       	pop	r20
     730:	3f 91       	pop	r19
     732:	2f 91       	pop	r18
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	4f 93       	push	r20
     74e:	5f 93       	push	r21
     750:	6f 93       	push	r22
     752:	7f 93       	push	r23
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	ef 93       	push	r30
     75e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     760:	e0 91 27 20 	lds	r30, 0x2027
     764:	f0 91 28 20 	lds	r31, 0x2028
     768:	30 97       	sbiw	r30, 0x00	; 0
     76a:	09 f0       	breq	.+2      	; 0x76e <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     76c:	09 95       	icall
	}
}
     76e:	ff 91       	pop	r31
     770:	ef 91       	pop	r30
     772:	bf 91       	pop	r27
     774:	af 91       	pop	r26
     776:	9f 91       	pop	r25
     778:	8f 91       	pop	r24
     77a:	7f 91       	pop	r23
     77c:	6f 91       	pop	r22
     77e:	5f 91       	pop	r21
     780:	4f 91       	pop	r20
     782:	3f 91       	pop	r19
     784:	2f 91       	pop	r18
     786:	0f 90       	pop	r0
     788:	0f be       	out	0x3f, r0	; 63
     78a:	0f 90       	pop	r0
     78c:	1f 90       	pop	r1
     78e:	18 95       	reti

00000790 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     790:	1f 92       	push	r1
     792:	0f 92       	push	r0
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	0f 92       	push	r0
     798:	11 24       	eor	r1, r1
     79a:	2f 93       	push	r18
     79c:	3f 93       	push	r19
     79e:	4f 93       	push	r20
     7a0:	5f 93       	push	r21
     7a2:	6f 93       	push	r22
     7a4:	7f 93       	push	r23
     7a6:	8f 93       	push	r24
     7a8:	9f 93       	push	r25
     7aa:	af 93       	push	r26
     7ac:	bf 93       	push	r27
     7ae:	ef 93       	push	r30
     7b0:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     7b2:	e0 91 25 20 	lds	r30, 0x2025
     7b6:	f0 91 26 20 	lds	r31, 0x2026
     7ba:	30 97       	sbiw	r30, 0x00	; 0
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <__vector_21+0x30>
		tc_tcc1_err_callback();
     7be:	09 95       	icall
	}
}
     7c0:	ff 91       	pop	r31
     7c2:	ef 91       	pop	r30
     7c4:	bf 91       	pop	r27
     7c6:	af 91       	pop	r26
     7c8:	9f 91       	pop	r25
     7ca:	8f 91       	pop	r24
     7cc:	7f 91       	pop	r23
     7ce:	6f 91       	pop	r22
     7d0:	5f 91       	pop	r21
     7d2:	4f 91       	pop	r20
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	4f 93       	push	r20
     7f2:	5f 93       	push	r21
     7f4:	6f 93       	push	r22
     7f6:	7f 93       	push	r23
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	af 93       	push	r26
     7fe:	bf 93       	push	r27
     800:	ef 93       	push	r30
     802:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     804:	e0 91 23 20 	lds	r30, 0x2023
     808:	f0 91 24 20 	lds	r31, 0x2024
     80c:	30 97       	sbiw	r30, 0x00	; 0
     80e:	09 f0       	breq	.+2      	; 0x812 <__vector_22+0x30>
		tc_tcc1_cca_callback();
     810:	09 95       	icall
	}
}
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	2f 93       	push	r18
     840:	3f 93       	push	r19
     842:	4f 93       	push	r20
     844:	5f 93       	push	r21
     846:	6f 93       	push	r22
     848:	7f 93       	push	r23
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	ef 93       	push	r30
     854:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     856:	e0 91 21 20 	lds	r30, 0x2021
     85a:	f0 91 22 20 	lds	r31, 0x2022
     85e:	30 97       	sbiw	r30, 0x00	; 0
     860:	09 f0       	breq	.+2      	; 0x864 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     862:	09 95       	icall
	}
}
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	bf 91       	pop	r27
     86a:	af 91       	pop	r26
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	7f 91       	pop	r23
     872:	6f 91       	pop	r22
     874:	5f 91       	pop	r21
     876:	4f 91       	pop	r20
     878:	3f 91       	pop	r19
     87a:	2f 91       	pop	r18
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	1f 90       	pop	r1
     884:	18 95       	reti

00000886 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     8a8:	e0 91 1f 20 	lds	r30, 0x201F
     8ac:	f0 91 20 20 	lds	r31, 0x2020
     8b0:	30 97       	sbiw	r30, 0x00	; 0
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     8b4:	09 95       	icall
	}
}
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	bf 91       	pop	r27
     8bc:	af 91       	pop	r26
     8be:	9f 91       	pop	r25
     8c0:	8f 91       	pop	r24
     8c2:	7f 91       	pop	r23
     8c4:	6f 91       	pop	r22
     8c6:	5f 91       	pop	r21
     8c8:	4f 91       	pop	r20
     8ca:	3f 91       	pop	r19
     8cc:	2f 91       	pop	r18
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	0f 92       	push	r0
     8e0:	11 24       	eor	r1, r1
     8e2:	2f 93       	push	r18
     8e4:	3f 93       	push	r19
     8e6:	4f 93       	push	r20
     8e8:	5f 93       	push	r21
     8ea:	6f 93       	push	r22
     8ec:	7f 93       	push	r23
     8ee:	8f 93       	push	r24
     8f0:	9f 93       	push	r25
     8f2:	af 93       	push	r26
     8f4:	bf 93       	push	r27
     8f6:	ef 93       	push	r30
     8f8:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     8fa:	e0 91 1d 20 	lds	r30, 0x201D
     8fe:	f0 91 1e 20 	lds	r31, 0x201E
     902:	30 97       	sbiw	r30, 0x00	; 0
     904:	09 f0       	breq	.+2      	; 0x908 <__vector_78+0x30>
		tc_tcd0_err_callback();
     906:	09 95       	icall
	}
}
     908:	ff 91       	pop	r31
     90a:	ef 91       	pop	r30
     90c:	bf 91       	pop	r27
     90e:	af 91       	pop	r26
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	7f 91       	pop	r23
     916:	6f 91       	pop	r22
     918:	5f 91       	pop	r21
     91a:	4f 91       	pop	r20
     91c:	3f 91       	pop	r19
     91e:	2f 91       	pop	r18
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	18 95       	reti

0000092a <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     92a:	1f 92       	push	r1
     92c:	0f 92       	push	r0
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	0f 92       	push	r0
     932:	11 24       	eor	r1, r1
     934:	2f 93       	push	r18
     936:	3f 93       	push	r19
     938:	4f 93       	push	r20
     93a:	5f 93       	push	r21
     93c:	6f 93       	push	r22
     93e:	7f 93       	push	r23
     940:	8f 93       	push	r24
     942:	9f 93       	push	r25
     944:	af 93       	push	r26
     946:	bf 93       	push	r27
     948:	ef 93       	push	r30
     94a:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     94c:	e0 91 1b 20 	lds	r30, 0x201B
     950:	f0 91 1c 20 	lds	r31, 0x201C
     954:	30 97       	sbiw	r30, 0x00	; 0
     956:	09 f0       	breq	.+2      	; 0x95a <__vector_79+0x30>
		tc_tcd0_cca_callback();
     958:	09 95       	icall
	}
}
     95a:	ff 91       	pop	r31
     95c:	ef 91       	pop	r30
     95e:	bf 91       	pop	r27
     960:	af 91       	pop	r26
     962:	9f 91       	pop	r25
     964:	8f 91       	pop	r24
     966:	7f 91       	pop	r23
     968:	6f 91       	pop	r22
     96a:	5f 91       	pop	r21
     96c:	4f 91       	pop	r20
     96e:	3f 91       	pop	r19
     970:	2f 91       	pop	r18
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	0f 90       	pop	r0
     978:	1f 90       	pop	r1
     97a:	18 95       	reti

0000097c <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     97c:	1f 92       	push	r1
     97e:	0f 92       	push	r0
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	0f 92       	push	r0
     984:	11 24       	eor	r1, r1
     986:	2f 93       	push	r18
     988:	3f 93       	push	r19
     98a:	4f 93       	push	r20
     98c:	5f 93       	push	r21
     98e:	6f 93       	push	r22
     990:	7f 93       	push	r23
     992:	8f 93       	push	r24
     994:	9f 93       	push	r25
     996:	af 93       	push	r26
     998:	bf 93       	push	r27
     99a:	ef 93       	push	r30
     99c:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     99e:	e0 91 19 20 	lds	r30, 0x2019
     9a2:	f0 91 1a 20 	lds	r31, 0x201A
     9a6:	30 97       	sbiw	r30, 0x00	; 0
     9a8:	09 f0       	breq	.+2      	; 0x9ac <__vector_80+0x30>
		tc_tcd0_ccb_callback();
     9aa:	09 95       	icall
	}
}
     9ac:	ff 91       	pop	r31
     9ae:	ef 91       	pop	r30
     9b0:	bf 91       	pop	r27
     9b2:	af 91       	pop	r26
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	7f 91       	pop	r23
     9ba:	6f 91       	pop	r22
     9bc:	5f 91       	pop	r21
     9be:	4f 91       	pop	r20
     9c0:	3f 91       	pop	r19
     9c2:	2f 91       	pop	r18
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0
     9ca:	1f 90       	pop	r1
     9cc:	18 95       	reti

000009ce <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     9ce:	1f 92       	push	r1
     9d0:	0f 92       	push	r0
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	0f 92       	push	r0
     9d6:	11 24       	eor	r1, r1
     9d8:	2f 93       	push	r18
     9da:	3f 93       	push	r19
     9dc:	4f 93       	push	r20
     9de:	5f 93       	push	r21
     9e0:	6f 93       	push	r22
     9e2:	7f 93       	push	r23
     9e4:	8f 93       	push	r24
     9e6:	9f 93       	push	r25
     9e8:	af 93       	push	r26
     9ea:	bf 93       	push	r27
     9ec:	ef 93       	push	r30
     9ee:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     9f0:	e0 91 17 20 	lds	r30, 0x2017
     9f4:	f0 91 18 20 	lds	r31, 0x2018
     9f8:	30 97       	sbiw	r30, 0x00	; 0
     9fa:	09 f0       	breq	.+2      	; 0x9fe <__vector_81+0x30>
		tc_tcd0_ccc_callback();
     9fc:	09 95       	icall
	}
}
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	bf 91       	pop	r27
     a04:	af 91       	pop	r26
     a06:	9f 91       	pop	r25
     a08:	8f 91       	pop	r24
     a0a:	7f 91       	pop	r23
     a0c:	6f 91       	pop	r22
     a0e:	5f 91       	pop	r21
     a10:	4f 91       	pop	r20
     a12:	3f 91       	pop	r19
     a14:	2f 91       	pop	r18
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	2f 93       	push	r18
     a2c:	3f 93       	push	r19
     a2e:	4f 93       	push	r20
     a30:	5f 93       	push	r21
     a32:	6f 93       	push	r22
     a34:	7f 93       	push	r23
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
     a3a:	af 93       	push	r26
     a3c:	bf 93       	push	r27
     a3e:	ef 93       	push	r30
     a40:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     a42:	e0 91 15 20 	lds	r30, 0x2015
     a46:	f0 91 16 20 	lds	r31, 0x2016
     a4a:	30 97       	sbiw	r30, 0x00	; 0
     a4c:	09 f0       	breq	.+2      	; 0xa50 <__vector_82+0x30>
		tc_tcd0_ccd_callback();
     a4e:	09 95       	icall
	}
}
     a50:	ff 91       	pop	r31
     a52:	ef 91       	pop	r30
     a54:	bf 91       	pop	r27
     a56:	af 91       	pop	r26
     a58:	9f 91       	pop	r25
     a5a:	8f 91       	pop	r24
     a5c:	7f 91       	pop	r23
     a5e:	6f 91       	pop	r22
     a60:	5f 91       	pop	r21
     a62:	4f 91       	pop	r20
     a64:	3f 91       	pop	r19
     a66:	2f 91       	pop	r18
     a68:	0f 90       	pop	r0
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	0f 90       	pop	r0
     a6e:	1f 90       	pop	r1
     a70:	18 95       	reti

00000a72 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	2f 93       	push	r18
     a7e:	3f 93       	push	r19
     a80:	4f 93       	push	r20
     a82:	5f 93       	push	r21
     a84:	6f 93       	push	r22
     a86:	7f 93       	push	r23
     a88:	8f 93       	push	r24
     a8a:	9f 93       	push	r25
     a8c:	af 93       	push	r26
     a8e:	bf 93       	push	r27
     a90:	ef 93       	push	r30
     a92:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     a94:	e0 91 13 20 	lds	r30, 0x2013
     a98:	f0 91 14 20 	lds	r31, 0x2014
     a9c:	30 97       	sbiw	r30, 0x00	; 0
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
     aa0:	09 95       	icall
	}
}
     aa2:	ff 91       	pop	r31
     aa4:	ef 91       	pop	r30
     aa6:	bf 91       	pop	r27
     aa8:	af 91       	pop	r26
     aaa:	9f 91       	pop	r25
     aac:	8f 91       	pop	r24
     aae:	7f 91       	pop	r23
     ab0:	6f 91       	pop	r22
     ab2:	5f 91       	pop	r21
     ab4:	4f 91       	pop	r20
     ab6:	3f 91       	pop	r19
     ab8:	2f 91       	pop	r18
     aba:	0f 90       	pop	r0
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	0f 90       	pop	r0
     ac0:	1f 90       	pop	r1
     ac2:	18 95       	reti

00000ac4 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     ac4:	1f 92       	push	r1
     ac6:	0f 92       	push	r0
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	0f 92       	push	r0
     acc:	11 24       	eor	r1, r1
     ace:	2f 93       	push	r18
     ad0:	3f 93       	push	r19
     ad2:	4f 93       	push	r20
     ad4:	5f 93       	push	r21
     ad6:	6f 93       	push	r22
     ad8:	7f 93       	push	r23
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	af 93       	push	r26
     ae0:	bf 93       	push	r27
     ae2:	ef 93       	push	r30
     ae4:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     ae6:	e0 91 11 20 	lds	r30, 0x2011
     aea:	f0 91 12 20 	lds	r31, 0x2012
     aee:	30 97       	sbiw	r30, 0x00	; 0
     af0:	09 f0       	breq	.+2      	; 0xaf4 <__vector_84+0x30>
		tc_tcd1_err_callback();
     af2:	09 95       	icall
	}
}
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     b16:	1f 92       	push	r1
     b18:	0f 92       	push	r0
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	0f 92       	push	r0
     b1e:	11 24       	eor	r1, r1
     b20:	2f 93       	push	r18
     b22:	3f 93       	push	r19
     b24:	4f 93       	push	r20
     b26:	5f 93       	push	r21
     b28:	6f 93       	push	r22
     b2a:	7f 93       	push	r23
     b2c:	8f 93       	push	r24
     b2e:	9f 93       	push	r25
     b30:	af 93       	push	r26
     b32:	bf 93       	push	r27
     b34:	ef 93       	push	r30
     b36:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     b38:	e0 91 0f 20 	lds	r30, 0x200F
     b3c:	f0 91 10 20 	lds	r31, 0x2010
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	09 f0       	breq	.+2      	; 0xb46 <__vector_85+0x30>
		tc_tcd1_cca_callback();
     b44:	09 95       	icall
	}
}
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	4f 93       	push	r20
     b78:	5f 93       	push	r21
     b7a:	6f 93       	push	r22
     b7c:	7f 93       	push	r23
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	af 93       	push	r26
     b84:	bf 93       	push	r27
     b86:	ef 93       	push	r30
     b88:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     b8a:	e0 91 0d 20 	lds	r30, 0x200D
     b8e:	f0 91 0e 20 	lds	r31, 0x200E
     b92:	30 97       	sbiw	r30, 0x00	; 0
     b94:	09 f0       	breq	.+2      	; 0xb98 <__vector_86+0x30>
		tc_tcd1_ccb_callback();
     b96:	09 95       	icall
	}
}
     b98:	ff 91       	pop	r31
     b9a:	ef 91       	pop	r30
     b9c:	bf 91       	pop	r27
     b9e:	af 91       	pop	r26
     ba0:	9f 91       	pop	r25
     ba2:	8f 91       	pop	r24
     ba4:	7f 91       	pop	r23
     ba6:	6f 91       	pop	r22
     ba8:	5f 91       	pop	r21
     baa:	4f 91       	pop	r20
     bac:	3f 91       	pop	r19
     bae:	2f 91       	pop	r18
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	2f 93       	push	r18
     bc6:	3f 93       	push	r19
     bc8:	4f 93       	push	r20
     bca:	5f 93       	push	r21
     bcc:	6f 93       	push	r22
     bce:	7f 93       	push	r23
     bd0:	8f 93       	push	r24
     bd2:	9f 93       	push	r25
     bd4:	af 93       	push	r26
     bd6:	bf 93       	push	r27
     bd8:	ef 93       	push	r30
     bda:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     bdc:	e0 91 0b 20 	lds	r30, 0x200B
     be0:	f0 91 0c 20 	lds	r31, 0x200C
     be4:	30 97       	sbiw	r30, 0x00	; 0
     be6:	09 f0       	breq	.+2      	; 0xbea <__vector_47+0x30>
		tc_tce0_ovf_callback();
     be8:	09 95       	icall
	}
}
     bea:	ff 91       	pop	r31
     bec:	ef 91       	pop	r30
     bee:	bf 91       	pop	r27
     bf0:	af 91       	pop	r26
     bf2:	9f 91       	pop	r25
     bf4:	8f 91       	pop	r24
     bf6:	7f 91       	pop	r23
     bf8:	6f 91       	pop	r22
     bfa:	5f 91       	pop	r21
     bfc:	4f 91       	pop	r20
     bfe:	3f 91       	pop	r19
     c00:	2f 91       	pop	r18
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	2f 93       	push	r18
     c18:	3f 93       	push	r19
     c1a:	4f 93       	push	r20
     c1c:	5f 93       	push	r21
     c1e:	6f 93       	push	r22
     c20:	7f 93       	push	r23
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	af 93       	push	r26
     c28:	bf 93       	push	r27
     c2a:	ef 93       	push	r30
     c2c:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     c2e:	e0 91 09 20 	lds	r30, 0x2009
     c32:	f0 91 0a 20 	lds	r31, 0x200A
     c36:	30 97       	sbiw	r30, 0x00	; 0
     c38:	09 f0       	breq	.+2      	; 0xc3c <__vector_48+0x30>
		tc_tce0_err_callback();
     c3a:	09 95       	icall
	}
}
     c3c:	ff 91       	pop	r31
     c3e:	ef 91       	pop	r30
     c40:	bf 91       	pop	r27
     c42:	af 91       	pop	r26
     c44:	9f 91       	pop	r25
     c46:	8f 91       	pop	r24
     c48:	7f 91       	pop	r23
     c4a:	6f 91       	pop	r22
     c4c:	5f 91       	pop	r21
     c4e:	4f 91       	pop	r20
     c50:	3f 91       	pop	r19
     c52:	2f 91       	pop	r18
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	2f 93       	push	r18
     c6a:	3f 93       	push	r19
     c6c:	4f 93       	push	r20
     c6e:	5f 93       	push	r21
     c70:	6f 93       	push	r22
     c72:	7f 93       	push	r23
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	ef 93       	push	r30
     c7e:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     c80:	e0 91 07 20 	lds	r30, 0x2007
     c84:	f0 91 08 20 	lds	r31, 0x2008
     c88:	30 97       	sbiw	r30, 0x00	; 0
     c8a:	09 f0       	breq	.+2      	; 0xc8e <__vector_49+0x30>
		tc_tce0_cca_callback();
     c8c:	09 95       	icall
	}
}
     c8e:	ff 91       	pop	r31
     c90:	ef 91       	pop	r30
     c92:	bf 91       	pop	r27
     c94:	af 91       	pop	r26
     c96:	9f 91       	pop	r25
     c98:	8f 91       	pop	r24
     c9a:	7f 91       	pop	r23
     c9c:	6f 91       	pop	r22
     c9e:	5f 91       	pop	r21
     ca0:	4f 91       	pop	r20
     ca2:	3f 91       	pop	r19
     ca4:	2f 91       	pop	r18
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	0f 90       	pop	r0
     cac:	1f 90       	pop	r1
     cae:	18 95       	reti

00000cb0 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     cb0:	1f 92       	push	r1
     cb2:	0f 92       	push	r0
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	0f 92       	push	r0
     cb8:	11 24       	eor	r1, r1
     cba:	2f 93       	push	r18
     cbc:	3f 93       	push	r19
     cbe:	4f 93       	push	r20
     cc0:	5f 93       	push	r21
     cc2:	6f 93       	push	r22
     cc4:	7f 93       	push	r23
     cc6:	8f 93       	push	r24
     cc8:	9f 93       	push	r25
     cca:	af 93       	push	r26
     ccc:	bf 93       	push	r27
     cce:	ef 93       	push	r30
     cd0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     cd2:	e0 91 05 20 	lds	r30, 0x2005
     cd6:	f0 91 06 20 	lds	r31, 0x2006
     cda:	30 97       	sbiw	r30, 0x00	; 0
     cdc:	09 f0       	breq	.+2      	; 0xce0 <__vector_50+0x30>
		tc_tce0_ccb_callback();
     cde:	09 95       	icall
	}
}
     ce0:	ff 91       	pop	r31
     ce2:	ef 91       	pop	r30
     ce4:	bf 91       	pop	r27
     ce6:	af 91       	pop	r26
     ce8:	9f 91       	pop	r25
     cea:	8f 91       	pop	r24
     cec:	7f 91       	pop	r23
     cee:	6f 91       	pop	r22
     cf0:	5f 91       	pop	r21
     cf2:	4f 91       	pop	r20
     cf4:	3f 91       	pop	r19
     cf6:	2f 91       	pop	r18
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	2f 93       	push	r18
     d0e:	3f 93       	push	r19
     d10:	4f 93       	push	r20
     d12:	5f 93       	push	r21
     d14:	6f 93       	push	r22
     d16:	7f 93       	push	r23
     d18:	8f 93       	push	r24
     d1a:	9f 93       	push	r25
     d1c:	af 93       	push	r26
     d1e:	bf 93       	push	r27
     d20:	ef 93       	push	r30
     d22:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     d24:	e0 91 03 20 	lds	r30, 0x2003
     d28:	f0 91 04 20 	lds	r31, 0x2004
     d2c:	30 97       	sbiw	r30, 0x00	; 0
     d2e:	09 f0       	breq	.+2      	; 0xd32 <__vector_51+0x30>
		tc_tce0_ccc_callback();
     d30:	09 95       	icall
	}
}
     d32:	ff 91       	pop	r31
     d34:	ef 91       	pop	r30
     d36:	bf 91       	pop	r27
     d38:	af 91       	pop	r26
     d3a:	9f 91       	pop	r25
     d3c:	8f 91       	pop	r24
     d3e:	7f 91       	pop	r23
     d40:	6f 91       	pop	r22
     d42:	5f 91       	pop	r21
     d44:	4f 91       	pop	r20
     d46:	3f 91       	pop	r19
     d48:	2f 91       	pop	r18
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	2f 93       	push	r18
     d60:	3f 93       	push	r19
     d62:	4f 93       	push	r20
     d64:	5f 93       	push	r21
     d66:	6f 93       	push	r22
     d68:	7f 93       	push	r23
     d6a:	8f 93       	push	r24
     d6c:	9f 93       	push	r25
     d6e:	af 93       	push	r26
     d70:	bf 93       	push	r27
     d72:	ef 93       	push	r30
     d74:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     d76:	e0 91 01 20 	lds	r30, 0x2001
     d7a:	f0 91 02 20 	lds	r31, 0x2002
     d7e:	30 97       	sbiw	r30, 0x00	; 0
     d80:	09 f0       	breq	.+2      	; 0xd84 <__vector_52+0x30>
		tc_tce0_ccd_callback();
     d82:	09 95       	icall
	}
}
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	7f 91       	pop	r23
     d92:	6f 91       	pop	r22
     d94:	5f 91       	pop	r21
     d96:	4f 91       	pop	r20
     d98:	3f 91       	pop	r19
     d9a:	2f 91       	pop	r18
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     da6:	fc 01       	movw	r30, r24
     da8:	81 81       	ldd	r24, Z+1	; 0x01
     daa:	85 ff       	sbrs	r24, 5
     dac:	fd cf       	rjmp	.-6      	; 0xda8 <usart_putchar+0x2>
     dae:	60 83       	st	Z, r22
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	08 95       	ret

00000db6 <usart_getchar>:
     db6:	fc 01       	movw	r30, r24
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	88 23       	and	r24, r24
     dbc:	ec f7       	brge	.-6      	; 0xdb8 <usart_getchar+0x2>
     dbe:	80 81       	ld	r24, Z
     dc0:	08 95       	ret

00000dc2 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     dc2:	4f 92       	push	r4
     dc4:	5f 92       	push	r5
     dc6:	6f 92       	push	r6
     dc8:	7f 92       	push	r7
     dca:	8f 92       	push	r8
     dcc:	9f 92       	push	r9
     dce:	af 92       	push	r10
     dd0:	bf 92       	push	r11
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
     de4:	4a 01       	movw	r8, r20
     de6:	5b 01       	movw	r10, r22
     de8:	28 01       	movw	r4, r16
     dea:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     dec:	d9 01       	movw	r26, r18
     dee:	c8 01       	movw	r24, r16
     df0:	68 94       	set
     df2:	12 f8       	bld	r1, 2
     df4:	b6 95       	lsr	r27
     df6:	a7 95       	ror	r26
     df8:	97 95       	ror	r25
     dfa:	87 95       	ror	r24
     dfc:	16 94       	lsr	r1
     dfe:	d1 f7       	brne	.-12     	; 0xdf4 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     e00:	b9 01       	movw	r22, r18
     e02:	a8 01       	movw	r20, r16
     e04:	03 2e       	mov	r0, r19
     e06:	36 e1       	ldi	r19, 0x16	; 22
     e08:	76 95       	lsr	r23
     e0a:	67 95       	ror	r22
     e0c:	57 95       	ror	r21
     e0e:	47 95       	ror	r20
     e10:	3a 95       	dec	r19
     e12:	d1 f7       	brne	.-12     	; 0xe08 <usart_set_baudrate+0x46>
     e14:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     e16:	2c 81       	ldd	r18, Y+4	; 0x04
     e18:	22 fd       	sbrc	r18, 2
     e1a:	08 c0       	rjmp	.+16     	; 0xe2c <usart_set_baudrate+0x6a>
		max_rate /= 2;
     e1c:	b6 95       	lsr	r27
     e1e:	a7 95       	ror	r26
     e20:	97 95       	ror	r25
     e22:	87 95       	ror	r24
		min_rate /= 2;
     e24:	76 95       	lsr	r23
     e26:	67 95       	ror	r22
     e28:	57 95       	ror	r21
     e2a:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     e2c:	88 15       	cp	r24, r8
     e2e:	99 05       	cpc	r25, r9
     e30:	aa 05       	cpc	r26, r10
     e32:	bb 05       	cpc	r27, r11
     e34:	08 f4       	brcc	.+2      	; 0xe38 <usart_set_baudrate+0x76>
     e36:	a2 c0       	rjmp	.+324    	; 0xf7c <usart_set_baudrate+0x1ba>
     e38:	84 16       	cp	r8, r20
     e3a:	95 06       	cpc	r9, r21
     e3c:	a6 06       	cpc	r10, r22
     e3e:	b7 06       	cpc	r11, r23
     e40:	08 f4       	brcc	.+2      	; 0xe44 <usart_set_baudrate+0x82>
     e42:	9e c0       	rjmp	.+316    	; 0xf80 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	82 fd       	sbrc	r24, 2
     e48:	04 c0       	rjmp	.+8      	; 0xe52 <usart_set_baudrate+0x90>
		baud *= 2;
     e4a:	88 0c       	add	r8, r8
     e4c:	99 1c       	adc	r9, r9
     e4e:	aa 1c       	adc	r10, r10
     e50:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     e52:	c3 01       	movw	r24, r6
     e54:	b2 01       	movw	r22, r4
     e56:	a5 01       	movw	r20, r10
     e58:	94 01       	movw	r18, r8
     e5a:	ef d6       	rcall	.+3550   	; 0x1c3a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     e5c:	2f 3f       	cpi	r18, 0xFF	; 255
     e5e:	31 05       	cpc	r19, r1
     e60:	41 05       	cpc	r20, r1
     e62:	51 05       	cpc	r21, r1
     e64:	08 f4       	brcc	.+2      	; 0xe68 <usart_set_baudrate+0xa6>
     e66:	8e c0       	rjmp	.+284    	; 0xf84 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     e68:	c1 2c       	mov	r12, r1
     e6a:	d1 2c       	mov	r13, r1
     e6c:	76 01       	movw	r14, r12
     e6e:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     e70:	19 ef       	ldi	r17, 0xF9	; 249
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <usart_set_baudrate+0xbc>
		if (ratio < limit) {
     e74:	2c 15       	cp	r18, r12
     e76:	3d 05       	cpc	r19, r13
     e78:	4e 05       	cpc	r20, r14
     e7a:	5f 05       	cpc	r21, r15
     e7c:	68 f0       	brcs	.+26     	; 0xe98 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
     e7e:	cc 0c       	add	r12, r12
     e80:	dd 1c       	adc	r13, r13
     e82:	ee 1c       	adc	r14, r14
     e84:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     e86:	1d 3f       	cpi	r17, 0xFD	; 253
     e88:	14 f4       	brge	.+4      	; 0xe8e <usart_set_baudrate+0xcc>
			limit |= 1;
     e8a:	68 94       	set
     e8c:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     e8e:	1f 5f       	subi	r17, 0xFF	; 255
     e90:	17 30       	cpi	r17, 0x07	; 7
     e92:	81 f7       	brne	.-32     	; 0xe74 <usart_set_baudrate+0xb2>
     e94:	21 2f       	mov	r18, r17
     e96:	4e c0       	rjmp	.+156    	; 0xf34 <usart_set_baudrate+0x172>
     e98:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     e9a:	11 23       	and	r17, r17
     e9c:	0c f0       	brlt	.+2      	; 0xea0 <usart_set_baudrate+0xde>
     e9e:	4a c0       	rjmp	.+148    	; 0xf34 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     ea0:	d5 01       	movw	r26, r10
     ea2:	c4 01       	movw	r24, r8
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	aa 1f       	adc	r26, r26
     eaa:	bb 1f       	adc	r27, r27
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	aa 1f       	adc	r26, r26
     eb2:	bb 1f       	adc	r27, r27
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	aa 1f       	adc	r26, r26
     eba:	bb 1f       	adc	r27, r27
     ebc:	48 1a       	sub	r4, r24
     ebe:	59 0a       	sbc	r5, r25
     ec0:	6a 0a       	sbc	r6, r26
     ec2:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     ec4:	1e 3f       	cpi	r17, 0xFE	; 254
     ec6:	ec f4       	brge	.+58     	; 0xf02 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     ec8:	6d ef       	ldi	r22, 0xFD	; 253
     eca:	7f ef       	ldi	r23, 0xFF	; 255
     ecc:	61 1b       	sub	r22, r17
     ece:	71 09       	sbc	r23, r1
     ed0:	17 fd       	sbrc	r17, 7
     ed2:	73 95       	inc	r23
     ed4:	04 c0       	rjmp	.+8      	; 0xede <usart_set_baudrate+0x11c>
     ed6:	44 0c       	add	r4, r4
     ed8:	55 1c       	adc	r5, r5
     eda:	66 1c       	adc	r6, r6
     edc:	77 1c       	adc	r7, r7
     ede:	6a 95       	dec	r22
     ee0:	d2 f7       	brpl	.-12     	; 0xed6 <usart_set_baudrate+0x114>
     ee2:	d5 01       	movw	r26, r10
     ee4:	c4 01       	movw	r24, r8
     ee6:	b6 95       	lsr	r27
     ee8:	a7 95       	ror	r26
     eea:	97 95       	ror	r25
     eec:	87 95       	ror	r24
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	64 0d       	add	r22, r4
     ef4:	75 1d       	adc	r23, r5
     ef6:	86 1d       	adc	r24, r6
     ef8:	97 1d       	adc	r25, r7
     efa:	a5 01       	movw	r20, r10
     efc:	94 01       	movw	r18, r8
     efe:	9d d6       	rcall	.+3386   	; 0x1c3a <__udivmodsi4>
     f00:	34 c0       	rjmp	.+104    	; 0xf6a <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
     f02:	23 e0       	ldi	r18, 0x03	; 3
     f04:	21 0f       	add	r18, r17
     f06:	d5 01       	movw	r26, r10
     f08:	c4 01       	movw	r24, r8
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <usart_set_baudrate+0x152>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	aa 1f       	adc	r26, r26
     f12:	bb 1f       	adc	r27, r27
     f14:	2a 95       	dec	r18
     f16:	d2 f7       	brpl	.-12     	; 0xf0c <usart_set_baudrate+0x14a>
     f18:	9c 01       	movw	r18, r24
     f1a:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     f1c:	b6 95       	lsr	r27
     f1e:	a7 95       	ror	r26
     f20:	97 95       	ror	r25
     f22:	87 95       	ror	r24
     f24:	bc 01       	movw	r22, r24
     f26:	cd 01       	movw	r24, r26
     f28:	64 0d       	add	r22, r4
     f2a:	75 1d       	adc	r23, r5
     f2c:	86 1d       	adc	r24, r6
     f2e:	97 1d       	adc	r25, r7
     f30:	84 d6       	rcall	.+3336   	; 0x1c3a <__udivmodsi4>
     f32:	1b c0       	rjmp	.+54     	; 0xf6a <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     f34:	2d 5f       	subi	r18, 0xFD	; 253
     f36:	d5 01       	movw	r26, r10
     f38:	c4 01       	movw	r24, r8
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <usart_set_baudrate+0x182>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	aa 1f       	adc	r26, r26
     f42:	bb 1f       	adc	r27, r27
     f44:	2a 95       	dec	r18
     f46:	d2 f7       	brpl	.-12     	; 0xf3c <usart_set_baudrate+0x17a>
     f48:	9c 01       	movw	r18, r24
     f4a:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     f4c:	b6 95       	lsr	r27
     f4e:	a7 95       	ror	r26
     f50:	97 95       	ror	r25
     f52:	87 95       	ror	r24
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	64 0d       	add	r22, r4
     f5a:	75 1d       	adc	r23, r5
     f5c:	86 1d       	adc	r24, r6
     f5e:	97 1d       	adc	r25, r7
     f60:	6c d6       	rcall	.+3288   	; 0x1c3a <__udivmodsi4>
     f62:	21 50       	subi	r18, 0x01	; 1
     f64:	31 09       	sbc	r19, r1
     f66:	41 09       	sbc	r20, r1
     f68:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     f6a:	83 2f       	mov	r24, r19
     f6c:	8f 70       	andi	r24, 0x0F	; 15
     f6e:	12 95       	swap	r17
     f70:	10 7f       	andi	r17, 0xF0	; 240
     f72:	18 2b       	or	r17, r24
     f74:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     f76:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	18 c0       	rjmp	.+48     	; 0xfac <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	16 c0       	rjmp	.+44     	; 0xfac <usart_set_baudrate+0x1ea>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	14 c0       	rjmp	.+40     	; 0xfac <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     f84:	d5 01       	movw	r26, r10
     f86:	c4 01       	movw	r24, r8
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	aa 1f       	adc	r26, r26
     f8e:	bb 1f       	adc	r27, r27
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	aa 1f       	adc	r26, r26
     f96:	bb 1f       	adc	r27, r27
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	aa 1f       	adc	r26, r26
     f9e:	bb 1f       	adc	r27, r27
     fa0:	48 1a       	sub	r4, r24
     fa2:	59 0a       	sbc	r5, r25
     fa4:	6a 0a       	sbc	r6, r26
     fa6:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     fa8:	19 ef       	ldi	r17, 0xF9	; 249
     faa:	8e cf       	rjmp	.-228    	; 0xec8 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	df 90       	pop	r13
     fba:	cf 90       	pop	r12
     fbc:	bf 90       	pop	r11
     fbe:	af 90       	pop	r10
     fc0:	9f 90       	pop	r9
     fc2:	8f 90       	pop	r8
     fc4:	7f 90       	pop	r7
     fc6:	6f 90       	pop	r6
     fc8:	5f 90       	pop	r5
     fca:	4f 90       	pop	r4
     fcc:	08 95       	ret

00000fce <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ec 01       	movw	r28, r24
     fd8:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <usart_init_rs232+0x12>
     fde:	be c0       	rjmp	.+380    	; 0x115c <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     fe0:	80 3c       	cpi	r24, 0xC0	; 192
     fe2:	91 05       	cpc	r25, r1
     fe4:	21 f4       	brne	.+8      	; 0xfee <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     fe6:	60 e1       	ldi	r22, 0x10	; 16
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	ad d2       	rcall	.+1370   	; 0x1546 <sysclk_enable_module>
     fec:	b7 c0       	rjmp	.+366    	; 0x115c <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     fee:	c1 15       	cp	r28, r1
     ff0:	84 e0       	ldi	r24, 0x04	; 4
     ff2:	d8 07       	cpc	r29, r24
     ff4:	21 f4       	brne	.+8      	; 0xffe <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     ff6:	64 e0       	ldi	r22, 0x04	; 4
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	a5 d2       	rcall	.+1354   	; 0x1546 <sysclk_enable_module>
     ffc:	af c0       	rjmp	.+350    	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     ffe:	c0 38       	cpi	r28, 0x80	; 128
    1000:	e1 e0       	ldi	r30, 0x01	; 1
    1002:	de 07       	cpc	r29, r30
    1004:	21 f4       	brne	.+8      	; 0x100e <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1006:	62 e0       	ldi	r22, 0x02	; 2
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	9d d2       	rcall	.+1338   	; 0x1546 <sysclk_enable_module>
    100c:	a7 c0       	rjmp	.+334    	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    100e:	c1 15       	cp	r28, r1
    1010:	f1 e0       	ldi	r31, 0x01	; 1
    1012:	df 07       	cpc	r29, r31
    1014:	21 f4       	brne	.+8      	; 0x101e <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	95 d2       	rcall	.+1322   	; 0x1546 <sysclk_enable_module>
    101c:	9f c0       	rjmp	.+318    	; 0x115c <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    101e:	c0 38       	cpi	r28, 0x80	; 128
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	d8 07       	cpc	r29, r24
    1024:	21 f4       	brne	.+8      	; 0x102e <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	8d d2       	rcall	.+1306   	; 0x1546 <sysclk_enable_module>
    102c:	97 c0       	rjmp	.+302    	; 0x115c <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    102e:	c1 15       	cp	r28, r1
    1030:	e2 e0       	ldi	r30, 0x02	; 2
    1032:	de 07       	cpc	r29, r30
    1034:	21 f4       	brne	.+8      	; 0x103e <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1036:	62 e0       	ldi	r22, 0x02	; 2
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	85 d2       	rcall	.+1290   	; 0x1546 <sysclk_enable_module>
    103c:	8f c0       	rjmp	.+286    	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    103e:	c0 32       	cpi	r28, 0x20	; 32
    1040:	f3 e0       	ldi	r31, 0x03	; 3
    1042:	df 07       	cpc	r29, r31
    1044:	21 f4       	brne	.+8      	; 0x104e <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1046:	64 e0       	ldi	r22, 0x04	; 4
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	7d d2       	rcall	.+1274   	; 0x1546 <sysclk_enable_module>
    104c:	87 c0       	rjmp	.+270    	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    104e:	c1 15       	cp	r28, r1
    1050:	88 e0       	ldi	r24, 0x08	; 8
    1052:	d8 07       	cpc	r29, r24
    1054:	21 f4       	brne	.+8      	; 0x105e <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	83 e0       	ldi	r24, 0x03	; 3
    105a:	75 d2       	rcall	.+1258   	; 0x1546 <sysclk_enable_module>
    105c:	7f c0       	rjmp	.+254    	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    105e:	c1 15       	cp	r28, r1
    1060:	e9 e0       	ldi	r30, 0x09	; 9
    1062:	de 07       	cpc	r29, r30
    1064:	21 f4       	brne	.+8      	; 0x106e <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1066:	61 e0       	ldi	r22, 0x01	; 1
    1068:	84 e0       	ldi	r24, 0x04	; 4
    106a:	6d d2       	rcall	.+1242   	; 0x1546 <sysclk_enable_module>
    106c:	77 c0       	rjmp	.+238    	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    106e:	c1 15       	cp	r28, r1
    1070:	fa e0       	ldi	r31, 0x0A	; 10
    1072:	df 07       	cpc	r29, r31
    1074:	21 f4       	brne	.+8      	; 0x107e <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	85 e0       	ldi	r24, 0x05	; 5
    107a:	65 d2       	rcall	.+1226   	; 0x1546 <sysclk_enable_module>
    107c:	6f c0       	rjmp	.+222    	; 0x115c <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    107e:	c0 34       	cpi	r28, 0x40	; 64
    1080:	88 e0       	ldi	r24, 0x08	; 8
    1082:	d8 07       	cpc	r29, r24
    1084:	21 f4       	brne	.+8      	; 0x108e <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1086:	62 e0       	ldi	r22, 0x02	; 2
    1088:	83 e0       	ldi	r24, 0x03	; 3
    108a:	5d d2       	rcall	.+1210   	; 0x1546 <sysclk_enable_module>
    108c:	67 c0       	rjmp	.+206    	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    108e:	c0 34       	cpi	r28, 0x40	; 64
    1090:	e9 e0       	ldi	r30, 0x09	; 9
    1092:	de 07       	cpc	r29, r30
    1094:	21 f4       	brne	.+8      	; 0x109e <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1096:	62 e0       	ldi	r22, 0x02	; 2
    1098:	84 e0       	ldi	r24, 0x04	; 4
    109a:	55 d2       	rcall	.+1194   	; 0x1546 <sysclk_enable_module>
    109c:	5f c0       	rjmp	.+190    	; 0x115c <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    109e:	c0 39       	cpi	r28, 0x90	; 144
    10a0:	f8 e0       	ldi	r31, 0x08	; 8
    10a2:	df 07       	cpc	r29, r31
    10a4:	21 f4       	brne	.+8      	; 0x10ae <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    10a6:	64 e0       	ldi	r22, 0x04	; 4
    10a8:	83 e0       	ldi	r24, 0x03	; 3
    10aa:	4d d2       	rcall	.+1178   	; 0x1546 <sysclk_enable_module>
    10ac:	57 c0       	rjmp	.+174    	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    10ae:	c0 39       	cpi	r28, 0x90	; 144
    10b0:	89 e0       	ldi	r24, 0x09	; 9
    10b2:	d8 07       	cpc	r29, r24
    10b4:	21 f4       	brne	.+8      	; 0x10be <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    10b6:	64 e0       	ldi	r22, 0x04	; 4
    10b8:	84 e0       	ldi	r24, 0x04	; 4
    10ba:	45 d2       	rcall	.+1162   	; 0x1546 <sysclk_enable_module>
    10bc:	4f c0       	rjmp	.+158    	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    10be:	c0 39       	cpi	r28, 0x90	; 144
    10c0:	ea e0       	ldi	r30, 0x0A	; 10
    10c2:	de 07       	cpc	r29, r30
    10c4:	21 f4       	brne	.+8      	; 0x10ce <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    10c6:	64 e0       	ldi	r22, 0x04	; 4
    10c8:	85 e0       	ldi	r24, 0x05	; 5
    10ca:	3d d2       	rcall	.+1146   	; 0x1546 <sysclk_enable_module>
    10cc:	47 c0       	rjmp	.+142    	; 0x115c <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    10ce:	c0 3c       	cpi	r28, 0xC0	; 192
    10d0:	f8 e0       	ldi	r31, 0x08	; 8
    10d2:	df 07       	cpc	r29, r31
    10d4:	21 f4       	brne	.+8      	; 0x10de <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    10d6:	68 e0       	ldi	r22, 0x08	; 8
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	35 d2       	rcall	.+1130   	; 0x1546 <sysclk_enable_module>
    10dc:	3f c0       	rjmp	.+126    	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    10de:	c0 3c       	cpi	r28, 0xC0	; 192
    10e0:	89 e0       	ldi	r24, 0x09	; 9
    10e2:	d8 07       	cpc	r29, r24
    10e4:	21 f4       	brne	.+8      	; 0x10ee <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    10e6:	68 e0       	ldi	r22, 0x08	; 8
    10e8:	84 e0       	ldi	r24, 0x04	; 4
    10ea:	2d d2       	rcall	.+1114   	; 0x1546 <sysclk_enable_module>
    10ec:	37 c0       	rjmp	.+110    	; 0x115c <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    10ee:	c0 3a       	cpi	r28, 0xA0	; 160
    10f0:	e8 e0       	ldi	r30, 0x08	; 8
    10f2:	de 07       	cpc	r29, r30
    10f4:	21 f4       	brne	.+8      	; 0x10fe <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    10f6:	60 e1       	ldi	r22, 0x10	; 16
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	25 d2       	rcall	.+1098   	; 0x1546 <sysclk_enable_module>
    10fc:	2f c0       	rjmp	.+94     	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    10fe:	c0 3a       	cpi	r28, 0xA0	; 160
    1100:	f9 e0       	ldi	r31, 0x09	; 9
    1102:	df 07       	cpc	r29, r31
    1104:	21 f4       	brne	.+8      	; 0x110e <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1106:	60 e1       	ldi	r22, 0x10	; 16
    1108:	84 e0       	ldi	r24, 0x04	; 4
    110a:	1d d2       	rcall	.+1082   	; 0x1546 <sysclk_enable_module>
    110c:	27 c0       	rjmp	.+78     	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    110e:	c0 3a       	cpi	r28, 0xA0	; 160
    1110:	8a e0       	ldi	r24, 0x0A	; 10
    1112:	d8 07       	cpc	r29, r24
    1114:	21 f4       	brne	.+8      	; 0x111e <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1116:	60 e1       	ldi	r22, 0x10	; 16
    1118:	85 e0       	ldi	r24, 0x05	; 5
    111a:	15 d2       	rcall	.+1066   	; 0x1546 <sysclk_enable_module>
    111c:	1f c0       	rjmp	.+62     	; 0x115c <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    111e:	c0 3b       	cpi	r28, 0xB0	; 176
    1120:	e8 e0       	ldi	r30, 0x08	; 8
    1122:	de 07       	cpc	r29, r30
    1124:	21 f4       	brne	.+8      	; 0x112e <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1126:	60 e2       	ldi	r22, 0x20	; 32
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	0d d2       	rcall	.+1050   	; 0x1546 <sysclk_enable_module>
    112c:	17 c0       	rjmp	.+46     	; 0x115c <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    112e:	c0 3b       	cpi	r28, 0xB0	; 176
    1130:	f9 e0       	ldi	r31, 0x09	; 9
    1132:	df 07       	cpc	r29, r31
    1134:	21 f4       	brne	.+8      	; 0x113e <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1136:	60 e2       	ldi	r22, 0x20	; 32
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	05 d2       	rcall	.+1034   	; 0x1546 <sysclk_enable_module>
    113c:	0f c0       	rjmp	.+30     	; 0x115c <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    113e:	c0 38       	cpi	r28, 0x80	; 128
    1140:	84 e0       	ldi	r24, 0x04	; 4
    1142:	d8 07       	cpc	r29, r24
    1144:	21 f4       	brne	.+8      	; 0x114e <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1146:	60 e4       	ldi	r22, 0x40	; 64
    1148:	83 e0       	ldi	r24, 0x03	; 3
    114a:	fd d1       	rcall	.+1018   	; 0x1546 <sysclk_enable_module>
    114c:	07 c0       	rjmp	.+14     	; 0x115c <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    114e:	c0 3a       	cpi	r28, 0xA0	; 160
    1150:	e4 e0       	ldi	r30, 0x04	; 4
    1152:	de 07       	cpc	r29, r30
    1154:	19 f4       	brne	.+6      	; 0x115c <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1156:	60 e4       	ldi	r22, 0x40	; 64
    1158:	85 e0       	ldi	r24, 0x05	; 5
    115a:	f5 d1       	rcall	.+1002   	; 0x1546 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	8f 73       	andi	r24, 0x3F	; 63
    1160:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1162:	f8 01       	movw	r30, r16
    1164:	94 81       	ldd	r25, Z+4	; 0x04
    1166:	85 81       	ldd	r24, Z+5	; 0x05
    1168:	89 2b       	or	r24, r25
    116a:	96 81       	ldd	r25, Z+6	; 0x06
    116c:	99 23       	and	r25, r25
    116e:	11 f0       	breq	.+4      	; 0x1174 <usart_init_rs232+0x1a6>
    1170:	98 e0       	ldi	r25, 0x08	; 8
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <usart_init_rs232+0x1a8>
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	89 2b       	or	r24, r25
    1178:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    117a:	f8 01       	movw	r30, r16
    117c:	40 81       	ld	r20, Z
    117e:	51 81       	ldd	r21, Z+1	; 0x01
    1180:	62 81       	ldd	r22, Z+2	; 0x02
    1182:	73 81       	ldd	r23, Z+3	; 0x03
    1184:	00 e0       	ldi	r16, 0x00	; 0
    1186:	18 e4       	ldi	r17, 0x48	; 72
    1188:	28 ee       	ldi	r18, 0xE8	; 232
    118a:	31 e0       	ldi	r19, 0x01	; 1
    118c:	ce 01       	movw	r24, r28
    118e:	19 de       	rcall	.-974    	; 0xdc2 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	98 60       	ori	r25, 0x08	; 8
    1194:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	90 61       	ori	r25, 0x10	; 16
    119a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	4f 93       	push	r20
    11b6:	5f 93       	push	r21
    11b8:	6f 93       	push	r22
    11ba:	7f 93       	push	r23
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	af 93       	push	r26
    11c2:	bf 93       	push	r27
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    11c8:	e0 e0       	ldi	r30, 0x00	; 0
    11ca:	f2 e0       	ldi	r31, 0x02	; 2
    11cc:	44 a1       	ldd	r20, Z+36	; 0x24
    11ce:	55 a1       	ldd	r21, Z+37	; 0x25
    11d0:	e0 91 3d 20 	lds	r30, 0x203D
    11d4:	f0 91 3e 20 	lds	r31, 0x203E
    11d8:	61 e0       	ldi	r22, 0x01	; 1
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	09 95       	icall
}
    11e0:	ff 91       	pop	r31
    11e2:	ef 91       	pop	r30
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	9f 91       	pop	r25
    11ea:	8f 91       	pop	r24
    11ec:	7f 91       	pop	r23
    11ee:	6f 91       	pop	r22
    11f0:	5f 91       	pop	r21
    11f2:	4f 91       	pop	r20
    11f4:	3f 91       	pop	r19
    11f6:	2f 91       	pop	r18
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	0f 90       	pop	r0
    11fe:	1f 90       	pop	r1
    1200:	18 95       	reti

00001202 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	2f 93       	push	r18
    120e:	3f 93       	push	r19
    1210:	4f 93       	push	r20
    1212:	5f 93       	push	r21
    1214:	6f 93       	push	r22
    1216:	7f 93       	push	r23
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25
    121c:	af 93       	push	r26
    121e:	bf 93       	push	r27
    1220:	ef 93       	push	r30
    1222:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    1224:	e8 e2       	ldi	r30, 0x28	; 40
    1226:	f2 e0       	ldi	r31, 0x02	; 2
    1228:	44 81       	ldd	r20, Z+4	; 0x04
    122a:	55 81       	ldd	r21, Z+5	; 0x05
    122c:	e0 91 3d 20 	lds	r30, 0x203D
    1230:	f0 91 3e 20 	lds	r31, 0x203E
    1234:	62 e0       	ldi	r22, 0x02	; 2
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	09 95       	icall
}
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1280:	e0 e3       	ldi	r30, 0x30	; 48
    1282:	f2 e0       	ldi	r31, 0x02	; 2
    1284:	44 81       	ldd	r20, Z+4	; 0x04
    1286:	55 81       	ldd	r21, Z+5	; 0x05
    1288:	e0 91 3d 20 	lds	r30, 0x203D
    128c:	f0 91 3e 20 	lds	r31, 0x203E
    1290:	64 e0       	ldi	r22, 0x04	; 4
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	09 95       	icall
}
    1298:	ff 91       	pop	r31
    129a:	ef 91       	pop	r30
    129c:	bf 91       	pop	r27
    129e:	af 91       	pop	r26
    12a0:	9f 91       	pop	r25
    12a2:	8f 91       	pop	r24
    12a4:	7f 91       	pop	r23
    12a6:	6f 91       	pop	r22
    12a8:	5f 91       	pop	r21
    12aa:	4f 91       	pop	r20
    12ac:	3f 91       	pop	r19
    12ae:	2f 91       	pop	r18
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    12ba:	1f 92       	push	r1
    12bc:	0f 92       	push	r0
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	0f 92       	push	r0
    12c2:	11 24       	eor	r1, r1
    12c4:	2f 93       	push	r18
    12c6:	3f 93       	push	r19
    12c8:	4f 93       	push	r20
    12ca:	5f 93       	push	r21
    12cc:	6f 93       	push	r22
    12ce:	7f 93       	push	r23
    12d0:	8f 93       	push	r24
    12d2:	9f 93       	push	r25
    12d4:	af 93       	push	r26
    12d6:	bf 93       	push	r27
    12d8:	ef 93       	push	r30
    12da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    12dc:	e8 e3       	ldi	r30, 0x38	; 56
    12de:	f2 e0       	ldi	r31, 0x02	; 2
    12e0:	44 81       	ldd	r20, Z+4	; 0x04
    12e2:	55 81       	ldd	r21, Z+5	; 0x05
    12e4:	e0 91 3d 20 	lds	r30, 0x203D
    12e8:	f0 91 3e 20 	lds	r31, 0x203E
    12ec:	68 e0       	ldi	r22, 0x08	; 8
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	92 e0       	ldi	r25, 0x02	; 2
    12f2:	09 95       	icall
}
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	ec 01       	movw	r28, r24
    1326:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1328:	c1 15       	cp	r28, r1
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	d8 07       	cpc	r29, r24
    132e:	59 f5       	brne	.+86     	; 0x1386 <adc_write_configuration+0x70>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1330:	61 e2       	ldi	r22, 0x21	; 33
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	1e d1       	rcall	.+572    	; 0x1574 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1338:	e8 2e       	mov	r14, r24
    133a:	f1 2c       	mov	r15, r1
    133c:	60 e2       	ldi	r22, 0x20	; 32
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	18 d1       	rcall	.+560    	; 0x1574 <nvm_read_byte>
		data <<= 8;
    1344:	fe 2c       	mov	r15, r14
    1346:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    1348:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    134a:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    134c:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    134e:	ce 01       	movw	r24, r28
    1350:	c5 d8       	rcall	.-3702   	; 0x4dc <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1352:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	88 83       	st	Y, r24
	adc->CAL = cal;
    1358:	ec 86       	std	Y+12, r14	; 0x0c
    135a:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    135c:	f8 01       	movw	r30, r16
    135e:	85 81       	ldd	r24, Z+5	; 0x05
    1360:	96 81       	ldd	r25, Z+6	; 0x06
    1362:	88 8f       	std	Y+24, r24	; 0x18
    1364:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    1366:	82 81       	ldd	r24, Z+2	; 0x02
    1368:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    136a:	84 81       	ldd	r24, Z+4	; 0x04
    136c:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    136e:	83 81       	ldd	r24, Z+3	; 0x03
    1370:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    1372:	81 81       	ldd	r24, Z+1	; 0x01
    1374:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1376:	82 2f       	mov	r24, r18
    1378:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    137a:	90 81       	ld	r25, Z
    137c:	89 2b       	or	r24, r25
    137e:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    1380:	ce 01       	movw	r24, r28
    1382:	bc d8       	rcall	.-3720   	; 0x4fc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1384:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	08 95       	ret

00001396 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	ec 01       	movw	r28, r24
    13a2:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    13a4:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    13a6:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    13a8:	99 d8       	rcall	.-3790   	; 0x4dc <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    13aa:	88 81       	ld	r24, Y
    13ac:	80 7c       	andi	r24, 0xC0	; 192
    13ae:	f8 01       	movw	r30, r16
    13b0:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    13b2:	88 8d       	ldd	r24, Y+24	; 0x18
    13b4:	99 8d       	ldd	r25, Y+25	; 0x19
    13b6:	85 83       	std	Z+5, r24	; 0x05
    13b8:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    13ca:	ce 01       	movw	r24, r28
    13cc:	97 d8       	rcall	.-3794   	; 0x4fc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13ce:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	08 95       	ret

000013dc <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    13dc:	cf 92       	push	r12
    13de:	df 92       	push	r13
    13e0:	ef 92       	push	r14
    13e2:	ff 92       	push	r15
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	7c 01       	movw	r14, r24
    13ee:	d6 2e       	mov	r13, r22
    13f0:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    13f2:	86 2f       	mov	r24, r22
    13f4:	83 70       	andi	r24, 0x03	; 3
    13f6:	29 f4       	brne	.+10     	; 0x1402 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    13f8:	96 2f       	mov	r25, r22
    13fa:	96 95       	lsr	r25
    13fc:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1402:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1404:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1406:	90 ff       	sbrs	r25, 0
		index++;
    1408:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    140a:	e7 01       	movw	r28, r14
    140c:	a0 96       	adiw	r28, 0x20	; 32
    140e:	98 e0       	ldi	r25, 0x08	; 8
    1410:	89 9f       	mul	r24, r25
    1412:	c0 0d       	add	r28, r0
    1414:	d1 1d       	adc	r29, r1
    1416:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1418:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    141a:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    141c:	c7 01       	movw	r24, r14
    141e:	5e d8       	rcall	.-3908   	; 0x4dc <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1420:	f8 01       	movw	r30, r16
    1422:	80 81       	ld	r24, Z
    1424:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    142a:	81 81       	ldd	r24, Z+1	; 0x01
    142c:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    142e:	d0 fe       	sbrs	r13, 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1432:	83 81       	ldd	r24, Z+3	; 0x03
    1434:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1436:	c7 01       	movw	r24, r14
    1438:	61 d8       	rcall	.-3902   	; 0x4fc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    143a:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	08 95       	ret

0000144e <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    144e:	cf 92       	push	r12
    1450:	df 92       	push	r13
    1452:	ef 92       	push	r14
    1454:	ff 92       	push	r15
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	7c 01       	movw	r14, r24
    1460:	d6 2e       	mov	r13, r22
    1462:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1464:	86 2f       	mov	r24, r22
    1466:	83 70       	andi	r24, 0x03	; 3
    1468:	29 f4       	brne	.+10     	; 0x1474 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    146a:	96 2f       	mov	r25, r22
    146c:	96 95       	lsr	r25
    146e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1474:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1476:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1478:	90 ff       	sbrs	r25, 0
		index++;
    147a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    147c:	87 01       	movw	r16, r14
    147e:	00 5e       	subi	r16, 0xE0	; 224
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	98 e0       	ldi	r25, 0x08	; 8
    1484:	89 9f       	mul	r24, r25
    1486:	00 0d       	add	r16, r0
    1488:	11 1d       	adc	r17, r1
    148a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    148c:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    148e:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1490:	c7 01       	movw	r24, r14
    1492:	24 d8       	rcall	.-4024   	; 0x4dc <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1494:	f8 01       	movw	r30, r16
    1496:	80 81       	ld	r24, Z
    1498:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    149a:	82 81       	ldd	r24, Z+2	; 0x02
    149c:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    149e:	81 81       	ldd	r24, Z+1	; 0x01
    14a0:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    14a2:	d0 fe       	sbrs	r13, 0
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    14a6:	86 81       	ldd	r24, Z+6	; 0x06
    14a8:	8b 83       	std	Y+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    14aa:	c7 01       	movw	r24, r14
    14ac:	27 d8       	rcall	.-4018   	; 0x4fc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14ae:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	df 90       	pop	r13
    14be:	cf 90       	pop	r12
    14c0:	08 95       	ret

000014c2 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	7c 01       	movw	r14, r24
    14d0:	8b 01       	movw	r16, r22
    14d2:	ea 01       	movw	r28, r20
	while (len) {
    14d4:	20 97       	sbiw	r28, 0x00	; 0
    14d6:	41 f0       	breq	.+16     	; 0x14e8 <usart_serial_write_packet+0x26>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    14d8:	f8 01       	movw	r30, r16
    14da:	61 91       	ld	r22, Z+
    14dc:	8f 01       	movw	r16, r30
    14de:	c7 01       	movw	r24, r14
    14e0:	62 dc       	rcall	.-1852   	; 0xda6 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
    14e2:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    14e4:	20 97       	sbiw	r28, 0x00	; 0
    14e6:	c1 f7       	brne	.-16     	; 0x14d8 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	08 95       	ret

000014f8 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	80 93 70 00 	sts	0x0070, r24
    14fe:	80 93 71 00 	sts	0x0071, r24
    1502:	80 93 72 00 	sts	0x0072, r24
    1506:	80 93 73 00 	sts	0x0073, r24
    150a:	80 93 74 00 	sts	0x0074, r24
    150e:	80 93 75 00 	sts	0x0075, r24
    1512:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1516:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1518:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    151a:	e0 e5       	ldi	r30, 0x50	; 80
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	90 81       	ld	r25, Z
    1520:	92 60       	ori	r25, 0x02	; 2
    1522:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1524:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1526:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1528:	81 ff       	sbrs	r24, 1
    152a:	fd cf       	rjmp	.-6      	; 0x1526 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	80 e4       	ldi	r24, 0x40	; 64
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	2a d0       	rcall	.+84     	; 0x1588 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1534:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1536:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1538:	e0 e5       	ldi	r30, 0x50	; 80
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	90 81       	ld	r25, Z
    153e:	9e 7f       	andi	r25, 0xFE	; 254
    1540:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1542:	8f bf       	out	0x3f, r24	; 63
    1544:	08 95       	ret

00001546 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1546:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1548:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    154a:	e8 2f       	mov	r30, r24
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	e0 59       	subi	r30, 0x90	; 144
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	60 95       	com	r22
    1554:	80 81       	ld	r24, Z
    1556:	68 23       	and	r22, r24
    1558:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    155a:	9f bf       	out	0x3f, r25	; 63
    155c:	08 95       	ret

0000155e <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    155e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1560:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1562:	e8 2f       	mov	r30, r24
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	e0 59       	subi	r30, 0x90	; 144
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 81       	ld	r24, Z
    156c:	68 2b       	or	r22, r24
    156e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1570:	9f bf       	out	0x3f, r25	; 63
    1572:	08 95       	ret

00001574 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1574:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1578:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    157a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    157c:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1580:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1582:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1586:	08 95       	ret

00001588 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1588:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    158a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    158c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    158e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1590:	60 83       	st	Z, r22
	ret                             // Return to caller
    1592:	08 95       	ret

00001594 <main>:

uint8_t Samples[SAMPLES_NR];
uint8_t probe[SAMPLES_NR];
uint16_t counter;

int main (void) {
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	2f 97       	sbiw	r28, 0x0f	; 15
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	05 e4       	ldi	r16, 0x45	; 69
    15a4:	10 e2       	ldi	r17, 0x20	; 32
    15a6:	78 01       	movw	r14, r16
    15a8:	0f 2e       	mov	r0, r31
    15aa:	f5 ef       	ldi	r31, 0xF5	; 245
    15ac:	cf 2e       	mov	r12, r31
    15ae:	f4 e2       	ldi	r31, 0x24	; 36
    15b0:	df 2e       	mov	r13, r31
    15b2:	f0 2d       	mov	r31, r0
    15b4:	b8 01       	movw	r22, r16
    15b6:	6e 19       	sub	r22, r14
    15b8:	7f 09       	sbc	r23, r15
	
	for(counter=0;counter<SAMPLES_NR;counter++)
	{
		probe[counter] = (uint8_t)OFFSET + AMP_MVOLT*sin(counter*2.0*PI/T);
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	c9 d1       	rcall	.+914    	; 0x1952 <__floatunsisf>
    15c0:	9b 01       	movw	r18, r22
    15c2:	ac 01       	movw	r20, r24
    15c4:	ce d0       	rcall	.+412    	; 0x1762 <__addsf3>
    15c6:	23 ec       	ldi	r18, 0xC3	; 195
    15c8:	35 ef       	ldi	r19, 0xF5	; 245
    15ca:	48 e4       	ldi	r20, 0x48	; 72
    15cc:	50 e4       	ldi	r21, 0x40	; 64
    15ce:	4f d2       	rcall	.+1182   	; 0x1a6e <__mulsf3>
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	48 e4       	ldi	r20, 0x48	; 72
    15d6:	53 e4       	ldi	r21, 0x43	; 67
    15d8:	28 d1       	rcall	.+592    	; 0x182a <__divsf3>
    15da:	ac d2       	rcall	.+1368   	; 0x1b34 <sin>
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a ef       	ldi	r20, 0xFA	; 250
    15e2:	52 e4       	ldi	r21, 0x42	; 66
    15e4:	44 d2       	rcall	.+1160   	; 0x1a6e <__mulsf3>
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4a ef       	ldi	r20, 0xFA	; 250
    15ec:	52 e4       	ldi	r21, 0x42	; 66
    15ee:	b9 d0       	rcall	.+370    	; 0x1762 <__addsf3>
    15f0:	84 d1       	rcall	.+776    	; 0x18fa <__fixunssfsi>
    15f2:	f8 01       	movw	r30, r16
    15f4:	61 93       	st	Z+, r22
    15f6:	8f 01       	movw	r16, r30
uint8_t probe[SAMPLES_NR];
uint16_t counter;

int main (void) {
	
	for(counter=0;counter<SAMPLES_NR;counter++)
    15f8:	ec 15       	cp	r30, r12
    15fa:	fd 05       	cpc	r31, r13
    15fc:	d9 f6       	brne	.-74     	; 0x15b4 <main+0x20>
    15fe:	0f 2e       	mov	r0, r31
    1600:	f0 eb       	ldi	r31, 0xB0	; 176
    1602:	ef 2e       	mov	r14, r31
    1604:	f4 e0       	ldi	r31, 0x04	; 4
    1606:	ff 2e       	mov	r15, r31
    1608:	f0 2d       	mov	r31, r0
    160a:	e0 92 a5 29 	sts	0x29A5, r14
    160e:	f0 92 a6 29 	sts	0x29A6, r15
	{
		probe[counter] = (uint8_t)OFFSET + AMP_MVOLT*sin(counter*2.0*PI/T);
	}

	// CLK
	sysclk_init();
    1612:	72 df       	rcall	.-284    	; 0x14f8 <sysclk_init>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1614:	e0 e6       	ldi	r30, 0x60	; 96
    1616:	f6 e0       	ldi	r31, 0x06	; 6
    1618:	80 e2       	ldi	r24, 0x20	; 32
    161a:	81 83       	std	Z+1, r24	; 0x01
    161c:	80 e8       	ldi	r24, 0x80	; 128
    161e:	a0 e0       	ldi	r26, 0x00	; 0
    1620:	b6 e0       	ldi	r27, 0x06	; 6
    1622:	11 96       	adiw	r26, 0x01	; 1
    1624:	8c 93       	st	X, r24
    1626:	68 94       	set
    1628:	dd 24       	eor	r13, r13
    162a:	d3 f8       	bld	r13, 3
    162c:	d1 82       	std	Z+1, r13	; 0x01
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    162e:	0f 2e       	mov	r0, r31
    1630:	f3 e0       	ldi	r31, 0x03	; 3
    1632:	cf 2e       	mov	r12, r31
    1634:	f0 2d       	mov	r31, r0
    1636:	cd 82       	std	Y+5, r12	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1638:	1e 82       	std	Y+6, r1	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    163a:	1f 82       	std	Y+7, r1	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e1       	ldi	r25, 0x10	; 16
    1640:	ae e0       	ldi	r26, 0x0E	; 14
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	9a 83       	std	Y+2, r25	; 0x02
    1648:	ab 83       	std	Y+3, r26	; 0x03
    164a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    164c:	60 e1       	ldi	r22, 0x10	; 16
    164e:	84 e0       	ldi	r24, 0x04	; 4
    1650:	7a df       	rcall	.-268    	; 0x1546 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1652:	8e 01       	movw	r16, r28
    1654:	0f 5f       	subi	r16, 0xFF	; 255
    1656:	1f 4f       	sbci	r17, 0xFF	; 255
    1658:	b8 01       	movw	r22, r16
    165a:	80 ea       	ldi	r24, 0xA0	; 160
    165c:	99 e0       	ldi	r25, 0x09	; 9
    165e:	b7 dc       	rcall	.-1682   	; 0xfce <usart_init_rs232>
	 void adc_init(void)
	{
		struct adc_config adc_conf;
		struct adc_channel_config adcch_conf;
		
		adc_read_configuration(&MY_ADC, &adc_conf);
    1660:	b8 01       	movw	r22, r16
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	92 e0       	ldi	r25, 0x02	; 2
    1666:	97 de       	rcall	.-722    	; 0x1396 <adc_read_configuration>
		adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1668:	ae 01       	movw	r20, r28
    166a:	44 5f       	subi	r20, 0xF4	; 244
    166c:	5f 4f       	sbci	r21, 0xFF	; 255
    166e:	61 e0       	ldi	r22, 0x01	; 1
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	ec de       	rcall	.-552    	; 0x144e <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	89 7e       	andi	r24, 0xE9	; 233
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
    167e:	90 62       	ori	r25, 0x20	; 32
    1680:	9b 83       	std	Y+3, r25	; 0x03
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
				(nr_of_ch << ADC_EVACT_gp);
		break;

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    1682:	8c 60       	ori	r24, 0x0C	; 12
    1684:	8a 83       	std	Y+2, r24	; 0x02
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    1686:	cd 82       	std	Y+5, r12	; 0x05
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	8c 87       	std	Y+12, r24	; 0x0c
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    168c:	dd 86       	std	Y+13, r13	; 0x0d
		adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_8, ADC_REF_AREFA);
		adc_set_conversion_trigger(&adc_conf, ADC_TRIG_FREERUN, 1, 0);
		adc_set_clock_rate(&adc_conf, 1000000UL);
		adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE, GAIN);
	
		adc_write_configuration(&MY_ADC, &adc_conf);
    168e:	b8 01       	movw	r22, r16
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	92 e0       	ldi	r25, 0x02	; 2
    1694:	40 de       	rcall	.-896    	; 0x1316 <adc_write_configuration>
		adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1696:	ae 01       	movw	r20, r28
    1698:	44 5f       	subi	r20, 0xF4	; 244
    169a:	5f 4f       	sbci	r21, 0xFF	; 255
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	9c de       	rcall	.-712    	; 0x13dc <adcch_write_configuration>
		
	}
	
	adc_init();
	adc_enable(&MY_ADC);
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	92 e0       	ldi	r25, 0x02	; 2
    16a8:	0e 94 8d 02 	call	0x51a	; 0x51a <adc_enable>
	// DMA
 void dma_init(void){
	 
	 struct dma_channel_config dmach_conf;
	 memset(&dmach_conf, 0, sizeof(dmach_conf));
    16ac:	8b e0       	ldi	r24, 0x0B	; 11
    16ae:	f8 01       	movw	r30, r16
    16b0:	11 92       	st	Z+, r1
    16b2:	8a 95       	dec	r24
    16b4:	e9 f7       	brne	.-6      	; 0x16b0 <main+0x11c>
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    16b6:	ed 82       	std	Y+5, r14	; 0x05
    16b8:	fe 82       	std	Y+6, r15	; 0x06
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    16ba:	8d e9       	ldi	r24, 0x9D	; 157
    16bc:	8b 83       	std	Y+3, r24	; 0x03
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    16be:	80 e1       	ldi	r24, 0x10	; 16
    16c0:	92 e0       	ldi	r25, 0x02	; 2
    16c2:	88 87       	std	Y+8, r24	; 0x08
    16c4:	99 87       	std	Y+9, r25	; 0x09
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    16c6:	85 ef       	ldi	r24, 0xF5	; 245
    16c8:	94 e2       	ldi	r25, 0x24	; 36
    16ca:	8a 87       	std	Y+10, r24	; 0x0a
    16cc:	9b 87       	std	Y+11, r25	; 0x0b
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    16ce:	80 e1       	ldi	r24, 0x10	; 16
    16d0:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    16d2:	84 e0       	ldi	r24, 0x04	; 4
    16d4:	89 83       	std	Y+1, r24	; 0x01
	 dma_channel_set_dest_dir_mode(&dmach_conf, DMA_CH_DESTDIR_INC_gc);
	 dma_channel_set_source_address(&dmach_conf,(uint16_t)(uintptr_t)&ADCA.CH0RES);
	 dma_channel_set_destination_address(&dmach_conf,(uint16_t)(uintptr_t)Samples);
	 dma_channel_set_trigger_source(&dmach_conf, DMA_CH_TRIGSRC_ADCA_CH0_gc);
	 dma_channel_set_single_shot(&dmach_conf);
	 dma_enable();
    16d6:	0e 94 8d 01 	call	0x31a	; 0x31a <dma_enable>
 * \param level Interrupt level given by a \ref dma_int_level_t type
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	80 7f       	andi	r24, 0xF0	; 240
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    16de:	85 60       	ori	r24, 0x05	; 5
    16e0:	8a 83       	std	Y+2, r24	; 0x02
	 //dma_set_callback(DMA_CHANNEL, dma_transfer_done);
	 dma_channel_set_interrupt_level(&dmach_conf, DMA_INT_LVL_LO);
	 dma_channel_write_config(DMA_CHANNEL, &dmach_conf);
    16e2:	b8 01       	movw	r22, r16
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	0e 94 35 02 	call	0x46a	; 0x46a <dma_channel_write_config>
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    16ea:	68 94       	set
    16ec:	cc 24       	eor	r12, r12
    16ee:	c4 f8       	bld	r12, 4
    16f0:	dd 24       	eor	r13, r13
    16f2:	d3 94       	inc	r13

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    16f4:	0f 2e       	mov	r0, r31
    16f6:	f0 e6       	ldi	r31, 0x60	; 96
    16f8:	af 2e       	mov	r10, r31
    16fa:	f6 e0       	ldi	r31, 0x06	; 6
    16fc:	bf 2e       	mov	r11, r31
    16fe:	f0 2d       	mov	r31, r0
    1700:	68 94       	set
    1702:	88 24       	eor	r8, r8
    1704:	85 f8       	bld	r8, 5
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1706:	0f 2e       	mov	r0, r31
    1708:	e1 2c       	mov	r14, r1
    170a:	f6 e0       	ldi	r31, 0x06	; 6
    170c:	ff 2e       	mov	r15, r31
    170e:	f0 2d       	mov	r31, r0
    1710:	68 94       	set
    1712:	99 24       	eor	r9, r9
    1714:	97 f8       	bld	r9, 7
 * \retval true DMA channel is busy or have a block transfer pending
 * \retval false DMA channel is not busy or have a block transfer pending
 */
static inline bool dma_channel_is_busy(dma_channel_num_t num)
{
	uint8_t busy_pending = DMA.STATUS;
    1716:	00 e0       	ldi	r16, 0x00	; 0
    1718:	11 e0       	ldi	r17, 0x01	; 1
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
    171a:	80 ea       	ldi	r24, 0xA0	; 160
    171c:	99 e0       	ldi	r25, 0x09	; 9
    171e:	4b db       	rcall	.-2410   	; 0xdb6 <usart_getchar>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1720:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1722:	f8 94       	cli
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    1724:	f6 01       	movw	r30, r12
    1726:	90 81       	ld	r25, Z
    1728:	90 68       	ori	r25, 0x80	; 128
    172a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    172c:	8f bf       	out	0x3f, r24	; 63

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    172e:	f5 01       	movw	r30, r10
    1730:	87 82       	std	Z+7, r8	; 0x07
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1732:	f7 01       	movw	r30, r14
    1734:	95 82       	std	Z+5, r9	; 0x05
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	85 3d       	cpi	r24, 0xD5	; 213
    173e:	f4 e1       	ldi	r31, 0x14	; 20
    1740:	9f 07       	cpc	r25, r31
    1742:	d9 f7       	brne	.-10     	; 0x173a <main+0x1a6>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1744:	f7 01       	movw	r30, r14
    1746:	96 82       	std	Z+6, r9	; 0x06
 * \retval true DMA channel is busy or have a block transfer pending
 * \retval false DMA channel is not busy or have a block transfer pending
 */
static inline bool dma_channel_is_busy(dma_channel_num_t num)
{
	uint8_t busy_pending = DMA.STATUS;
    1748:	f8 01       	movw	r30, r16
    174a:	84 81       	ldd	r24, Z+4	; 0x04

	busy_pending &= (1 << num) | (1 << (num + 4));
    174c:	81 71       	andi	r24, 0x11	; 17
		dma_channel_enable(DMA_CHANNEL);
		ioport_toggle_pin_level(LED);
		ioport_set_pin_level(TRIGGER, 1);
		delay_ms(1);
		ioport_set_pin_level(TRIGGER, 0);
		while(dma_channel_is_busy(DMA_CHANNEL));
    174e:	e1 f7       	brne	.-8      	; 0x1748 <main+0x1b4>
		usart_serial_write_packet(&USARTD0, probe, SAMPLES_NR);
    1750:	40 eb       	ldi	r20, 0xB0	; 176
    1752:	54 e0       	ldi	r21, 0x04	; 4
    1754:	65 e4       	ldi	r22, 0x45	; 69
    1756:	70 e2       	ldi	r23, 0x20	; 32
    1758:	80 ea       	ldi	r24, 0xA0	; 160
    175a:	99 e0       	ldi	r25, 0x09	; 9
    175c:	b2 de       	rcall	.-668    	; 0x14c2 <usart_serial_write_packet>
	};
    175e:	dd cf       	rjmp	.-70     	; 0x171a <main+0x186>

00001760 <__subsf3>:
    1760:	50 58       	subi	r21, 0x80	; 128

00001762 <__addsf3>:
    1762:	bb 27       	eor	r27, r27
    1764:	aa 27       	eor	r26, r26
    1766:	0e d0       	rcall	.+28     	; 0x1784 <__addsf3x>
    1768:	48 c1       	rjmp	.+656    	; 0x19fa <__fp_round>
    176a:	39 d1       	rcall	.+626    	; 0x19de <__fp_pscA>
    176c:	30 f0       	brcs	.+12     	; 0x177a <__addsf3+0x18>
    176e:	3e d1       	rcall	.+636    	; 0x19ec <__fp_pscB>
    1770:	20 f0       	brcs	.+8      	; 0x177a <__addsf3+0x18>
    1772:	31 f4       	brne	.+12     	; 0x1780 <__addsf3+0x1e>
    1774:	9f 3f       	cpi	r25, 0xFF	; 255
    1776:	11 f4       	brne	.+4      	; 0x177c <__addsf3+0x1a>
    1778:	1e f4       	brtc	.+6      	; 0x1780 <__addsf3+0x1e>
    177a:	2e c1       	rjmp	.+604    	; 0x19d8 <__fp_nan>
    177c:	0e f4       	brtc	.+2      	; 0x1780 <__addsf3+0x1e>
    177e:	e0 95       	com	r30
    1780:	e7 fb       	bst	r30, 7
    1782:	24 c1       	rjmp	.+584    	; 0x19cc <__fp_inf>

00001784 <__addsf3x>:
    1784:	e9 2f       	mov	r30, r25
    1786:	4a d1       	rcall	.+660    	; 0x1a1c <__fp_split3>
    1788:	80 f3       	brcs	.-32     	; 0x176a <__addsf3+0x8>
    178a:	ba 17       	cp	r27, r26
    178c:	62 07       	cpc	r22, r18
    178e:	73 07       	cpc	r23, r19
    1790:	84 07       	cpc	r24, r20
    1792:	95 07       	cpc	r25, r21
    1794:	18 f0       	brcs	.+6      	; 0x179c <__addsf3x+0x18>
    1796:	71 f4       	brne	.+28     	; 0x17b4 <__addsf3x+0x30>
    1798:	9e f5       	brtc	.+102    	; 0x1800 <__addsf3x+0x7c>
    179a:	62 c1       	rjmp	.+708    	; 0x1a60 <__fp_zero>
    179c:	0e f4       	brtc	.+2      	; 0x17a0 <__addsf3x+0x1c>
    179e:	e0 95       	com	r30
    17a0:	0b 2e       	mov	r0, r27
    17a2:	ba 2f       	mov	r27, r26
    17a4:	a0 2d       	mov	r26, r0
    17a6:	0b 01       	movw	r0, r22
    17a8:	b9 01       	movw	r22, r18
    17aa:	90 01       	movw	r18, r0
    17ac:	0c 01       	movw	r0, r24
    17ae:	ca 01       	movw	r24, r20
    17b0:	a0 01       	movw	r20, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	ff 27       	eor	r31, r31
    17b6:	59 1b       	sub	r21, r25
    17b8:	99 f0       	breq	.+38     	; 0x17e0 <__addsf3x+0x5c>
    17ba:	59 3f       	cpi	r21, 0xF9	; 249
    17bc:	50 f4       	brcc	.+20     	; 0x17d2 <__addsf3x+0x4e>
    17be:	50 3e       	cpi	r21, 0xE0	; 224
    17c0:	68 f1       	brcs	.+90     	; 0x181c <__addsf3x+0x98>
    17c2:	1a 16       	cp	r1, r26
    17c4:	f0 40       	sbci	r31, 0x00	; 0
    17c6:	a2 2f       	mov	r26, r18
    17c8:	23 2f       	mov	r18, r19
    17ca:	34 2f       	mov	r19, r20
    17cc:	44 27       	eor	r20, r20
    17ce:	58 5f       	subi	r21, 0xF8	; 248
    17d0:	f3 cf       	rjmp	.-26     	; 0x17b8 <__addsf3x+0x34>
    17d2:	46 95       	lsr	r20
    17d4:	37 95       	ror	r19
    17d6:	27 95       	ror	r18
    17d8:	a7 95       	ror	r26
    17da:	f0 40       	sbci	r31, 0x00	; 0
    17dc:	53 95       	inc	r21
    17de:	c9 f7       	brne	.-14     	; 0x17d2 <__addsf3x+0x4e>
    17e0:	7e f4       	brtc	.+30     	; 0x1800 <__addsf3x+0x7c>
    17e2:	1f 16       	cp	r1, r31
    17e4:	ba 0b       	sbc	r27, r26
    17e6:	62 0b       	sbc	r22, r18
    17e8:	73 0b       	sbc	r23, r19
    17ea:	84 0b       	sbc	r24, r20
    17ec:	ba f0       	brmi	.+46     	; 0x181c <__addsf3x+0x98>
    17ee:	91 50       	subi	r25, 0x01	; 1
    17f0:	a1 f0       	breq	.+40     	; 0x181a <__addsf3x+0x96>
    17f2:	ff 0f       	add	r31, r31
    17f4:	bb 1f       	adc	r27, r27
    17f6:	66 1f       	adc	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	88 1f       	adc	r24, r24
    17fc:	c2 f7       	brpl	.-16     	; 0x17ee <__addsf3x+0x6a>
    17fe:	0e c0       	rjmp	.+28     	; 0x181c <__addsf3x+0x98>
    1800:	ba 0f       	add	r27, r26
    1802:	62 1f       	adc	r22, r18
    1804:	73 1f       	adc	r23, r19
    1806:	84 1f       	adc	r24, r20
    1808:	48 f4       	brcc	.+18     	; 0x181c <__addsf3x+0x98>
    180a:	87 95       	ror	r24
    180c:	77 95       	ror	r23
    180e:	67 95       	ror	r22
    1810:	b7 95       	ror	r27
    1812:	f7 95       	ror	r31
    1814:	9e 3f       	cpi	r25, 0xFE	; 254
    1816:	08 f0       	brcs	.+2      	; 0x181a <__addsf3x+0x96>
    1818:	b3 cf       	rjmp	.-154    	; 0x1780 <__addsf3+0x1e>
    181a:	93 95       	inc	r25
    181c:	88 0f       	add	r24, r24
    181e:	08 f0       	brcs	.+2      	; 0x1822 <__addsf3x+0x9e>
    1820:	99 27       	eor	r25, r25
    1822:	ee 0f       	add	r30, r30
    1824:	97 95       	ror	r25
    1826:	87 95       	ror	r24
    1828:	08 95       	ret

0000182a <__divsf3>:
    182a:	0c d0       	rcall	.+24     	; 0x1844 <__divsf3x>
    182c:	e6 c0       	rjmp	.+460    	; 0x19fa <__fp_round>
    182e:	de d0       	rcall	.+444    	; 0x19ec <__fp_pscB>
    1830:	40 f0       	brcs	.+16     	; 0x1842 <__divsf3+0x18>
    1832:	d5 d0       	rcall	.+426    	; 0x19de <__fp_pscA>
    1834:	30 f0       	brcs	.+12     	; 0x1842 <__divsf3+0x18>
    1836:	21 f4       	brne	.+8      	; 0x1840 <__divsf3+0x16>
    1838:	5f 3f       	cpi	r21, 0xFF	; 255
    183a:	19 f0       	breq	.+6      	; 0x1842 <__divsf3+0x18>
    183c:	c7 c0       	rjmp	.+398    	; 0x19cc <__fp_inf>
    183e:	51 11       	cpse	r21, r1
    1840:	10 c1       	rjmp	.+544    	; 0x1a62 <__fp_szero>
    1842:	ca c0       	rjmp	.+404    	; 0x19d8 <__fp_nan>

00001844 <__divsf3x>:
    1844:	eb d0       	rcall	.+470    	; 0x1a1c <__fp_split3>
    1846:	98 f3       	brcs	.-26     	; 0x182e <__divsf3+0x4>

00001848 <__divsf3_pse>:
    1848:	99 23       	and	r25, r25
    184a:	c9 f3       	breq	.-14     	; 0x183e <__divsf3+0x14>
    184c:	55 23       	and	r21, r21
    184e:	b1 f3       	breq	.-20     	; 0x183c <__divsf3+0x12>
    1850:	95 1b       	sub	r25, r21
    1852:	55 0b       	sbc	r21, r21
    1854:	bb 27       	eor	r27, r27
    1856:	aa 27       	eor	r26, r26
    1858:	62 17       	cp	r22, r18
    185a:	73 07       	cpc	r23, r19
    185c:	84 07       	cpc	r24, r20
    185e:	38 f0       	brcs	.+14     	; 0x186e <__divsf3_pse+0x26>
    1860:	9f 5f       	subi	r25, 0xFF	; 255
    1862:	5f 4f       	sbci	r21, 0xFF	; 255
    1864:	22 0f       	add	r18, r18
    1866:	33 1f       	adc	r19, r19
    1868:	44 1f       	adc	r20, r20
    186a:	aa 1f       	adc	r26, r26
    186c:	a9 f3       	breq	.-22     	; 0x1858 <__divsf3_pse+0x10>
    186e:	33 d0       	rcall	.+102    	; 0x18d6 <__divsf3_pse+0x8e>
    1870:	0e 2e       	mov	r0, r30
    1872:	3a f0       	brmi	.+14     	; 0x1882 <__divsf3_pse+0x3a>
    1874:	e0 e8       	ldi	r30, 0x80	; 128
    1876:	30 d0       	rcall	.+96     	; 0x18d8 <__divsf3_pse+0x90>
    1878:	91 50       	subi	r25, 0x01	; 1
    187a:	50 40       	sbci	r21, 0x00	; 0
    187c:	e6 95       	lsr	r30
    187e:	00 1c       	adc	r0, r0
    1880:	ca f7       	brpl	.-14     	; 0x1874 <__divsf3_pse+0x2c>
    1882:	29 d0       	rcall	.+82     	; 0x18d6 <__divsf3_pse+0x8e>
    1884:	fe 2f       	mov	r31, r30
    1886:	27 d0       	rcall	.+78     	; 0x18d6 <__divsf3_pse+0x8e>
    1888:	66 0f       	add	r22, r22
    188a:	77 1f       	adc	r23, r23
    188c:	88 1f       	adc	r24, r24
    188e:	bb 1f       	adc	r27, r27
    1890:	26 17       	cp	r18, r22
    1892:	37 07       	cpc	r19, r23
    1894:	48 07       	cpc	r20, r24
    1896:	ab 07       	cpc	r26, r27
    1898:	b0 e8       	ldi	r27, 0x80	; 128
    189a:	09 f0       	breq	.+2      	; 0x189e <__divsf3_pse+0x56>
    189c:	bb 0b       	sbc	r27, r27
    189e:	80 2d       	mov	r24, r0
    18a0:	bf 01       	movw	r22, r30
    18a2:	ff 27       	eor	r31, r31
    18a4:	93 58       	subi	r25, 0x83	; 131
    18a6:	5f 4f       	sbci	r21, 0xFF	; 255
    18a8:	2a f0       	brmi	.+10     	; 0x18b4 <__divsf3_pse+0x6c>
    18aa:	9e 3f       	cpi	r25, 0xFE	; 254
    18ac:	51 05       	cpc	r21, r1
    18ae:	68 f0       	brcs	.+26     	; 0x18ca <__divsf3_pse+0x82>
    18b0:	8d c0       	rjmp	.+282    	; 0x19cc <__fp_inf>
    18b2:	d7 c0       	rjmp	.+430    	; 0x1a62 <__fp_szero>
    18b4:	5f 3f       	cpi	r21, 0xFF	; 255
    18b6:	ec f3       	brlt	.-6      	; 0x18b2 <__divsf3_pse+0x6a>
    18b8:	98 3e       	cpi	r25, 0xE8	; 232
    18ba:	dc f3       	brlt	.-10     	; 0x18b2 <__divsf3_pse+0x6a>
    18bc:	86 95       	lsr	r24
    18be:	77 95       	ror	r23
    18c0:	67 95       	ror	r22
    18c2:	b7 95       	ror	r27
    18c4:	f7 95       	ror	r31
    18c6:	9f 5f       	subi	r25, 0xFF	; 255
    18c8:	c9 f7       	brne	.-14     	; 0x18bc <__divsf3_pse+0x74>
    18ca:	88 0f       	add	r24, r24
    18cc:	91 1d       	adc	r25, r1
    18ce:	96 95       	lsr	r25
    18d0:	87 95       	ror	r24
    18d2:	97 f9       	bld	r25, 7
    18d4:	08 95       	ret
    18d6:	e1 e0       	ldi	r30, 0x01	; 1
    18d8:	66 0f       	add	r22, r22
    18da:	77 1f       	adc	r23, r23
    18dc:	88 1f       	adc	r24, r24
    18de:	bb 1f       	adc	r27, r27
    18e0:	62 17       	cp	r22, r18
    18e2:	73 07       	cpc	r23, r19
    18e4:	84 07       	cpc	r24, r20
    18e6:	ba 07       	cpc	r27, r26
    18e8:	20 f0       	brcs	.+8      	; 0x18f2 <__divsf3_pse+0xaa>
    18ea:	62 1b       	sub	r22, r18
    18ec:	73 0b       	sbc	r23, r19
    18ee:	84 0b       	sbc	r24, r20
    18f0:	ba 0b       	sbc	r27, r26
    18f2:	ee 1f       	adc	r30, r30
    18f4:	88 f7       	brcc	.-30     	; 0x18d8 <__divsf3_pse+0x90>
    18f6:	e0 95       	com	r30
    18f8:	08 95       	ret

000018fa <__fixunssfsi>:
    18fa:	98 d0       	rcall	.+304    	; 0x1a2c <__fp_splitA>
    18fc:	88 f0       	brcs	.+34     	; 0x1920 <__fixunssfsi+0x26>
    18fe:	9f 57       	subi	r25, 0x7F	; 127
    1900:	90 f0       	brcs	.+36     	; 0x1926 <__fixunssfsi+0x2c>
    1902:	b9 2f       	mov	r27, r25
    1904:	99 27       	eor	r25, r25
    1906:	b7 51       	subi	r27, 0x17	; 23
    1908:	a0 f0       	brcs	.+40     	; 0x1932 <__fixunssfsi+0x38>
    190a:	d1 f0       	breq	.+52     	; 0x1940 <__fixunssfsi+0x46>
    190c:	66 0f       	add	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	88 1f       	adc	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	1a f0       	brmi	.+6      	; 0x191c <__fixunssfsi+0x22>
    1916:	ba 95       	dec	r27
    1918:	c9 f7       	brne	.-14     	; 0x190c <__fixunssfsi+0x12>
    191a:	12 c0       	rjmp	.+36     	; 0x1940 <__fixunssfsi+0x46>
    191c:	b1 30       	cpi	r27, 0x01	; 1
    191e:	81 f0       	breq	.+32     	; 0x1940 <__fixunssfsi+0x46>
    1920:	9f d0       	rcall	.+318    	; 0x1a60 <__fp_zero>
    1922:	b1 e0       	ldi	r27, 0x01	; 1
    1924:	08 95       	ret
    1926:	9c c0       	rjmp	.+312    	; 0x1a60 <__fp_zero>
    1928:	67 2f       	mov	r22, r23
    192a:	78 2f       	mov	r23, r24
    192c:	88 27       	eor	r24, r24
    192e:	b8 5f       	subi	r27, 0xF8	; 248
    1930:	39 f0       	breq	.+14     	; 0x1940 <__fixunssfsi+0x46>
    1932:	b9 3f       	cpi	r27, 0xF9	; 249
    1934:	cc f3       	brlt	.-14     	; 0x1928 <__fixunssfsi+0x2e>
    1936:	86 95       	lsr	r24
    1938:	77 95       	ror	r23
    193a:	67 95       	ror	r22
    193c:	b3 95       	inc	r27
    193e:	d9 f7       	brne	.-10     	; 0x1936 <__fixunssfsi+0x3c>
    1940:	3e f4       	brtc	.+14     	; 0x1950 <__fixunssfsi+0x56>
    1942:	90 95       	com	r25
    1944:	80 95       	com	r24
    1946:	70 95       	com	r23
    1948:	61 95       	neg	r22
    194a:	7f 4f       	sbci	r23, 0xFF	; 255
    194c:	8f 4f       	sbci	r24, 0xFF	; 255
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	08 95       	ret

00001952 <__floatunsisf>:
    1952:	e8 94       	clt
    1954:	09 c0       	rjmp	.+18     	; 0x1968 <__floatsisf+0x12>

00001956 <__floatsisf>:
    1956:	97 fb       	bst	r25, 7
    1958:	3e f4       	brtc	.+14     	; 0x1968 <__floatsisf+0x12>
    195a:	90 95       	com	r25
    195c:	80 95       	com	r24
    195e:	70 95       	com	r23
    1960:	61 95       	neg	r22
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	8f 4f       	sbci	r24, 0xFF	; 255
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	99 23       	and	r25, r25
    196a:	a9 f0       	breq	.+42     	; 0x1996 <__floatsisf+0x40>
    196c:	f9 2f       	mov	r31, r25
    196e:	96 e9       	ldi	r25, 0x96	; 150
    1970:	bb 27       	eor	r27, r27
    1972:	93 95       	inc	r25
    1974:	f6 95       	lsr	r31
    1976:	87 95       	ror	r24
    1978:	77 95       	ror	r23
    197a:	67 95       	ror	r22
    197c:	b7 95       	ror	r27
    197e:	f1 11       	cpse	r31, r1
    1980:	f8 cf       	rjmp	.-16     	; 0x1972 <__floatsisf+0x1c>
    1982:	fa f4       	brpl	.+62     	; 0x19c2 <__floatsisf+0x6c>
    1984:	bb 0f       	add	r27, r27
    1986:	11 f4       	brne	.+4      	; 0x198c <__floatsisf+0x36>
    1988:	60 ff       	sbrs	r22, 0
    198a:	1b c0       	rjmp	.+54     	; 0x19c2 <__floatsisf+0x6c>
    198c:	6f 5f       	subi	r22, 0xFF	; 255
    198e:	7f 4f       	sbci	r23, 0xFF	; 255
    1990:	8f 4f       	sbci	r24, 0xFF	; 255
    1992:	9f 4f       	sbci	r25, 0xFF	; 255
    1994:	16 c0       	rjmp	.+44     	; 0x19c2 <__floatsisf+0x6c>
    1996:	88 23       	and	r24, r24
    1998:	11 f0       	breq	.+4      	; 0x199e <__floatsisf+0x48>
    199a:	96 e9       	ldi	r25, 0x96	; 150
    199c:	11 c0       	rjmp	.+34     	; 0x19c0 <__floatsisf+0x6a>
    199e:	77 23       	and	r23, r23
    19a0:	21 f0       	breq	.+8      	; 0x19aa <__floatsisf+0x54>
    19a2:	9e e8       	ldi	r25, 0x8E	; 142
    19a4:	87 2f       	mov	r24, r23
    19a6:	76 2f       	mov	r23, r22
    19a8:	05 c0       	rjmp	.+10     	; 0x19b4 <__floatsisf+0x5e>
    19aa:	66 23       	and	r22, r22
    19ac:	71 f0       	breq	.+28     	; 0x19ca <__floatsisf+0x74>
    19ae:	96 e8       	ldi	r25, 0x86	; 134
    19b0:	86 2f       	mov	r24, r22
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	2a f0       	brmi	.+10     	; 0x19c2 <__floatsisf+0x6c>
    19b8:	9a 95       	dec	r25
    19ba:	66 0f       	add	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	88 1f       	adc	r24, r24
    19c0:	da f7       	brpl	.-10     	; 0x19b8 <__floatsisf+0x62>
    19c2:	88 0f       	add	r24, r24
    19c4:	96 95       	lsr	r25
    19c6:	87 95       	ror	r24
    19c8:	97 f9       	bld	r25, 7
    19ca:	08 95       	ret

000019cc <__fp_inf>:
    19cc:	97 f9       	bld	r25, 7
    19ce:	9f 67       	ori	r25, 0x7F	; 127
    19d0:	80 e8       	ldi	r24, 0x80	; 128
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	08 95       	ret

000019d8 <__fp_nan>:
    19d8:	9f ef       	ldi	r25, 0xFF	; 255
    19da:	80 ec       	ldi	r24, 0xC0	; 192
    19dc:	08 95       	ret

000019de <__fp_pscA>:
    19de:	00 24       	eor	r0, r0
    19e0:	0a 94       	dec	r0
    19e2:	16 16       	cp	r1, r22
    19e4:	17 06       	cpc	r1, r23
    19e6:	18 06       	cpc	r1, r24
    19e8:	09 06       	cpc	r0, r25
    19ea:	08 95       	ret

000019ec <__fp_pscB>:
    19ec:	00 24       	eor	r0, r0
    19ee:	0a 94       	dec	r0
    19f0:	12 16       	cp	r1, r18
    19f2:	13 06       	cpc	r1, r19
    19f4:	14 06       	cpc	r1, r20
    19f6:	05 06       	cpc	r0, r21
    19f8:	08 95       	ret

000019fa <__fp_round>:
    19fa:	09 2e       	mov	r0, r25
    19fc:	03 94       	inc	r0
    19fe:	00 0c       	add	r0, r0
    1a00:	11 f4       	brne	.+4      	; 0x1a06 <__fp_round+0xc>
    1a02:	88 23       	and	r24, r24
    1a04:	52 f0       	brmi	.+20     	; 0x1a1a <__fp_round+0x20>
    1a06:	bb 0f       	add	r27, r27
    1a08:	40 f4       	brcc	.+16     	; 0x1a1a <__fp_round+0x20>
    1a0a:	bf 2b       	or	r27, r31
    1a0c:	11 f4       	brne	.+4      	; 0x1a12 <__fp_round+0x18>
    1a0e:	60 ff       	sbrs	r22, 0
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <__fp_round+0x20>
    1a12:	6f 5f       	subi	r22, 0xFF	; 255
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	8f 4f       	sbci	r24, 0xFF	; 255
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	08 95       	ret

00001a1c <__fp_split3>:
    1a1c:	57 fd       	sbrc	r21, 7
    1a1e:	90 58       	subi	r25, 0x80	; 128
    1a20:	44 0f       	add	r20, r20
    1a22:	55 1f       	adc	r21, r21
    1a24:	59 f0       	breq	.+22     	; 0x1a3c <__fp_splitA+0x10>
    1a26:	5f 3f       	cpi	r21, 0xFF	; 255
    1a28:	71 f0       	breq	.+28     	; 0x1a46 <__fp_splitA+0x1a>
    1a2a:	47 95       	ror	r20

00001a2c <__fp_splitA>:
    1a2c:	88 0f       	add	r24, r24
    1a2e:	97 fb       	bst	r25, 7
    1a30:	99 1f       	adc	r25, r25
    1a32:	61 f0       	breq	.+24     	; 0x1a4c <__fp_splitA+0x20>
    1a34:	9f 3f       	cpi	r25, 0xFF	; 255
    1a36:	79 f0       	breq	.+30     	; 0x1a56 <__fp_splitA+0x2a>
    1a38:	87 95       	ror	r24
    1a3a:	08 95       	ret
    1a3c:	12 16       	cp	r1, r18
    1a3e:	13 06       	cpc	r1, r19
    1a40:	14 06       	cpc	r1, r20
    1a42:	55 1f       	adc	r21, r21
    1a44:	f2 cf       	rjmp	.-28     	; 0x1a2a <__fp_split3+0xe>
    1a46:	46 95       	lsr	r20
    1a48:	f1 df       	rcall	.-30     	; 0x1a2c <__fp_splitA>
    1a4a:	08 c0       	rjmp	.+16     	; 0x1a5c <__fp_splitA+0x30>
    1a4c:	16 16       	cp	r1, r22
    1a4e:	17 06       	cpc	r1, r23
    1a50:	18 06       	cpc	r1, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	f1 cf       	rjmp	.-30     	; 0x1a38 <__fp_splitA+0xc>
    1a56:	86 95       	lsr	r24
    1a58:	71 05       	cpc	r23, r1
    1a5a:	61 05       	cpc	r22, r1
    1a5c:	08 94       	sec
    1a5e:	08 95       	ret

00001a60 <__fp_zero>:
    1a60:	e8 94       	clt

00001a62 <__fp_szero>:
    1a62:	bb 27       	eor	r27, r27
    1a64:	66 27       	eor	r22, r22
    1a66:	77 27       	eor	r23, r23
    1a68:	cb 01       	movw	r24, r22
    1a6a:	97 f9       	bld	r25, 7
    1a6c:	08 95       	ret

00001a6e <__mulsf3>:
    1a6e:	0b d0       	rcall	.+22     	; 0x1a86 <__mulsf3x>
    1a70:	c4 cf       	rjmp	.-120    	; 0x19fa <__fp_round>
    1a72:	b5 df       	rcall	.-150    	; 0x19de <__fp_pscA>
    1a74:	28 f0       	brcs	.+10     	; 0x1a80 <__mulsf3+0x12>
    1a76:	ba df       	rcall	.-140    	; 0x19ec <__fp_pscB>
    1a78:	18 f0       	brcs	.+6      	; 0x1a80 <__mulsf3+0x12>
    1a7a:	95 23       	and	r25, r21
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <__mulsf3+0x12>
    1a7e:	a6 cf       	rjmp	.-180    	; 0x19cc <__fp_inf>
    1a80:	ab cf       	rjmp	.-170    	; 0x19d8 <__fp_nan>
    1a82:	11 24       	eor	r1, r1
    1a84:	ee cf       	rjmp	.-36     	; 0x1a62 <__fp_szero>

00001a86 <__mulsf3x>:
    1a86:	ca df       	rcall	.-108    	; 0x1a1c <__fp_split3>
    1a88:	a0 f3       	brcs	.-24     	; 0x1a72 <__mulsf3+0x4>

00001a8a <__mulsf3_pse>:
    1a8a:	95 9f       	mul	r25, r21
    1a8c:	d1 f3       	breq	.-12     	; 0x1a82 <__mulsf3+0x14>
    1a8e:	95 0f       	add	r25, r21
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	55 1f       	adc	r21, r21
    1a94:	62 9f       	mul	r22, r18
    1a96:	f0 01       	movw	r30, r0
    1a98:	72 9f       	mul	r23, r18
    1a9a:	bb 27       	eor	r27, r27
    1a9c:	f0 0d       	add	r31, r0
    1a9e:	b1 1d       	adc	r27, r1
    1aa0:	63 9f       	mul	r22, r19
    1aa2:	aa 27       	eor	r26, r26
    1aa4:	f0 0d       	add	r31, r0
    1aa6:	b1 1d       	adc	r27, r1
    1aa8:	aa 1f       	adc	r26, r26
    1aaa:	64 9f       	mul	r22, r20
    1aac:	66 27       	eor	r22, r22
    1aae:	b0 0d       	add	r27, r0
    1ab0:	a1 1d       	adc	r26, r1
    1ab2:	66 1f       	adc	r22, r22
    1ab4:	82 9f       	mul	r24, r18
    1ab6:	22 27       	eor	r18, r18
    1ab8:	b0 0d       	add	r27, r0
    1aba:	a1 1d       	adc	r26, r1
    1abc:	62 1f       	adc	r22, r18
    1abe:	73 9f       	mul	r23, r19
    1ac0:	b0 0d       	add	r27, r0
    1ac2:	a1 1d       	adc	r26, r1
    1ac4:	62 1f       	adc	r22, r18
    1ac6:	83 9f       	mul	r24, r19
    1ac8:	a0 0d       	add	r26, r0
    1aca:	61 1d       	adc	r22, r1
    1acc:	22 1f       	adc	r18, r18
    1ace:	74 9f       	mul	r23, r20
    1ad0:	33 27       	eor	r19, r19
    1ad2:	a0 0d       	add	r26, r0
    1ad4:	61 1d       	adc	r22, r1
    1ad6:	23 1f       	adc	r18, r19
    1ad8:	84 9f       	mul	r24, r20
    1ada:	60 0d       	add	r22, r0
    1adc:	21 1d       	adc	r18, r1
    1ade:	82 2f       	mov	r24, r18
    1ae0:	76 2f       	mov	r23, r22
    1ae2:	6a 2f       	mov	r22, r26
    1ae4:	11 24       	eor	r1, r1
    1ae6:	9f 57       	subi	r25, 0x7F	; 127
    1ae8:	50 40       	sbci	r21, 0x00	; 0
    1aea:	8a f0       	brmi	.+34     	; 0x1b0e <__mulsf3_pse+0x84>
    1aec:	e1 f0       	breq	.+56     	; 0x1b26 <__mulsf3_pse+0x9c>
    1aee:	88 23       	and	r24, r24
    1af0:	4a f0       	brmi	.+18     	; 0x1b04 <__mulsf3_pse+0x7a>
    1af2:	ee 0f       	add	r30, r30
    1af4:	ff 1f       	adc	r31, r31
    1af6:	bb 1f       	adc	r27, r27
    1af8:	66 1f       	adc	r22, r22
    1afa:	77 1f       	adc	r23, r23
    1afc:	88 1f       	adc	r24, r24
    1afe:	91 50       	subi	r25, 0x01	; 1
    1b00:	50 40       	sbci	r21, 0x00	; 0
    1b02:	a9 f7       	brne	.-22     	; 0x1aee <__mulsf3_pse+0x64>
    1b04:	9e 3f       	cpi	r25, 0xFE	; 254
    1b06:	51 05       	cpc	r21, r1
    1b08:	70 f0       	brcs	.+28     	; 0x1b26 <__mulsf3_pse+0x9c>
    1b0a:	60 cf       	rjmp	.-320    	; 0x19cc <__fp_inf>
    1b0c:	aa cf       	rjmp	.-172    	; 0x1a62 <__fp_szero>
    1b0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b10:	ec f3       	brlt	.-6      	; 0x1b0c <__mulsf3_pse+0x82>
    1b12:	98 3e       	cpi	r25, 0xE8	; 232
    1b14:	dc f3       	brlt	.-10     	; 0x1b0c <__mulsf3_pse+0x82>
    1b16:	86 95       	lsr	r24
    1b18:	77 95       	ror	r23
    1b1a:	67 95       	ror	r22
    1b1c:	b7 95       	ror	r27
    1b1e:	f7 95       	ror	r31
    1b20:	e7 95       	ror	r30
    1b22:	9f 5f       	subi	r25, 0xFF	; 255
    1b24:	c1 f7       	brne	.-16     	; 0x1b16 <__mulsf3_pse+0x8c>
    1b26:	fe 2b       	or	r31, r30
    1b28:	88 0f       	add	r24, r24
    1b2a:	91 1d       	adc	r25, r1
    1b2c:	96 95       	lsr	r25
    1b2e:	87 95       	ror	r24
    1b30:	97 f9       	bld	r25, 7
    1b32:	08 95       	ret

00001b34 <sin>:
    1b34:	9f 93       	push	r25
    1b36:	05 d0       	rcall	.+10     	; 0x1b42 <__fp_rempio2>
    1b38:	0f 90       	pop	r0
    1b3a:	07 fc       	sbrc	r0, 7
    1b3c:	ee 5f       	subi	r30, 0xFE	; 254
    1b3e:	28 c0       	rjmp	.+80     	; 0x1b90 <__fp_sinus>
    1b40:	4b cf       	rjmp	.-362    	; 0x19d8 <__fp_nan>

00001b42 <__fp_rempio2>:
    1b42:	74 df       	rcall	.-280    	; 0x1a2c <__fp_splitA>
    1b44:	e8 f3       	brcs	.-6      	; 0x1b40 <sin+0xc>
    1b46:	e8 94       	clt
    1b48:	e0 e0       	ldi	r30, 0x00	; 0
    1b4a:	bb 27       	eor	r27, r27
    1b4c:	9f 57       	subi	r25, 0x7F	; 127
    1b4e:	f0 f0       	brcs	.+60     	; 0x1b8c <__fp_rempio2+0x4a>
    1b50:	2a ed       	ldi	r18, 0xDA	; 218
    1b52:	3f e0       	ldi	r19, 0x0F	; 15
    1b54:	49 ec       	ldi	r20, 0xC9	; 201
    1b56:	06 c0       	rjmp	.+12     	; 0x1b64 <__fp_rempio2+0x22>
    1b58:	ee 0f       	add	r30, r30
    1b5a:	bb 0f       	add	r27, r27
    1b5c:	66 1f       	adc	r22, r22
    1b5e:	77 1f       	adc	r23, r23
    1b60:	88 1f       	adc	r24, r24
    1b62:	28 f0       	brcs	.+10     	; 0x1b6e <__fp_rempio2+0x2c>
    1b64:	b2 3a       	cpi	r27, 0xA2	; 162
    1b66:	62 07       	cpc	r22, r18
    1b68:	73 07       	cpc	r23, r19
    1b6a:	84 07       	cpc	r24, r20
    1b6c:	28 f0       	brcs	.+10     	; 0x1b78 <__fp_rempio2+0x36>
    1b6e:	b2 5a       	subi	r27, 0xA2	; 162
    1b70:	62 0b       	sbc	r22, r18
    1b72:	73 0b       	sbc	r23, r19
    1b74:	84 0b       	sbc	r24, r20
    1b76:	e3 95       	inc	r30
    1b78:	9a 95       	dec	r25
    1b7a:	72 f7       	brpl	.-36     	; 0x1b58 <__fp_rempio2+0x16>
    1b7c:	80 38       	cpi	r24, 0x80	; 128
    1b7e:	30 f4       	brcc	.+12     	; 0x1b8c <__fp_rempio2+0x4a>
    1b80:	9a 95       	dec	r25
    1b82:	bb 0f       	add	r27, r27
    1b84:	66 1f       	adc	r22, r22
    1b86:	77 1f       	adc	r23, r23
    1b88:	88 1f       	adc	r24, r24
    1b8a:	d2 f7       	brpl	.-12     	; 0x1b80 <__fp_rempio2+0x3e>
    1b8c:	90 48       	sbci	r25, 0x80	; 128
    1b8e:	13 c0       	rjmp	.+38     	; 0x1bb6 <__fp_mpack_finite>

00001b90 <__fp_sinus>:
    1b90:	ef 93       	push	r30
    1b92:	e0 ff       	sbrs	r30, 0
    1b94:	06 c0       	rjmp	.+12     	; 0x1ba2 <__fp_sinus+0x12>
    1b96:	a2 ea       	ldi	r26, 0xA2	; 162
    1b98:	2a ed       	ldi	r18, 0xDA	; 218
    1b9a:	3f e0       	ldi	r19, 0x0F	; 15
    1b9c:	49 ec       	ldi	r20, 0xC9	; 201
    1b9e:	5f eb       	ldi	r21, 0xBF	; 191
    1ba0:	f1 dd       	rcall	.-1054   	; 0x1784 <__addsf3x>
    1ba2:	2b df       	rcall	.-426    	; 0x19fa <__fp_round>
    1ba4:	0f 90       	pop	r0
    1ba6:	03 94       	inc	r0
    1ba8:	01 fc       	sbrc	r0, 1
    1baa:	90 58       	subi	r25, 0x80	; 128
    1bac:	ec ef       	ldi	r30, 0xFC	; 252
    1bae:	f1 e0       	ldi	r31, 0x01	; 1
    1bb0:	0e c0       	rjmp	.+28     	; 0x1bce <__fp_powsodd>

00001bb2 <__fp_mpack>:
    1bb2:	9f 3f       	cpi	r25, 0xFF	; 255
    1bb4:	31 f0       	breq	.+12     	; 0x1bc2 <__fp_mpack_finite+0xc>

00001bb6 <__fp_mpack_finite>:
    1bb6:	91 50       	subi	r25, 0x01	; 1
    1bb8:	20 f4       	brcc	.+8      	; 0x1bc2 <__fp_mpack_finite+0xc>
    1bba:	87 95       	ror	r24
    1bbc:	77 95       	ror	r23
    1bbe:	67 95       	ror	r22
    1bc0:	b7 95       	ror	r27
    1bc2:	88 0f       	add	r24, r24
    1bc4:	91 1d       	adc	r25, r1
    1bc6:	96 95       	lsr	r25
    1bc8:	87 95       	ror	r24
    1bca:	97 f9       	bld	r25, 7
    1bcc:	08 95       	ret

00001bce <__fp_powsodd>:
    1bce:	9f 93       	push	r25
    1bd0:	8f 93       	push	r24
    1bd2:	7f 93       	push	r23
    1bd4:	6f 93       	push	r22
    1bd6:	ff 93       	push	r31
    1bd8:	ef 93       	push	r30
    1bda:	9b 01       	movw	r18, r22
    1bdc:	ac 01       	movw	r20, r24
    1bde:	47 df       	rcall	.-370    	; 0x1a6e <__mulsf3>
    1be0:	ef 91       	pop	r30
    1be2:	ff 91       	pop	r31
    1be4:	05 d0       	rcall	.+10     	; 0x1bf0 <__fp_powser>
    1be6:	2f 91       	pop	r18
    1be8:	3f 91       	pop	r19
    1bea:	4f 91       	pop	r20
    1bec:	5f 91       	pop	r21
    1bee:	3f cf       	rjmp	.-386    	; 0x1a6e <__mulsf3>

00001bf0 <__fp_powser>:
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	1f 93       	push	r17
    1bf6:	0f 93       	push	r16
    1bf8:	ff 92       	push	r15
    1bfa:	ef 92       	push	r14
    1bfc:	df 92       	push	r13
    1bfe:	7b 01       	movw	r14, r22
    1c00:	8c 01       	movw	r16, r24
    1c02:	68 94       	set
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <__fp_powser+0x20>
    1c06:	da 2e       	mov	r13, r26
    1c08:	ef 01       	movw	r28, r30
    1c0a:	3d df       	rcall	.-390    	; 0x1a86 <__mulsf3x>
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e8 94       	clt
    1c10:	a5 91       	lpm	r26, Z+
    1c12:	25 91       	lpm	r18, Z+
    1c14:	35 91       	lpm	r19, Z+
    1c16:	45 91       	lpm	r20, Z+
    1c18:	55 91       	lpm	r21, Z+
    1c1a:	ae f3       	brts	.-22     	; 0x1c06 <__fp_powser+0x16>
    1c1c:	ef 01       	movw	r28, r30
    1c1e:	b2 dd       	rcall	.-1180   	; 0x1784 <__addsf3x>
    1c20:	fe 01       	movw	r30, r28
    1c22:	97 01       	movw	r18, r14
    1c24:	a8 01       	movw	r20, r16
    1c26:	da 94       	dec	r13
    1c28:	79 f7       	brne	.-34     	; 0x1c08 <__fp_powser+0x18>
    1c2a:	df 90       	pop	r13
    1c2c:	ef 90       	pop	r14
    1c2e:	ff 90       	pop	r15
    1c30:	0f 91       	pop	r16
    1c32:	1f 91       	pop	r17
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <__udivmodsi4>:
    1c3a:	a1 e2       	ldi	r26, 0x21	; 33
    1c3c:	1a 2e       	mov	r1, r26
    1c3e:	aa 1b       	sub	r26, r26
    1c40:	bb 1b       	sub	r27, r27
    1c42:	fd 01       	movw	r30, r26
    1c44:	0d c0       	rjmp	.+26     	; 0x1c60 <__udivmodsi4_ep>

00001c46 <__udivmodsi4_loop>:
    1c46:	aa 1f       	adc	r26, r26
    1c48:	bb 1f       	adc	r27, r27
    1c4a:	ee 1f       	adc	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	a2 17       	cp	r26, r18
    1c50:	b3 07       	cpc	r27, r19
    1c52:	e4 07       	cpc	r30, r20
    1c54:	f5 07       	cpc	r31, r21
    1c56:	20 f0       	brcs	.+8      	; 0x1c60 <__udivmodsi4_ep>
    1c58:	a2 1b       	sub	r26, r18
    1c5a:	b3 0b       	sbc	r27, r19
    1c5c:	e4 0b       	sbc	r30, r20
    1c5e:	f5 0b       	sbc	r31, r21

00001c60 <__udivmodsi4_ep>:
    1c60:	66 1f       	adc	r22, r22
    1c62:	77 1f       	adc	r23, r23
    1c64:	88 1f       	adc	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	1a 94       	dec	r1
    1c6a:	69 f7       	brne	.-38     	; 0x1c46 <__udivmodsi4_loop>
    1c6c:	60 95       	com	r22
    1c6e:	70 95       	com	r23
    1c70:	80 95       	com	r24
    1c72:	90 95       	com	r25
    1c74:	9b 01       	movw	r18, r22
    1c76:	ac 01       	movw	r20, r24
    1c78:	bd 01       	movw	r22, r26
    1c7a:	cf 01       	movw	r24, r30
    1c7c:	08 95       	ret

00001c7e <_exit>:
    1c7e:	f8 94       	cli

00001c80 <__stop_program>:
    1c80:	ff cf       	rjmp	.-2      	; 0x1c80 <__stop_program>
