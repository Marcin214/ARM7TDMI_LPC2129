
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00802000  000020d6  0000216a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080201a  0080201a  00002184  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  000021e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006cb2  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001277  00000000  00000000  000090ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003846  00000000  00000000  0000a331  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000694  00000000  00000000  0000db78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00029910  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002533  00000000  00000000  00037b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0003a050  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009c54  00000000  00000000  0003a260  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	9c c1       	rjmp	.+824    	; 0x33e <__bad_interrupt>
       6:	00 00       	nop
       8:	9a c1       	rjmp	.+820    	; 0x33e <__bad_interrupt>
       a:	00 00       	nop
       c:	98 c1       	rjmp	.+816    	; 0x33e <__bad_interrupt>
       e:	00 00       	nop
      10:	96 c1       	rjmp	.+812    	; 0x33e <__bad_interrupt>
      12:	00 00       	nop
      14:	94 c1       	rjmp	.+808    	; 0x33e <__bad_interrupt>
      16:	00 00       	nop
      18:	92 c1       	rjmp	.+804    	; 0x33e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	90 c1       	rjmp	.+800    	; 0x33e <__bad_interrupt>
      1e:	00 00       	nop
      20:	8e c1       	rjmp	.+796    	; 0x33e <__bad_interrupt>
      22:	00 00       	nop
      24:	8c c1       	rjmp	.+792    	; 0x33e <__bad_interrupt>
      26:	00 00       	nop
      28:	8a c1       	rjmp	.+788    	; 0x33e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	88 c1       	rjmp	.+784    	; 0x33e <__bad_interrupt>
      2e:	00 00       	nop
      30:	86 c1       	rjmp	.+780    	; 0x33e <__bad_interrupt>
      32:	00 00       	nop
      34:	84 c1       	rjmp	.+776    	; 0x33e <__bad_interrupt>
      36:	00 00       	nop
      38:	82 c1       	rjmp	.+772    	; 0x33e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	80 c1       	rjmp	.+768    	; 0x33e <__bad_interrupt>
      3e:	00 00       	nop
      40:	7e c1       	rjmp	.+764    	; 0x33e <__bad_interrupt>
      42:	00 00       	nop
      44:	7c c1       	rjmp	.+760    	; 0x33e <__bad_interrupt>
      46:	00 00       	nop
      48:	7a c1       	rjmp	.+756    	; 0x33e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	78 c1       	rjmp	.+752    	; 0x33e <__bad_interrupt>
      4e:	00 00       	nop
      50:	76 c1       	rjmp	.+748    	; 0x33e <__bad_interrupt>
      52:	00 00       	nop
      54:	74 c1       	rjmp	.+744    	; 0x33e <__bad_interrupt>
      56:	00 00       	nop
      58:	72 c1       	rjmp	.+740    	; 0x33e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	70 c1       	rjmp	.+736    	; 0x33e <__bad_interrupt>
      5e:	00 00       	nop
      60:	6e c1       	rjmp	.+732    	; 0x33e <__bad_interrupt>
      62:	00 00       	nop
      64:	6c c1       	rjmp	.+728    	; 0x33e <__bad_interrupt>
      66:	00 00       	nop
      68:	6a c1       	rjmp	.+724    	; 0x33e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	68 c1       	rjmp	.+720    	; 0x33e <__bad_interrupt>
      6e:	00 00       	nop
      70:	66 c1       	rjmp	.+716    	; 0x33e <__bad_interrupt>
      72:	00 00       	nop
      74:	64 c1       	rjmp	.+712    	; 0x33e <__bad_interrupt>
      76:	00 00       	nop
      78:	62 c1       	rjmp	.+708    	; 0x33e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	60 c1       	rjmp	.+704    	; 0x33e <__bad_interrupt>
      7e:	00 00       	nop
      80:	5e c1       	rjmp	.+700    	; 0x33e <__bad_interrupt>
      82:	00 00       	nop
      84:	5c c1       	rjmp	.+696    	; 0x33e <__bad_interrupt>
      86:	00 00       	nop
      88:	5a c1       	rjmp	.+692    	; 0x33e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	58 c1       	rjmp	.+688    	; 0x33e <__bad_interrupt>
      8e:	00 00       	nop
      90:	56 c1       	rjmp	.+684    	; 0x33e <__bad_interrupt>
      92:	00 00       	nop
      94:	54 c1       	rjmp	.+680    	; 0x33e <__bad_interrupt>
      96:	00 00       	nop
      98:	52 c1       	rjmp	.+676    	; 0x33e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c2       	rjmp	.+1240   	; 0x576 <__vector_39>
      9e:	00 00       	nop
      a0:	9c c2       	rjmp	.+1336   	; 0x5da <__vector_40>
      a2:	00 00       	nop
      a4:	cc c2       	rjmp	.+1432   	; 0x63e <__vector_41>
      a6:	00 00       	nop
      a8:	fc c2       	rjmp	.+1528   	; 0x6a2 <__vector_42>
      aa:	00 00       	nop
      ac:	48 c1       	rjmp	.+656    	; 0x33e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	46 c1       	rjmp	.+652    	; 0x33e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	44 c1       	rjmp	.+648    	; 0x33e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	42 c1       	rjmp	.+644    	; 0x33e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	40 c1       	rjmp	.+640    	; 0x33e <__bad_interrupt>
      be:	00 00       	nop
      c0:	3e c1       	rjmp	.+636    	; 0x33e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3c c1       	rjmp	.+632    	; 0x33e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3a c1       	rjmp	.+628    	; 0x33e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	38 c1       	rjmp	.+624    	; 0x33e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	36 c1       	rjmp	.+620    	; 0x33e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	34 c1       	rjmp	.+616    	; 0x33e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	32 c1       	rjmp	.+612    	; 0x33e <__bad_interrupt>
      da:	00 00       	nop
      dc:	30 c1       	rjmp	.+608    	; 0x33e <__bad_interrupt>
      de:	00 00       	nop
      e0:	2e c1       	rjmp	.+604    	; 0x33e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2c c1       	rjmp	.+600    	; 0x33e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	2a c1       	rjmp	.+596    	; 0x33e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	28 c1       	rjmp	.+592    	; 0x33e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	26 c1       	rjmp	.+588    	; 0x33e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	24 c1       	rjmp	.+584    	; 0x33e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	22 c1       	rjmp	.+580    	; 0x33e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	20 c1       	rjmp	.+576    	; 0x33e <__bad_interrupt>
      fe:	00 00       	nop
     100:	1e c1       	rjmp	.+572    	; 0x33e <__bad_interrupt>
     102:	00 00       	nop
     104:	1c c1       	rjmp	.+568    	; 0x33e <__bad_interrupt>
     106:	00 00       	nop
     108:	1a c1       	rjmp	.+564    	; 0x33e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	18 c1       	rjmp	.+560    	; 0x33e <__bad_interrupt>
     10e:	00 00       	nop
     110:	16 c1       	rjmp	.+556    	; 0x33e <__bad_interrupt>
     112:	00 00       	nop
     114:	14 c1       	rjmp	.+552    	; 0x33e <__bad_interrupt>
     116:	00 00       	nop
     118:	12 c1       	rjmp	.+548    	; 0x33e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	64 c1       	rjmp	.+712    	; 0x3e6 <__vector_71>
     11e:	00 00       	nop
     120:	94 c1       	rjmp	.+808    	; 0x44a <__vector_72>
     122:	00 00       	nop
     124:	c4 c1       	rjmp	.+904    	; 0x4ae <__vector_73>
     126:	00 00       	nop
     128:	f4 c1       	rjmp	.+1000   	; 0x512 <__vector_74>
     12a:	00 00       	nop
     12c:	08 c1       	rjmp	.+528    	; 0x33e <__bad_interrupt>
     12e:	00 00       	nop
     130:	06 c1       	rjmp	.+524    	; 0x33e <__bad_interrupt>
     132:	00 00       	nop
     134:	04 c1       	rjmp	.+520    	; 0x33e <__bad_interrupt>
     136:	00 00       	nop
     138:	02 c1       	rjmp	.+516    	; 0x33e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	00 c1       	rjmp	.+512    	; 0x33e <__bad_interrupt>
     13e:	00 00       	nop
     140:	fe c0       	rjmp	.+508    	; 0x33e <__bad_interrupt>
     142:	00 00       	nop
     144:	fc c0       	rjmp	.+504    	; 0x33e <__bad_interrupt>
     146:	00 00       	nop
     148:	fa c0       	rjmp	.+500    	; 0x33e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f8 c0       	rjmp	.+496    	; 0x33e <__bad_interrupt>
     14e:	00 00       	nop
     150:	f6 c0       	rjmp	.+492    	; 0x33e <__bad_interrupt>
     152:	00 00       	nop
     154:	f4 c0       	rjmp	.+488    	; 0x33e <__bad_interrupt>
     156:	00 00       	nop
     158:	f2 c0       	rjmp	.+484    	; 0x33e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f0 c0       	rjmp	.+480    	; 0x33e <__bad_interrupt>
     15e:	00 00       	nop
     160:	ee c0       	rjmp	.+476    	; 0x33e <__bad_interrupt>
     162:	00 00       	nop
     164:	ec c0       	rjmp	.+472    	; 0x33e <__bad_interrupt>
     166:	00 00       	nop
     168:	ea c0       	rjmp	.+468    	; 0x33e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e8 c0       	rjmp	.+464    	; 0x33e <__bad_interrupt>
     16e:	00 00       	nop
     170:	e6 c0       	rjmp	.+460    	; 0x33e <__bad_interrupt>
     172:	00 00       	nop
     174:	e4 c0       	rjmp	.+456    	; 0x33e <__bad_interrupt>
     176:	00 00       	nop
     178:	e2 c0       	rjmp	.+452    	; 0x33e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e0 c0       	rjmp	.+448    	; 0x33e <__bad_interrupt>
     17e:	00 00       	nop
     180:	de c0       	rjmp	.+444    	; 0x33e <__bad_interrupt>
     182:	00 00       	nop
     184:	dc c0       	rjmp	.+440    	; 0x33e <__bad_interrupt>
     186:	00 00       	nop
     188:	da c0       	rjmp	.+436    	; 0x33e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d8 c0       	rjmp	.+432    	; 0x33e <__bad_interrupt>
     18e:	00 00       	nop
     190:	d6 c0       	rjmp	.+428    	; 0x33e <__bad_interrupt>
     192:	00 00       	nop
     194:	d4 c0       	rjmp	.+424    	; 0x33e <__bad_interrupt>
     196:	00 00       	nop
     198:	d2 c0       	rjmp	.+420    	; 0x33e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d0 c0       	rjmp	.+416    	; 0x33e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ce c0       	rjmp	.+412    	; 0x33e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	cc c0       	rjmp	.+408    	; 0x33e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	ca c0       	rjmp	.+404    	; 0x33e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c8 c0       	rjmp	.+400    	; 0x33e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c6 c0       	rjmp	.+396    	; 0x33e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c4 c0       	rjmp	.+392    	; 0x33e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c2 c0       	rjmp	.+388    	; 0x33e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c0 c0       	rjmp	.+384    	; 0x33e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	be c0       	rjmp	.+380    	; 0x33e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	bc c0       	rjmp	.+376    	; 0x33e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	ba c0       	rjmp	.+372    	; 0x33e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b8 c0       	rjmp	.+368    	; 0x33e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b6 c0       	rjmp	.+364    	; 0x33e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b4 c0       	rjmp	.+360    	; 0x33e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b2 c0       	rjmp	.+356    	; 0x33e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b0 c0       	rjmp	.+352    	; 0x33e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	ae c0       	rjmp	.+348    	; 0x33e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ac c0       	rjmp	.+344    	; 0x33e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	aa c0       	rjmp	.+340    	; 0x33e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a8 c0       	rjmp	.+336    	; 0x33e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a6 c0       	rjmp	.+332    	; 0x33e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a4 c0       	rjmp	.+328    	; 0x33e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a2 c0       	rjmp	.+324    	; 0x33e <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2159>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e5       	ldi	r29, 0x5F	; 95
     308:	de bf       	out	0x3e, r29	; 62
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60

0000030e <__do_copy_data>:
     30e:	10 e2       	ldi	r17, 0x20	; 32
     310:	a0 e0       	ldi	r26, 0x00	; 0
     312:	b0 e2       	ldi	r27, 0x20	; 32
     314:	e6 ed       	ldi	r30, 0xD6	; 214
     316:	f0 e2       	ldi	r31, 0x20	; 32
     318:	00 e0       	ldi	r16, 0x00	; 0
     31a:	0b bf       	out	0x3b, r16	; 59
     31c:	02 c0       	rjmp	.+4      	; 0x322 <__do_copy_data+0x14>
     31e:	07 90       	elpm	r0, Z+
     320:	0d 92       	st	X+, r0
     322:	aa 31       	cpi	r26, 0x1A	; 26
     324:	b1 07       	cpc	r27, r17
     326:	d9 f7       	brne	.-10     	; 0x31e <__do_copy_data+0x10>

00000328 <__do_clear_bss>:
     328:	20 e2       	ldi	r18, 0x20	; 32
     32a:	aa e1       	ldi	r26, 0x1A	; 26
     32c:	b0 e2       	ldi	r27, 0x20	; 32
     32e:	01 c0       	rjmp	.+2      	; 0x332 <.do_clear_bss_start>

00000330 <.do_clear_bss_loop>:
     330:	1d 92       	st	X+, r1

00000332 <.do_clear_bss_start>:
     332:	a6 33       	cpi	r26, 0x36	; 54
     334:	b2 07       	cpc	r27, r18
     336:	e1 f7       	brne	.-8      	; 0x330 <.do_clear_bss_loop>
     338:	78 d5       	rcall	.+2800   	; 0xe2a <main>
     33a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <_exit>

0000033e <__bad_interrupt>:
     33e:	60 ce       	rjmp	.-832    	; 0x0 <__vectors>

00000340 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     340:	81 15       	cp	r24, r1
     342:	22 e0       	ldi	r18, 0x02	; 2
     344:	92 07       	cpc	r25, r18
     346:	61 f4       	brne	.+24     	; 0x360 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     348:	80 91 1b 20 	lds	r24, 0x201B
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	98 0f       	add	r25, r24
     350:	90 93 1b 20 	sts	0x201B, r25
     354:	81 11       	cpse	r24, r1
     356:	12 c0       	rjmp	.+36     	; 0x37c <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     358:	62 e0       	ldi	r22, 0x02	; 2
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	35 c5       	rjmp	.+2666   	; 0xdc8 <sysclk_enable_module>
     35e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     360:	80 34       	cpi	r24, 0x40	; 64
     362:	92 40       	sbci	r25, 0x02	; 2
     364:	59 f4       	brne	.+22     	; 0x37c <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     366:	80 91 1a 20 	lds	r24, 0x201A
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	98 0f       	add	r25, r24
     36e:	90 93 1a 20 	sts	0x201A, r25
     372:	81 11       	cpse	r24, r1
     374:	03 c0       	rjmp	.+6      	; 0x37c <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     376:	62 e0       	ldi	r22, 0x02	; 2
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	26 c5       	rjmp	.+2636   	; 0xdc8 <sysclk_enable_module>
     37c:	08 95       	ret

0000037e <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     37e:	81 15       	cp	r24, r1
     380:	22 e0       	ldi	r18, 0x02	; 2
     382:	92 07       	cpc	r25, r18
     384:	59 f4       	brne	.+22     	; 0x39c <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     386:	80 91 1b 20 	lds	r24, 0x201B
     38a:	81 50       	subi	r24, 0x01	; 1
     38c:	80 93 1b 20 	sts	0x201B, r24
     390:	81 11       	cpse	r24, r1
     392:	11 c0       	rjmp	.+34     	; 0x3b6 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     394:	62 e0       	ldi	r22, 0x02	; 2
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	23 c5       	rjmp	.+2630   	; 0xde0 <sysclk_disable_module>
     39a:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     39c:	80 34       	cpi	r24, 0x40	; 64
     39e:	92 40       	sbci	r25, 0x02	; 2
     3a0:	51 f4       	brne	.+20     	; 0x3b6 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     3a2:	80 91 1a 20 	lds	r24, 0x201A
     3a6:	81 50       	subi	r24, 0x01	; 1
     3a8:	80 93 1a 20 	sts	0x201A, r24
     3ac:	81 11       	cpse	r24, r1
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     3b0:	62 e0       	ldi	r22, 0x02	; 2
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	15 c5       	rjmp	.+2602   	; 0xde0 <sysclk_disable_module>
     3b6:	08 95       	ret

000003b8 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     3c0:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     3c2:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     3c4:	bd df       	rcall	.-134    	; 0x340 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     3c6:	88 81       	ld	r24, Y
     3c8:	81 60       	ori	r24, 0x01	; 1
     3ca:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3cc:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     3ce:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     3d0:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     3d2:	e1 e2       	ldi	r30, 0x21	; 33
     3d4:	f0 e2       	ldi	r31, 0x20	; 32
     3d6:	90 81       	ld	r25, Z
     3d8:	9f 5f       	subi	r25, 0xFF	; 255
     3da:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3dc:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	08 95       	ret

000003e6 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     3e6:	1f 92       	push	r1
     3e8:	0f 92       	push	r0
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	0f 92       	push	r0
     3ee:	11 24       	eor	r1, r1
     3f0:	0b b6       	in	r0, 0x3b	; 59
     3f2:	0f 92       	push	r0
     3f4:	2f 93       	push	r18
     3f6:	3f 93       	push	r19
     3f8:	4f 93       	push	r20
     3fa:	5f 93       	push	r21
     3fc:	6f 93       	push	r22
     3fe:	7f 93       	push	r23
     400:	8f 93       	push	r24
     402:	9f 93       	push	r25
     404:	af 93       	push	r26
     406:	bf 93       	push	r27
     408:	ef 93       	push	r30
     40a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     40c:	e0 e0       	ldi	r30, 0x00	; 0
     40e:	f2 e0       	ldi	r31, 0x02	; 2
     410:	44 a1       	ldd	r20, Z+36	; 0x24
     412:	55 a1       	ldd	r21, Z+37	; 0x25
     414:	e0 91 1e 20 	lds	r30, 0x201E
     418:	f0 91 1f 20 	lds	r31, 0x201F
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	19 95       	eicall
}
     424:	ff 91       	pop	r31
     426:	ef 91       	pop	r30
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	7f 91       	pop	r23
     432:	6f 91       	pop	r22
     434:	5f 91       	pop	r21
     436:	4f 91       	pop	r20
     438:	3f 91       	pop	r19
     43a:	2f 91       	pop	r18
     43c:	0f 90       	pop	r0
     43e:	0b be       	out	0x3b, r0	; 59
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	0b b6       	in	r0, 0x3b	; 59
     456:	0f 92       	push	r0
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     470:	e8 e2       	ldi	r30, 0x28	; 40
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	44 81       	ldd	r20, Z+4	; 0x04
     476:	55 81       	ldd	r21, Z+5	; 0x05
     478:	e0 91 1e 20 	lds	r30, 0x201E
     47c:	f0 91 1f 20 	lds	r31, 0x201F
     480:	62 e0       	ldi	r22, 0x02	; 2
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	19 95       	eicall
}
     488:	ff 91       	pop	r31
     48a:	ef 91       	pop	r30
     48c:	bf 91       	pop	r27
     48e:	af 91       	pop	r26
     490:	9f 91       	pop	r25
     492:	8f 91       	pop	r24
     494:	7f 91       	pop	r23
     496:	6f 91       	pop	r22
     498:	5f 91       	pop	r21
     49a:	4f 91       	pop	r20
     49c:	3f 91       	pop	r19
     49e:	2f 91       	pop	r18
     4a0:	0f 90       	pop	r0
     4a2:	0b be       	out	0x3b, r0	; 59
     4a4:	0f 90       	pop	r0
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	0f 90       	pop	r0
     4aa:	1f 90       	pop	r1
     4ac:	18 95       	reti

000004ae <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	0b b6       	in	r0, 0x3b	; 59
     4ba:	0f 92       	push	r0
     4bc:	2f 93       	push	r18
     4be:	3f 93       	push	r19
     4c0:	4f 93       	push	r20
     4c2:	5f 93       	push	r21
     4c4:	6f 93       	push	r22
     4c6:	7f 93       	push	r23
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	af 93       	push	r26
     4ce:	bf 93       	push	r27
     4d0:	ef 93       	push	r30
     4d2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     4d4:	e0 e3       	ldi	r30, 0x30	; 48
     4d6:	f2 e0       	ldi	r31, 0x02	; 2
     4d8:	44 81       	ldd	r20, Z+4	; 0x04
     4da:	55 81       	ldd	r21, Z+5	; 0x05
     4dc:	e0 91 1e 20 	lds	r30, 0x201E
     4e0:	f0 91 1f 20 	lds	r31, 0x201F
     4e4:	64 e0       	ldi	r22, 0x04	; 4
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	19 95       	eicall
}
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	7f 91       	pop	r23
     4fa:	6f 91       	pop	r22
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0b be       	out	0x3b, r0	; 59
     508:	0f 90       	pop	r0
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	0f 90       	pop	r0
     50e:	1f 90       	pop	r1
     510:	18 95       	reti

00000512 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     512:	1f 92       	push	r1
     514:	0f 92       	push	r0
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	0b b6       	in	r0, 0x3b	; 59
     51e:	0f 92       	push	r0
     520:	2f 93       	push	r18
     522:	3f 93       	push	r19
     524:	4f 93       	push	r20
     526:	5f 93       	push	r21
     528:	6f 93       	push	r22
     52a:	7f 93       	push	r23
     52c:	8f 93       	push	r24
     52e:	9f 93       	push	r25
     530:	af 93       	push	r26
     532:	bf 93       	push	r27
     534:	ef 93       	push	r30
     536:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     538:	e8 e3       	ldi	r30, 0x38	; 56
     53a:	f2 e0       	ldi	r31, 0x02	; 2
     53c:	44 81       	ldd	r20, Z+4	; 0x04
     53e:	55 81       	ldd	r21, Z+5	; 0x05
     540:	e0 91 1e 20 	lds	r30, 0x201E
     544:	f0 91 1f 20 	lds	r31, 0x201F
     548:	68 e0       	ldi	r22, 0x08	; 8
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	19 95       	eicall
}
     550:	ff 91       	pop	r31
     552:	ef 91       	pop	r30
     554:	bf 91       	pop	r27
     556:	af 91       	pop	r26
     558:	9f 91       	pop	r25
     55a:	8f 91       	pop	r24
     55c:	7f 91       	pop	r23
     55e:	6f 91       	pop	r22
     560:	5f 91       	pop	r21
     562:	4f 91       	pop	r20
     564:	3f 91       	pop	r19
     566:	2f 91       	pop	r18
     568:	0f 90       	pop	r0
     56a:	0b be       	out	0x3b, r0	; 59
     56c:	0f 90       	pop	r0
     56e:	0f be       	out	0x3f, r0	; 63
     570:	0f 90       	pop	r0
     572:	1f 90       	pop	r1
     574:	18 95       	reti

00000576 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	11 24       	eor	r1, r1
     580:	0b b6       	in	r0, 0x3b	; 59
     582:	0f 92       	push	r0
     584:	2f 93       	push	r18
     586:	3f 93       	push	r19
     588:	4f 93       	push	r20
     58a:	5f 93       	push	r21
     58c:	6f 93       	push	r22
     58e:	7f 93       	push	r23
     590:	8f 93       	push	r24
     592:	9f 93       	push	r25
     594:	af 93       	push	r26
     596:	bf 93       	push	r27
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     59c:	e0 e4       	ldi	r30, 0x40	; 64
     59e:	f2 e0       	ldi	r31, 0x02	; 2
     5a0:	44 a1       	ldd	r20, Z+36	; 0x24
     5a2:	55 a1       	ldd	r21, Z+37	; 0x25
     5a4:	e0 91 1c 20 	lds	r30, 0x201C
     5a8:	f0 91 1d 20 	lds	r31, 0x201D
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	80 e4       	ldi	r24, 0x40	; 64
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	19 95       	eicall
}
     5b4:	ff 91       	pop	r31
     5b6:	ef 91       	pop	r30
     5b8:	bf 91       	pop	r27
     5ba:	af 91       	pop	r26
     5bc:	9f 91       	pop	r25
     5be:	8f 91       	pop	r24
     5c0:	7f 91       	pop	r23
     5c2:	6f 91       	pop	r22
     5c4:	5f 91       	pop	r21
     5c6:	4f 91       	pop	r20
     5c8:	3f 91       	pop	r19
     5ca:	2f 91       	pop	r18
     5cc:	0f 90       	pop	r0
     5ce:	0b be       	out	0x3b, r0	; 59
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     5da:	1f 92       	push	r1
     5dc:	0f 92       	push	r0
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	0f 92       	push	r0
     5e2:	11 24       	eor	r1, r1
     5e4:	0b b6       	in	r0, 0x3b	; 59
     5e6:	0f 92       	push	r0
     5e8:	2f 93       	push	r18
     5ea:	3f 93       	push	r19
     5ec:	4f 93       	push	r20
     5ee:	5f 93       	push	r21
     5f0:	6f 93       	push	r22
     5f2:	7f 93       	push	r23
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	af 93       	push	r26
     5fa:	bf 93       	push	r27
     5fc:	ef 93       	push	r30
     5fe:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     600:	e8 e6       	ldi	r30, 0x68	; 104
     602:	f2 e0       	ldi	r31, 0x02	; 2
     604:	44 81       	ldd	r20, Z+4	; 0x04
     606:	55 81       	ldd	r21, Z+5	; 0x05
     608:	e0 91 1c 20 	lds	r30, 0x201C
     60c:	f0 91 1d 20 	lds	r31, 0x201D
     610:	62 e0       	ldi	r22, 0x02	; 2
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	19 95       	eicall
}
     618:	ff 91       	pop	r31
     61a:	ef 91       	pop	r30
     61c:	bf 91       	pop	r27
     61e:	af 91       	pop	r26
     620:	9f 91       	pop	r25
     622:	8f 91       	pop	r24
     624:	7f 91       	pop	r23
     626:	6f 91       	pop	r22
     628:	5f 91       	pop	r21
     62a:	4f 91       	pop	r20
     62c:	3f 91       	pop	r19
     62e:	2f 91       	pop	r18
     630:	0f 90       	pop	r0
     632:	0b be       	out	0x3b, r0	; 59
     634:	0f 90       	pop	r0
     636:	0f be       	out	0x3f, r0	; 63
     638:	0f 90       	pop	r0
     63a:	1f 90       	pop	r1
     63c:	18 95       	reti

0000063e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     63e:	1f 92       	push	r1
     640:	0f 92       	push	r0
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	0b b6       	in	r0, 0x3b	; 59
     64a:	0f 92       	push	r0
     64c:	2f 93       	push	r18
     64e:	3f 93       	push	r19
     650:	4f 93       	push	r20
     652:	5f 93       	push	r21
     654:	6f 93       	push	r22
     656:	7f 93       	push	r23
     658:	8f 93       	push	r24
     65a:	9f 93       	push	r25
     65c:	af 93       	push	r26
     65e:	bf 93       	push	r27
     660:	ef 93       	push	r30
     662:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     664:	e0 e7       	ldi	r30, 0x70	; 112
     666:	f2 e0       	ldi	r31, 0x02	; 2
     668:	44 81       	ldd	r20, Z+4	; 0x04
     66a:	55 81       	ldd	r21, Z+5	; 0x05
     66c:	e0 91 1c 20 	lds	r30, 0x201C
     670:	f0 91 1d 20 	lds	r31, 0x201D
     674:	64 e0       	ldi	r22, 0x04	; 4
     676:	80 e4       	ldi	r24, 0x40	; 64
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	19 95       	eicall
}
     67c:	ff 91       	pop	r31
     67e:	ef 91       	pop	r30
     680:	bf 91       	pop	r27
     682:	af 91       	pop	r26
     684:	9f 91       	pop	r25
     686:	8f 91       	pop	r24
     688:	7f 91       	pop	r23
     68a:	6f 91       	pop	r22
     68c:	5f 91       	pop	r21
     68e:	4f 91       	pop	r20
     690:	3f 91       	pop	r19
     692:	2f 91       	pop	r18
     694:	0f 90       	pop	r0
     696:	0b be       	out	0x3b, r0	; 59
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	0b b6       	in	r0, 0x3b	; 59
     6ae:	0f 92       	push	r0
     6b0:	2f 93       	push	r18
     6b2:	3f 93       	push	r19
     6b4:	4f 93       	push	r20
     6b6:	5f 93       	push	r21
     6b8:	6f 93       	push	r22
     6ba:	7f 93       	push	r23
     6bc:	8f 93       	push	r24
     6be:	9f 93       	push	r25
     6c0:	af 93       	push	r26
     6c2:	bf 93       	push	r27
     6c4:	ef 93       	push	r30
     6c6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6c8:	e8 e7       	ldi	r30, 0x78	; 120
     6ca:	f2 e0       	ldi	r31, 0x02	; 2
     6cc:	44 81       	ldd	r20, Z+4	; 0x04
     6ce:	55 81       	ldd	r21, Z+5	; 0x05
     6d0:	e0 91 1c 20 	lds	r30, 0x201C
     6d4:	f0 91 1d 20 	lds	r31, 0x201D
     6d8:	68 e0       	ldi	r22, 0x08	; 8
     6da:	80 e4       	ldi	r24, 0x40	; 64
     6dc:	92 e0       	ldi	r25, 0x02	; 2
     6de:	19 95       	eicall
}
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	7f 91       	pop	r23
     6ee:	6f 91       	pop	r22
     6f0:	5f 91       	pop	r21
     6f2:	4f 91       	pop	r20
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0b be       	out	0x3b, r0	; 59
     6fc:	0f 90       	pop	r0
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	0f 90       	pop	r0
     702:	1f 90       	pop	r1
     704:	18 95       	reti

00000706 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	ec 01       	movw	r28, r24
     716:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     718:	c1 15       	cp	r28, r1
     71a:	22 e0       	ldi	r18, 0x02	; 2
     71c:	d2 07       	cpc	r29, r18
     71e:	71 f4       	brne	.+28     	; 0x73c <adc_write_configuration+0x36>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     720:	61 e2       	ldi	r22, 0x21	; 33
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	67 d3       	rcall	.+1742   	; 0xdf6 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     728:	e8 2e       	mov	r14, r24
     72a:	f1 2c       	mov	r15, r1
     72c:	60 e2       	ldi	r22, 0x20	; 32
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	61 d3       	rcall	.+1730   	; 0xdf6 <nvm_read_byte>
		data <<= 8;
     734:	fe 2c       	mov	r15, r14
     736:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
     738:	e8 2a       	or	r14, r24
     73a:	10 c0       	rjmp	.+32     	; 0x75c <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	92 40       	sbci	r25, 0x02	; 2
     740:	59 f5       	brne	.+86     	; 0x798 <adc_write_configuration+0x92>
     742:	65 e2       	ldi	r22, 0x25	; 37
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	56 d3       	rcall	.+1708   	; 0xdf6 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	64 e2       	ldi	r22, 0x24	; 36
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	50 d3       	rcall	.+1696   	; 0xdf6 <nvm_read_byte>
		data <<= 8;
     756:	fe 2c       	mov	r15, r14
     758:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCBCAL0);
     75a:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     75c:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
     75e:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     760:	ce 01       	movw	r24, r28
     762:	ee dd       	rcall	.-1060   	; 0x340 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     764:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	88 83       	st	Y, r24
	adc->CAL = cal;
     76a:	ec 86       	std	Y+12, r14	; 0x0c
     76c:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
     76e:	f8 01       	movw	r30, r16
     770:	85 81       	ldd	r24, Z+5	; 0x05
     772:	96 81       	ldd	r25, Z+6	; 0x06
     774:	88 8f       	std	Y+24, r24	; 0x18
     776:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
     778:	82 81       	ldd	r24, Z+2	; 0x02
     77a:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
     77c:	84 81       	ldd	r24, Z+4	; 0x04
     77e:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
     780:	83 81       	ldd	r24, Z+3	; 0x03
     782:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
     784:	81 81       	ldd	r24, Z+1	; 0x01
     786:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
     788:	82 2f       	mov	r24, r18
     78a:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
     78c:	90 81       	ld	r25, Z
     78e:	89 2b       	or	r24, r25
     790:	88 83       	st	Y, r24

	adc_disable_clock(adc);
     792:	ce 01       	movw	r24, r28
     794:	f4 dd       	rcall	.-1048   	; 0x37e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     796:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	08 95       	ret

000007a8 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
     7b4:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7b6:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     7b8:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     7ba:	c2 dd       	rcall	.-1148   	; 0x340 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     7bc:	88 81       	ld	r24, Y
     7be:	80 7c       	andi	r24, 0xC0	; 192
     7c0:	f8 01       	movw	r30, r16
     7c2:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     7c4:	88 8d       	ldd	r24, Y+24	; 0x18
     7c6:	99 8d       	ldd	r25, Y+25	; 0x19
     7c8:	85 83       	std	Z+5, r24	; 0x05
     7ca:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     7cc:	8a 81       	ldd	r24, Y+2	; 0x02
     7ce:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     7d0:	8c 81       	ldd	r24, Y+4	; 0x04
     7d2:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     7d4:	8b 81       	ldd	r24, Y+3	; 0x03
     7d6:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
     7dc:	ce 01       	movw	r24, r28
     7de:	cf dd       	rcall	.-1122   	; 0x37e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7e0:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	08 95       	ret

000007ee <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	7c 01       	movw	r14, r24
     800:	d6 2e       	mov	r13, r22
     802:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     804:	86 2f       	mov	r24, r22
     806:	83 70       	andi	r24, 0x03	; 3
     808:	29 f4       	brne	.+10     	; 0x814 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     80a:	96 2f       	mov	r25, r22
     80c:	96 95       	lsr	r25
     80e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	02 c0       	rjmp	.+4      	; 0x818 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     814:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     816:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     818:	90 ff       	sbrs	r25, 0
		index++;
     81a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     81c:	e7 01       	movw	r28, r14
     81e:	a0 96       	adiw	r28, 0x20	; 32
     820:	98 e0       	ldi	r25, 0x08	; 8
     822:	89 9f       	mul	r24, r25
     824:	c0 0d       	add	r28, r0
     826:	d1 1d       	adc	r29, r1
     828:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     82a:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     82c:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     82e:	c7 01       	movw	r24, r14
     830:	87 dd       	rcall	.-1266   	; 0x340 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     832:	f8 01       	movw	r30, r16
     834:	80 81       	ld	r24, Z
     836:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     838:	82 81       	ldd	r24, Z+2	; 0x02
     83a:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     83c:	81 81       	ldd	r24, Z+1	; 0x01
     83e:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     840:	d0 fe       	sbrs	r13, 0
     842:	02 c0       	rjmp	.+4      	; 0x848 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     844:	83 81       	ldd	r24, Z+3	; 0x03
     846:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
     848:	c7 01       	movw	r24, r14
     84a:	99 dd       	rcall	.-1230   	; 0x37e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     84c:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	08 95       	ret

00000860 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	7c 01       	movw	r14, r24
     872:	d6 2e       	mov	r13, r22
     874:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     876:	86 2f       	mov	r24, r22
     878:	83 70       	andi	r24, 0x03	; 3
     87a:	29 f4       	brne	.+10     	; 0x886 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     87c:	96 2f       	mov	r25, r22
     87e:	96 95       	lsr	r25
     880:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	02 c0       	rjmp	.+4      	; 0x88a <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     886:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     888:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     88a:	90 ff       	sbrs	r25, 0
		index++;
     88c:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     88e:	87 01       	movw	r16, r14
     890:	00 5e       	subi	r16, 0xE0	; 224
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	98 e0       	ldi	r25, 0x08	; 8
     896:	89 9f       	mul	r24, r25
     898:	00 0d       	add	r16, r0
     89a:	11 1d       	adc	r17, r1
     89c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     89e:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     8a0:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     8a2:	c7 01       	movw	r24, r14
     8a4:	4d dd       	rcall	.-1382   	; 0x340 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     8a6:	f8 01       	movw	r30, r16
     8a8:	80 81       	ld	r24, Z
     8aa:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     8ac:	82 81       	ldd	r24, Z+2	; 0x02
     8ae:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     8b0:	81 81       	ldd	r24, Z+1	; 0x01
     8b2:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     8b4:	d0 fe       	sbrs	r13, 0
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     8b8:	86 81       	ldd	r24, Z+6	; 0x06
     8ba:	8b 83       	std	Y+3, r24	; 0x03
	}
	adc_disable_clock(adc);
     8bc:	c7 01       	movw	r24, r14
     8be:	5f dd       	rcall	.-1346   	; 0x37e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8c0:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	08 95       	ret

000008d4 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	1f 92       	push	r1
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     8de:	80 91 2a 20 	lds	r24, 0x202A
     8e2:	90 91 2b 20 	lds	r25, 0x202B
     8e6:	e0 91 26 20 	lds	r30, 0x2026
     8ea:	f0 91 27 20 	lds	r31, 0x2027
     8ee:	be 01       	movw	r22, r28
     8f0:	6f 5f       	subi	r22, 0xFF	; 255
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	19 95       	eicall
	return c;
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     8f8:	99 27       	eor	r25, r25
     8fa:	87 fd       	sbrc	r24, 7
     8fc:	90 95       	com	r25
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     906:	fc 01       	movw	r30, r24
     908:	81 81       	ldd	r24, Z+1	; 0x01
     90a:	85 ff       	sbrs	r24, 5
     90c:	fd cf       	rjmp	.-6      	; 0x908 <usart_putchar+0x2>
     90e:	60 83       	st	Z, r22
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	08 95       	ret

00000916 <usart_getchar>:
     916:	fc 01       	movw	r30, r24
     918:	81 81       	ldd	r24, Z+1	; 0x01
     91a:	88 23       	and	r24, r24
     91c:	ec f7       	brge	.-6      	; 0x918 <usart_getchar+0x2>
     91e:	80 81       	ld	r24, Z
     920:	08 95       	ret

00000922 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     922:	4f 92       	push	r4
     924:	5f 92       	push	r5
     926:	6f 92       	push	r6
     928:	7f 92       	push	r7
     92a:	8f 92       	push	r8
     92c:	9f 92       	push	r9
     92e:	af 92       	push	r10
     930:	bf 92       	push	r11
     932:	cf 92       	push	r12
     934:	df 92       	push	r13
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	ec 01       	movw	r28, r24
     944:	4a 01       	movw	r8, r20
     946:	5b 01       	movw	r10, r22
     948:	28 01       	movw	r4, r16
     94a:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     94c:	d9 01       	movw	r26, r18
     94e:	c8 01       	movw	r24, r16
     950:	68 94       	set
     952:	12 f8       	bld	r1, 2
     954:	b6 95       	lsr	r27
     956:	a7 95       	ror	r26
     958:	97 95       	ror	r25
     95a:	87 95       	ror	r24
     95c:	16 94       	lsr	r1
     95e:	d1 f7       	brne	.-12     	; 0x954 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     960:	b9 01       	movw	r22, r18
     962:	a8 01       	movw	r20, r16
     964:	03 2e       	mov	r0, r19
     966:	36 e1       	ldi	r19, 0x16	; 22
     968:	76 95       	lsr	r23
     96a:	67 95       	ror	r22
     96c:	57 95       	ror	r21
     96e:	47 95       	ror	r20
     970:	3a 95       	dec	r19
     972:	d1 f7       	brne	.-12     	; 0x968 <usart_set_baudrate+0x46>
     974:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     976:	2c 81       	ldd	r18, Y+4	; 0x04
     978:	22 fd       	sbrc	r18, 2
     97a:	08 c0       	rjmp	.+16     	; 0x98c <usart_set_baudrate+0x6a>
		max_rate /= 2;
     97c:	b6 95       	lsr	r27
     97e:	a7 95       	ror	r26
     980:	97 95       	ror	r25
     982:	87 95       	ror	r24
		min_rate /= 2;
     984:	76 95       	lsr	r23
     986:	67 95       	ror	r22
     988:	57 95       	ror	r21
     98a:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     98c:	88 15       	cp	r24, r8
     98e:	99 05       	cpc	r25, r9
     990:	aa 05       	cpc	r26, r10
     992:	bb 05       	cpc	r27, r11
     994:	08 f4       	brcc	.+2      	; 0x998 <usart_set_baudrate+0x76>
     996:	a2 c0       	rjmp	.+324    	; 0xadc <usart_set_baudrate+0x1ba>
     998:	84 16       	cp	r8, r20
     99a:	95 06       	cpc	r9, r21
     99c:	a6 06       	cpc	r10, r22
     99e:	b7 06       	cpc	r11, r23
     9a0:	08 f4       	brcc	.+2      	; 0x9a4 <usart_set_baudrate+0x82>
     9a2:	9e c0       	rjmp	.+316    	; 0xae0 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     9a4:	8c 81       	ldd	r24, Y+4	; 0x04
     9a6:	82 fd       	sbrc	r24, 2
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <usart_set_baudrate+0x90>
		baud *= 2;
     9aa:	88 0c       	add	r8, r8
     9ac:	99 1c       	adc	r9, r9
     9ae:	aa 1c       	adc	r10, r10
     9b0:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     9b2:	c3 01       	movw	r24, r6
     9b4:	b2 01       	movw	r22, r4
     9b6:	a5 01       	movw	r20, r10
     9b8:	94 01       	movw	r18, r8
     9ba:	dd d7       	rcall	.+4026   	; 0x1976 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     9bc:	2f 3f       	cpi	r18, 0xFF	; 255
     9be:	31 05       	cpc	r19, r1
     9c0:	41 05       	cpc	r20, r1
     9c2:	51 05       	cpc	r21, r1
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <usart_set_baudrate+0xa6>
     9c6:	8e c0       	rjmp	.+284    	; 0xae4 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     9c8:	c1 2c       	mov	r12, r1
     9ca:	d1 2c       	mov	r13, r1
     9cc:	76 01       	movw	r14, r12
     9ce:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     9d0:	19 ef       	ldi	r17, 0xF9	; 249
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <usart_set_baudrate+0xbc>
		if (ratio < limit) {
     9d4:	2c 15       	cp	r18, r12
     9d6:	3d 05       	cpc	r19, r13
     9d8:	4e 05       	cpc	r20, r14
     9da:	5f 05       	cpc	r21, r15
     9dc:	68 f0       	brcs	.+26     	; 0x9f8 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
     9de:	cc 0c       	add	r12, r12
     9e0:	dd 1c       	adc	r13, r13
     9e2:	ee 1c       	adc	r14, r14
     9e4:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     9e6:	1d 3f       	cpi	r17, 0xFD	; 253
     9e8:	14 f4       	brge	.+4      	; 0x9ee <usart_set_baudrate+0xcc>
			limit |= 1;
     9ea:	68 94       	set
     9ec:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     9ee:	1f 5f       	subi	r17, 0xFF	; 255
     9f0:	17 30       	cpi	r17, 0x07	; 7
     9f2:	81 f7       	brne	.-32     	; 0x9d4 <usart_set_baudrate+0xb2>
     9f4:	21 2f       	mov	r18, r17
     9f6:	4e c0       	rjmp	.+156    	; 0xa94 <usart_set_baudrate+0x172>
     9f8:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     9fa:	11 23       	and	r17, r17
     9fc:	0c f0       	brlt	.+2      	; 0xa00 <usart_set_baudrate+0xde>
     9fe:	4a c0       	rjmp	.+148    	; 0xa94 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     a00:	d5 01       	movw	r26, r10
     a02:	c4 01       	movw	r24, r8
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	aa 1f       	adc	r26, r26
     a0a:	bb 1f       	adc	r27, r27
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	aa 1f       	adc	r26, r26
     a12:	bb 1f       	adc	r27, r27
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	aa 1f       	adc	r26, r26
     a1a:	bb 1f       	adc	r27, r27
     a1c:	48 1a       	sub	r4, r24
     a1e:	59 0a       	sbc	r5, r25
     a20:	6a 0a       	sbc	r6, r26
     a22:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     a24:	1e 3f       	cpi	r17, 0xFE	; 254
     a26:	ec f4       	brge	.+58     	; 0xa62 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     a28:	6d ef       	ldi	r22, 0xFD	; 253
     a2a:	7f ef       	ldi	r23, 0xFF	; 255
     a2c:	61 1b       	sub	r22, r17
     a2e:	71 09       	sbc	r23, r1
     a30:	17 fd       	sbrc	r17, 7
     a32:	73 95       	inc	r23
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <usart_set_baudrate+0x11c>
     a36:	44 0c       	add	r4, r4
     a38:	55 1c       	adc	r5, r5
     a3a:	66 1c       	adc	r6, r6
     a3c:	77 1c       	adc	r7, r7
     a3e:	6a 95       	dec	r22
     a40:	d2 f7       	brpl	.-12     	; 0xa36 <usart_set_baudrate+0x114>
     a42:	d5 01       	movw	r26, r10
     a44:	c4 01       	movw	r24, r8
     a46:	b6 95       	lsr	r27
     a48:	a7 95       	ror	r26
     a4a:	97 95       	ror	r25
     a4c:	87 95       	ror	r24
     a4e:	bc 01       	movw	r22, r24
     a50:	cd 01       	movw	r24, r26
     a52:	64 0d       	add	r22, r4
     a54:	75 1d       	adc	r23, r5
     a56:	86 1d       	adc	r24, r6
     a58:	97 1d       	adc	r25, r7
     a5a:	a5 01       	movw	r20, r10
     a5c:	94 01       	movw	r18, r8
     a5e:	8b d7       	rcall	.+3862   	; 0x1976 <__udivmodsi4>
     a60:	34 c0       	rjmp	.+104    	; 0xaca <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
     a62:	23 e0       	ldi	r18, 0x03	; 3
     a64:	21 0f       	add	r18, r17
     a66:	d5 01       	movw	r26, r10
     a68:	c4 01       	movw	r24, r8
     a6a:	04 c0       	rjmp	.+8      	; 0xa74 <usart_set_baudrate+0x152>
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	aa 1f       	adc	r26, r26
     a72:	bb 1f       	adc	r27, r27
     a74:	2a 95       	dec	r18
     a76:	d2 f7       	brpl	.-12     	; 0xa6c <usart_set_baudrate+0x14a>
     a78:	9c 01       	movw	r18, r24
     a7a:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     a7c:	b6 95       	lsr	r27
     a7e:	a7 95       	ror	r26
     a80:	97 95       	ror	r25
     a82:	87 95       	ror	r24
     a84:	bc 01       	movw	r22, r24
     a86:	cd 01       	movw	r24, r26
     a88:	64 0d       	add	r22, r4
     a8a:	75 1d       	adc	r23, r5
     a8c:	86 1d       	adc	r24, r6
     a8e:	97 1d       	adc	r25, r7
     a90:	72 d7       	rcall	.+3812   	; 0x1976 <__udivmodsi4>
     a92:	1b c0       	rjmp	.+54     	; 0xaca <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     a94:	2d 5f       	subi	r18, 0xFD	; 253
     a96:	d5 01       	movw	r26, r10
     a98:	c4 01       	movw	r24, r8
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <usart_set_baudrate+0x182>
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	aa 1f       	adc	r26, r26
     aa2:	bb 1f       	adc	r27, r27
     aa4:	2a 95       	dec	r18
     aa6:	d2 f7       	brpl	.-12     	; 0xa9c <usart_set_baudrate+0x17a>
     aa8:	9c 01       	movw	r18, r24
     aaa:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     aac:	b6 95       	lsr	r27
     aae:	a7 95       	ror	r26
     ab0:	97 95       	ror	r25
     ab2:	87 95       	ror	r24
     ab4:	bc 01       	movw	r22, r24
     ab6:	cd 01       	movw	r24, r26
     ab8:	64 0d       	add	r22, r4
     aba:	75 1d       	adc	r23, r5
     abc:	86 1d       	adc	r24, r6
     abe:	97 1d       	adc	r25, r7
     ac0:	5a d7       	rcall	.+3764   	; 0x1976 <__udivmodsi4>
     ac2:	21 50       	subi	r18, 0x01	; 1
     ac4:	31 09       	sbc	r19, r1
     ac6:	41 09       	sbc	r20, r1
     ac8:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     aca:	83 2f       	mov	r24, r19
     acc:	8f 70       	andi	r24, 0x0F	; 15
     ace:	12 95       	swap	r17
     ad0:	10 7f       	andi	r17, 0xF0	; 240
     ad2:	18 2b       	or	r17, r24
     ad4:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     ad6:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	18 c0       	rjmp	.+48     	; 0xb0c <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	16 c0       	rjmp	.+44     	; 0xb0c <usart_set_baudrate+0x1ea>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	14 c0       	rjmp	.+40     	; 0xb0c <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     ae4:	d5 01       	movw	r26, r10
     ae6:	c4 01       	movw	r24, r8
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	aa 1f       	adc	r26, r26
     aee:	bb 1f       	adc	r27, r27
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	aa 1f       	adc	r26, r26
     af6:	bb 1f       	adc	r27, r27
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	aa 1f       	adc	r26, r26
     afe:	bb 1f       	adc	r27, r27
     b00:	48 1a       	sub	r4, r24
     b02:	59 0a       	sbc	r5, r25
     b04:	6a 0a       	sbc	r6, r26
     b06:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     b08:	19 ef       	ldi	r17, 0xF9	; 249
     b0a:	8e cf       	rjmp	.-228    	; 0xa28 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	bf 90       	pop	r11
     b1e:	af 90       	pop	r10
     b20:	9f 90       	pop	r9
     b22:	8f 90       	pop	r8
     b24:	7f 90       	pop	r7
     b26:	6f 90       	pop	r6
     b28:	5f 90       	pop	r5
     b2a:	4f 90       	pop	r4
     b2c:	08 95       	ret

00000b2e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	ec 01       	movw	r28, r24
     b38:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	09 f4       	brne	.+2      	; 0xb40 <usart_init_rs232+0x12>
     b3e:	e6 c0       	rjmp	.+460    	; 0xd0c <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     b40:	80 3c       	cpi	r24, 0xC0	; 192
     b42:	91 05       	cpc	r25, r1
     b44:	21 f4       	brne	.+8      	; 0xb4e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     b46:	60 e1       	ldi	r22, 0x10	; 16
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	3e d1       	rcall	.+636    	; 0xdc8 <sysclk_enable_module>
     b4c:	df c0       	rjmp	.+446    	; 0xd0c <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     b4e:	c0 38       	cpi	r28, 0x80	; 128
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	d8 07       	cpc	r29, r24
     b54:	21 f4       	brne	.+8      	; 0xb5e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     b56:	62 e0       	ldi	r22, 0x02	; 2
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	36 d1       	rcall	.+620    	; 0xdc8 <sysclk_enable_module>
     b5c:	d7 c0       	rjmp	.+430    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     b5e:	c1 15       	cp	r28, r1
     b60:	e1 e0       	ldi	r30, 0x01	; 1
     b62:	de 07       	cpc	r29, r30
     b64:	21 f4       	brne	.+8      	; 0xb6e <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	2e d1       	rcall	.+604    	; 0xdc8 <sysclk_enable_module>
     b6c:	cf c0       	rjmp	.+414    	; 0xd0c <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     b6e:	c0 38       	cpi	r28, 0x80	; 128
     b70:	f3 e0       	ldi	r31, 0x03	; 3
     b72:	df 07       	cpc	r29, r31
     b74:	21 f4       	brne	.+8      	; 0xb7e <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	26 d1       	rcall	.+588    	; 0xdc8 <sysclk_enable_module>
     b7c:	c7 c0       	rjmp	.+398    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     b7e:	c0 39       	cpi	r28, 0x90	; 144
     b80:	83 e0       	ldi	r24, 0x03	; 3
     b82:	d8 07       	cpc	r29, r24
     b84:	21 f4       	brne	.+8      	; 0xb8e <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	1e d1       	rcall	.+572    	; 0xdc8 <sysclk_enable_module>
     b8c:	bf c0       	rjmp	.+382    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b8e:	c1 15       	cp	r28, r1
     b90:	e2 e0       	ldi	r30, 0x02	; 2
     b92:	de 07       	cpc	r29, r30
     b94:	21 f4       	brne	.+8      	; 0xb9e <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b96:	62 e0       	ldi	r22, 0x02	; 2
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	16 d1       	rcall	.+556    	; 0xdc8 <sysclk_enable_module>
     b9c:	b7 c0       	rjmp	.+366    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     b9e:	c0 34       	cpi	r28, 0x40	; 64
     ba0:	f2 e0       	ldi	r31, 0x02	; 2
     ba2:	df 07       	cpc	r29, r31
     ba4:	21 f4       	brne	.+8      	; 0xbae <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     ba6:	62 e0       	ldi	r22, 0x02	; 2
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	0e d1       	rcall	.+540    	; 0xdc8 <sysclk_enable_module>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     bae:	c0 32       	cpi	r28, 0x20	; 32
     bb0:	83 e0       	ldi	r24, 0x03	; 3
     bb2:	d8 07       	cpc	r29, r24
     bb4:	21 f4       	brne	.+8      	; 0xbbe <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     bb6:	64 e0       	ldi	r22, 0x04	; 4
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	06 d1       	rcall	.+524    	; 0xdc8 <sysclk_enable_module>
     bbc:	a7 c0       	rjmp	.+334    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     bbe:	c1 15       	cp	r28, r1
     bc0:	e8 e0       	ldi	r30, 0x08	; 8
     bc2:	de 07       	cpc	r29, r30
     bc4:	21 f4       	brne	.+8      	; 0xbce <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	fe d0       	rcall	.+508    	; 0xdc8 <sysclk_enable_module>
     bcc:	9f c0       	rjmp	.+318    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     bce:	c1 15       	cp	r28, r1
     bd0:	f9 e0       	ldi	r31, 0x09	; 9
     bd2:	df 07       	cpc	r29, r31
     bd4:	21 f4       	brne	.+8      	; 0xbde <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	84 e0       	ldi	r24, 0x04	; 4
     bda:	f6 d0       	rcall	.+492    	; 0xdc8 <sysclk_enable_module>
     bdc:	97 c0       	rjmp	.+302    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     bde:	c1 15       	cp	r28, r1
     be0:	8a e0       	ldi	r24, 0x0A	; 10
     be2:	d8 07       	cpc	r29, r24
     be4:	21 f4       	brne	.+8      	; 0xbee <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	85 e0       	ldi	r24, 0x05	; 5
     bea:	ee d0       	rcall	.+476    	; 0xdc8 <sysclk_enable_module>
     bec:	8f c0       	rjmp	.+286    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     bee:	c1 15       	cp	r28, r1
     bf0:	eb e0       	ldi	r30, 0x0B	; 11
     bf2:	de 07       	cpc	r29, r30
     bf4:	21 f4       	brne	.+8      	; 0xbfe <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	86 e0       	ldi	r24, 0x06	; 6
     bfa:	e6 d0       	rcall	.+460    	; 0xdc8 <sysclk_enable_module>
     bfc:	87 c0       	rjmp	.+270    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     bfe:	c0 34       	cpi	r28, 0x40	; 64
     c00:	f8 e0       	ldi	r31, 0x08	; 8
     c02:	df 07       	cpc	r29, r31
     c04:	21 f4       	brne	.+8      	; 0xc0e <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     c06:	62 e0       	ldi	r22, 0x02	; 2
     c08:	83 e0       	ldi	r24, 0x03	; 3
     c0a:	de d0       	rcall	.+444    	; 0xdc8 <sysclk_enable_module>
     c0c:	7f c0       	rjmp	.+254    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     c0e:	c0 34       	cpi	r28, 0x40	; 64
     c10:	89 e0       	ldi	r24, 0x09	; 9
     c12:	d8 07       	cpc	r29, r24
     c14:	21 f4       	brne	.+8      	; 0xc1e <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     c16:	62 e0       	ldi	r22, 0x02	; 2
     c18:	84 e0       	ldi	r24, 0x04	; 4
     c1a:	d6 d0       	rcall	.+428    	; 0xdc8 <sysclk_enable_module>
     c1c:	77 c0       	rjmp	.+238    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     c1e:	c0 34       	cpi	r28, 0x40	; 64
     c20:	ea e0       	ldi	r30, 0x0A	; 10
     c22:	de 07       	cpc	r29, r30
     c24:	21 f4       	brne	.+8      	; 0xc2e <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	85 e0       	ldi	r24, 0x05	; 5
     c2a:	ce d0       	rcall	.+412    	; 0xdc8 <sysclk_enable_module>
     c2c:	6f c0       	rjmp	.+222    	; 0xd0c <usart_init_rs232+0x1de>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     c2e:	c0 39       	cpi	r28, 0x90	; 144
     c30:	f8 e0       	ldi	r31, 0x08	; 8
     c32:	df 07       	cpc	r29, r31
     c34:	21 f4       	brne	.+8      	; 0xc3e <usart_init_rs232+0x110>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c36:	64 e0       	ldi	r22, 0x04	; 4
     c38:	83 e0       	ldi	r24, 0x03	; 3
     c3a:	c6 d0       	rcall	.+396    	; 0xdc8 <sysclk_enable_module>
     c3c:	67 c0       	rjmp	.+206    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     c3e:	c0 39       	cpi	r28, 0x90	; 144
     c40:	89 e0       	ldi	r24, 0x09	; 9
     c42:	d8 07       	cpc	r29, r24
     c44:	21 f4       	brne	.+8      	; 0xc4e <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     c46:	64 e0       	ldi	r22, 0x04	; 4
     c48:	84 e0       	ldi	r24, 0x04	; 4
     c4a:	be d0       	rcall	.+380    	; 0xdc8 <sysclk_enable_module>
     c4c:	5f c0       	rjmp	.+190    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     c4e:	c0 39       	cpi	r28, 0x90	; 144
     c50:	ea e0       	ldi	r30, 0x0A	; 10
     c52:	de 07       	cpc	r29, r30
     c54:	21 f4       	brne	.+8      	; 0xc5e <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     c56:	64 e0       	ldi	r22, 0x04	; 4
     c58:	85 e0       	ldi	r24, 0x05	; 5
     c5a:	b6 d0       	rcall	.+364    	; 0xdc8 <sysclk_enable_module>
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     c5e:	c0 39       	cpi	r28, 0x90	; 144
     c60:	fb e0       	ldi	r31, 0x0B	; 11
     c62:	df 07       	cpc	r29, r31
     c64:	21 f4       	brne	.+8      	; 0xc6e <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     c66:	64 e0       	ldi	r22, 0x04	; 4
     c68:	86 e0       	ldi	r24, 0x06	; 6
     c6a:	ae d0       	rcall	.+348    	; 0xdc8 <sysclk_enable_module>
     c6c:	4f c0       	rjmp	.+158    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     c6e:	c0 3c       	cpi	r28, 0xC0	; 192
     c70:	88 e0       	ldi	r24, 0x08	; 8
     c72:	d8 07       	cpc	r29, r24
     c74:	21 f4       	brne	.+8      	; 0xc7e <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c76:	68 e0       	ldi	r22, 0x08	; 8
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	a6 d0       	rcall	.+332    	; 0xdc8 <sysclk_enable_module>
     c7c:	47 c0       	rjmp	.+142    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     c7e:	c0 3c       	cpi	r28, 0xC0	; 192
     c80:	e9 e0       	ldi	r30, 0x09	; 9
     c82:	de 07       	cpc	r29, r30
     c84:	21 f4       	brne	.+8      	; 0xc8e <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     c86:	68 e0       	ldi	r22, 0x08	; 8
     c88:	84 e0       	ldi	r24, 0x04	; 4
     c8a:	9e d0       	rcall	.+316    	; 0xdc8 <sysclk_enable_module>
     c8c:	3f c0       	rjmp	.+126    	; 0xd0c <usart_init_rs232+0x1de>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     c8e:	c0 3a       	cpi	r28, 0xA0	; 160
     c90:	f8 e0       	ldi	r31, 0x08	; 8
     c92:	df 07       	cpc	r29, r31
     c94:	21 f4       	brne	.+8      	; 0xc9e <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     c96:	60 e1       	ldi	r22, 0x10	; 16
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	96 d0       	rcall	.+300    	; 0xdc8 <sysclk_enable_module>
     c9c:	37 c0       	rjmp	.+110    	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     c9e:	c0 3a       	cpi	r28, 0xA0	; 160
     ca0:	89 e0       	ldi	r24, 0x09	; 9
     ca2:	d8 07       	cpc	r29, r24
     ca4:	21 f4       	brne	.+8      	; 0xcae <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     ca6:	60 e1       	ldi	r22, 0x10	; 16
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	8e d0       	rcall	.+284    	; 0xdc8 <sysclk_enable_module>
     cac:	2f c0       	rjmp	.+94     	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     cae:	c0 3a       	cpi	r28, 0xA0	; 160
     cb0:	ea e0       	ldi	r30, 0x0A	; 10
     cb2:	de 07       	cpc	r29, r30
     cb4:	21 f4       	brne	.+8      	; 0xcbe <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     cb6:	60 e1       	ldi	r22, 0x10	; 16
     cb8:	85 e0       	ldi	r24, 0x05	; 5
     cba:	86 d0       	rcall	.+268    	; 0xdc8 <sysclk_enable_module>
     cbc:	27 c0       	rjmp	.+78     	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     cbe:	c0 3a       	cpi	r28, 0xA0	; 160
     cc0:	fb e0       	ldi	r31, 0x0B	; 11
     cc2:	df 07       	cpc	r29, r31
     cc4:	21 f4       	brne	.+8      	; 0xcce <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     cc6:	60 e1       	ldi	r22, 0x10	; 16
     cc8:	86 e0       	ldi	r24, 0x06	; 6
     cca:	7e d0       	rcall	.+252    	; 0xdc8 <sysclk_enable_module>
     ccc:	1f c0       	rjmp	.+62     	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     cce:	c0 3b       	cpi	r28, 0xB0	; 176
     cd0:	88 e0       	ldi	r24, 0x08	; 8
     cd2:	d8 07       	cpc	r29, r24
     cd4:	21 f4       	brne	.+8      	; 0xcde <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     cd6:	60 e2       	ldi	r22, 0x20	; 32
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	76 d0       	rcall	.+236    	; 0xdc8 <sysclk_enable_module>
     cdc:	17 c0       	rjmp	.+46     	; 0xd0c <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     cde:	c0 3b       	cpi	r28, 0xB0	; 176
     ce0:	e9 e0       	ldi	r30, 0x09	; 9
     ce2:	de 07       	cpc	r29, r30
     ce4:	21 f4       	brne	.+8      	; 0xcee <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     ce6:	60 e2       	ldi	r22, 0x20	; 32
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	6e d0       	rcall	.+220    	; 0xdc8 <sysclk_enable_module>
     cec:	0f c0       	rjmp	.+30     	; 0xd0c <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     cee:	c0 38       	cpi	r28, 0x80	; 128
     cf0:	f4 e0       	ldi	r31, 0x04	; 4
     cf2:	df 07       	cpc	r29, r31
     cf4:	21 f4       	brne	.+8      	; 0xcfe <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     cf6:	60 e4       	ldi	r22, 0x40	; 64
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	66 d0       	rcall	.+204    	; 0xdc8 <sysclk_enable_module>
     cfc:	07 c0       	rjmp	.+14     	; 0xd0c <usart_init_rs232+0x1de>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     cfe:	c0 3a       	cpi	r28, 0xA0	; 160
     d00:	84 e0       	ldi	r24, 0x04	; 4
     d02:	d8 07       	cpc	r29, r24
     d04:	19 f4       	brne	.+6      	; 0xd0c <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     d06:	60 e4       	ldi	r22, 0x40	; 64
     d08:	85 e0       	ldi	r24, 0x05	; 5
     d0a:	5e d0       	rcall	.+188    	; 0xdc8 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
     d0e:	8f 73       	andi	r24, 0x3F	; 63
     d10:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     d12:	f8 01       	movw	r30, r16
     d14:	94 81       	ldd	r25, Z+4	; 0x04
     d16:	85 81       	ldd	r24, Z+5	; 0x05
     d18:	89 2b       	or	r24, r25
     d1a:	96 81       	ldd	r25, Z+6	; 0x06
     d1c:	99 23       	and	r25, r25
     d1e:	11 f0       	breq	.+4      	; 0xd24 <usart_init_rs232+0x1f6>
     d20:	98 e0       	ldi	r25, 0x08	; 8
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <usart_init_rs232+0x1f8>
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	89 2b       	or	r24, r25
     d28:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     d2a:	f8 01       	movw	r30, r16
     d2c:	40 81       	ld	r20, Z
     d2e:	51 81       	ldd	r21, Z+1	; 0x01
     d30:	62 81       	ldd	r22, Z+2	; 0x02
     d32:	73 81       	ldd	r23, Z+3	; 0x03
     d34:	00 e0       	ldi	r16, 0x00	; 0
     d36:	18 e4       	ldi	r17, 0x48	; 72
     d38:	28 ee       	ldi	r18, 0xE8	; 232
     d3a:	31 e0       	ldi	r19, 0x01	; 1
     d3c:	ce 01       	movw	r24, r28
     d3e:	f1 dd       	rcall	.-1054   	; 0x922 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     d40:	9c 81       	ldd	r25, Y+4	; 0x04
     d42:	98 60       	ori	r25, 0x08	; 8
     d44:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     d46:	9c 81       	ldd	r25, Y+4	; 0x04
     d48:	90 61       	ori	r25, 0x10	; 16
     d4a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     d56:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     d58:	80 91 2a 20 	lds	r24, 0x202A
     d5c:	90 91 2b 20 	lds	r25, 0x202B
     d60:	e0 91 28 20 	lds	r30, 0x2028
     d64:	f0 91 29 20 	lds	r31, 0x2029
     d68:	19 95       	eicall
     d6a:	99 23       	and	r25, r25
     d6c:	1c f4       	brge	.+6      	; 0xd74 <_write+0x1e>
		return -1;
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	9f ef       	ldi	r25, 0xFF	; 255
     d72:	08 95       	ret
	}
	return 1;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
}
     d78:	08 95       	ret

00000d7a <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	80 93 70 00 	sts	0x0070, r24
     d80:	80 93 71 00 	sts	0x0071, r24
     d84:	80 93 72 00 	sts	0x0072, r24
     d88:	80 93 73 00 	sts	0x0073, r24
     d8c:	80 93 74 00 	sts	0x0074, r24
     d90:	80 93 75 00 	sts	0x0075, r24
     d94:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d98:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     d9a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     d9c:	e0 e5       	ldi	r30, 0x50	; 80
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	90 81       	ld	r25, Z
     da2:	92 60       	ori	r25, 0x02	; 2
     da4:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     da6:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     da8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     daa:	81 ff       	sbrs	r24, 1
     dac:	fd cf       	rjmp	.-6      	; 0xda8 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	80 e4       	ldi	r24, 0x40	; 64
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	2a d0       	rcall	.+84     	; 0xe0a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     db6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     db8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     dba:	e0 e5       	ldi	r30, 0x50	; 80
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	90 81       	ld	r25, Z
     dc0:	9e 7f       	andi	r25, 0xFE	; 254
     dc2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     dc4:	8f bf       	out	0x3f, r24	; 63
     dc6:	08 95       	ret

00000dc8 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     dc8:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     dca:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     dcc:	e8 2f       	mov	r30, r24
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	e0 59       	subi	r30, 0x90	; 144
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	60 95       	com	r22
     dd6:	80 81       	ld	r24, Z
     dd8:	68 23       	and	r22, r24
     dda:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ddc:	9f bf       	out	0x3f, r25	; 63
     dde:	08 95       	ret

00000de0 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     de0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     de2:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     de4:	e8 2f       	mov	r30, r24
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	e0 59       	subi	r30, 0x90	; 144
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	80 81       	ld	r24, Z
     dee:	68 2b       	or	r22, r24
     df0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     df2:	9f bf       	out	0x3f, r25	; 63
     df4:	08 95       	ret

00000df6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     df6:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
     dfa:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     dfc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     dfe:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
     e02:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     e04:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     e08:	08 95       	ret

00000e0a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     e0a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     e0c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     e0e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     e10:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     e12:	60 83       	st	Z, r22
	ret                             // Return to caller
     e14:	08 95       	ret

00000e16 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     e1c:	7c dd       	rcall	.-1288   	; 0x916 <usart_getchar>
     e1e:	88 83       	st	Y, r24
}
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     e26:	6f cd       	rjmp	.-1314   	; 0x906 <usart_putchar>
}
     e28:	08 95       	ret

00000e2a <main>:
	adc_write_configuration(&MY_ADC, &adc_conf);
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
}


int main (void) {
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	2b 97       	sbiw	r28, 0x0b	; 11
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	de bf       	out	0x3e, r29	; 62
	
	sysclk_init();
     e38:	a0 df       	rcall	.-192    	; 0xd7a <sysclk_init>
static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	
	adc_read_configuration(&MY_ADC, &adc_conf);
     e3a:	be 01       	movw	r22, r28
     e3c:	6f 5f       	subi	r22, 0xFF	; 255
     e3e:	7f 4f       	sbci	r23, 0xFF	; 255
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	b1 dc       	rcall	.-1694   	; 0x7a8 <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
     e46:	ae 01       	movw	r20, r28
     e48:	48 5f       	subi	r20, 0xF8	; 248
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	06 dd       	rcall	.-1524   	; 0x860 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     e56:	9b 81       	ldd	r25, Y+3	; 0x03
     e58:	9f 78       	andi	r25, 0x8F	; 143
     e5a:	9b 83       	std	Y+3, r25	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     e5c:	81 7e       	andi	r24, 0xE1	; 225
     e5e:	80 61       	ori	r24, 0x10	; 16
     e60:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
     e62:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     e64:	84 e0       	ldi	r24, 0x04	; 4
     e66:	8d 83       	std	Y+5, r24	; 0x05
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	88 87       	std	Y+8, r24	; 0x08
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     e6c:	89 e0       	ldi	r24, 0x09	; 9
     e6e:	89 87       	std	Y+9, r24	; 0x09
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_ON, ADC_RES_12,ADC_REF_BANDGAP);
	
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 500000UL);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_POS_PIN5,GAIN);
	adc_write_configuration(&MY_ADC, &adc_conf);
     e70:	be 01       	movw	r22, r28
     e72:	6f 5f       	subi	r22, 0xFF	; 255
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	45 dc       	rcall	.-1910   	; 0x706 <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
     e7c:	ae 01       	movw	r20, r28
     e7e:	48 5f       	subi	r20, 0xF8	; 248
     e80:	5f 4f       	sbci	r21, 0xFF	; 255
     e82:	61 e0       	ldi	r22, 0x01	; 1
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	92 e0       	ldi	r25, 0x02	; 2
     e88:	b2 dc       	rcall	.-1692   	; 0x7ee <adcch_write_configuration>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     e8a:	80 ea       	ldi	r24, 0xA0	; 160
     e8c:	9a e0       	ldi	r25, 0x0A	; 10
     e8e:	80 93 2a 20 	sts	0x202A, r24
     e92:	90 93 2b 20 	sts	0x202B, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     e96:	83 e1       	ldi	r24, 0x13	; 19
     e98:	97 e0       	ldi	r25, 0x07	; 7
     e9a:	80 93 28 20 	sts	0x2028, r24
     e9e:	90 93 29 20 	sts	0x2029, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     ea2:	8b e0       	ldi	r24, 0x0B	; 11
     ea4:	97 e0       	ldi	r25, 0x07	; 7
     ea6:	80 93 26 20 	sts	0x2026, r24
     eaa:	90 93 27 20 	sts	0x2027, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     eae:	80 91 0a 20 	lds	r24, 0x200A
     eb2:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     eb4:	80 91 0b 20 	lds	r24, 0x200B
     eb8:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     eba:	80 91 0c 20 	lds	r24, 0x200C
     ebe:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     ec0:	80 91 06 20 	lds	r24, 0x2006
     ec4:	90 91 07 20 	lds	r25, 0x2007
     ec8:	a0 91 08 20 	lds	r26, 0x2008
     ecc:	b0 91 09 20 	lds	r27, 0x2009
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	ab 83       	std	Y+3, r26	; 0x03
     ed6:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     ed8:	60 e1       	ldi	r22, 0x10	; 16
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	75 df       	rcall	.-278    	; 0xdc8 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     ede:	be 01       	movw	r22, r28
     ee0:	6f 5f       	subi	r22, 0xFF	; 255
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	80 ea       	ldi	r24, 0xA0	; 160
     ee6:	9a e0       	ldi	r25, 0x0A	; 10
     ee8:	22 de       	rcall	.-956    	; 0xb2e <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     eea:	6a e6       	ldi	r22, 0x6A	; 106
     eec:	74 e0       	ldi	r23, 0x04	; 4
     eee:	8b ea       	ldi	r24, 0xAB	; 171
     ef0:	96 e0       	ldi	r25, 0x06	; 6
     ef2:	51 d6       	rcall	.+3234   	; 0x1b96 <fdevopen>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     ef4:	88 e0       	ldi	r24, 0x08	; 8
     ef6:	e0 e8       	ldi	r30, 0x80	; 128
     ef8:	f6 e0       	ldi	r31, 0x06	; 6
     efa:	81 83       	std	Z+1, r24	; 0x01
	
	
	adc_init();
	stdio_serial_init(&USARTE0, &USART_SERIAL_OPTIONS);
	ioport_set_pin_dir(UART_TXPIN, IOPORT_DIR_OUTPUT);
	adc_enable(&MY_ADC);
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	5b da       	rcall	.-2890   	; 0x3b8 <adc_enable>
	
	while(1) {
		
		c = getchar();
		
		if (c != '\0'){
     f02:	71 2c       	mov	r7, r1
     f04:	81 2c       	mov	r8, r1
     f06:	61 2c       	mov	r6, r1
     f08:	51 2c       	mov	r5, r1
     f0a:	41 2c       	mov	r4, r1
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     f0c:	00 e0       	ldi	r16, 0x00	; 0
     f0e:	12 e0       	ldi	r17, 0x02	; 2
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     f10:	99 24       	eor	r9, r9
     f12:	93 94       	inc	r9
				adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
				sum_result += (adc_get_signed_result(&MY_ADC, MY_ADC_CH));
			}
			
		  	oversampled_result = ((sum_result/SAMPLES_PER_MEASUREMENT)*(REF_VOLTAGE_mV/2048.0));
			printf("%f\n",oversampled_result);
     f14:	0f 2e       	mov	r0, r31
     f16:	fd e0       	ldi	r31, 0x0D	; 13
     f18:	2f 2e       	mov	r2, r31
     f1a:	f0 e2       	ldi	r31, 0x20	; 32
     f1c:	3f 2e       	mov	r3, r31
     f1e:	f0 2d       	mov	r31, r0
float sum_result;
	float oversampled_result;
	
	while(1) {
		
		c = getchar();
     f20:	ec e2       	ldi	r30, 0x2C	; 44
     f22:	f0 e2       	ldi	r31, 0x20	; 32
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	80 d6       	rcall	.+3328   	; 0x1c2a <fgetc>
		
		if (c != '\0'){
     f2a:	88 23       	and	r24, r24
     f2c:	09 f4       	brne	.+2      	; 0xf30 <main+0x106>
     f2e:	48 c0       	rjmp	.+144    	; 0xfc0 <main+0x196>
     f30:	e7 2c       	mov	r14, r7
     f32:	68 94       	set
     f34:	ff 24       	eor	r15, r15
     f36:	f3 f8       	bld	r15, 3
     f38:	a8 2c       	mov	r10, r8
     f3a:	b6 2c       	mov	r11, r6
     f3c:	c5 2c       	mov	r12, r5
     f3e:	d4 2c       	mov	r13, r4

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f40:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     f42:	f8 94       	cli
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     f44:	f8 01       	movw	r30, r16
     f46:	90 81       	ld	r25, Z
     f48:	94 60       	ori	r25, 0x04	; 4
     f4a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f4c:	8f bf       	out	0x3f, r24	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     f4e:	f8 01       	movw	r30, r16
     f50:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     f52:	80 ff       	sbrs	r24, 0
     f54:	fc cf       	rjmp	.-8      	; 0xf4e <main+0x124>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     f56:	96 82       	std	Z+6, r9	; 0x06

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f58:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     f5a:	f8 94       	cli
	ADC_CH_t *adc_ch;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
	val = adc_ch->RES;
     f5c:	f8 01       	movw	r30, r16
     f5e:	64 a1       	ldd	r22, Z+36	; 0x24
     f60:	75 a1       	ldd	r23, Z+37	; 0x25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f62:	8f bf       	out	0x3f, r24	; 63
			
			for (unsigned int ucCounter = 0; ucCounter < SAMPLES_PER_MEASUREMENT; ucCounter++){
				
				adc_start_conversion(&MY_ADC, MY_ADC_CH);
				adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
				sum_result += (adc_get_signed_result(&MY_ADC, MY_ADC_CH));
     f64:	88 27       	eor	r24, r24
     f66:	77 fd       	sbrc	r23, 7
     f68:	80 95       	com	r24
     f6a:	98 2f       	mov	r25, r24
     f6c:	94 d0       	rcall	.+296    	; 0x1096 <__floatsisf>
     f6e:	9b 01       	movw	r18, r22
     f70:	ac 01       	movw	r20, r24
     f72:	6a 2d       	mov	r22, r10
     f74:	7b 2d       	mov	r23, r11
     f76:	8c 2d       	mov	r24, r12
     f78:	9d 2d       	mov	r25, r13
     f7a:	27 d0       	rcall	.+78     	; 0xfca <__addsf3>
     f7c:	a6 2e       	mov	r10, r22
     f7e:	b7 2e       	mov	r11, r23
     f80:	c8 2e       	mov	r12, r24
     f82:	d9 2e       	mov	r13, r25
     f84:	f1 e0       	ldi	r31, 0x01	; 1
     f86:	ef 1a       	sub	r14, r31
     f88:	f1 08       	sbc	r15, r1
		if (c != '\0'){
			
			oversampled_result = 0;
			sum_result = 0;
			
			for (unsigned int ucCounter = 0; ucCounter < SAMPLES_PER_MEASUREMENT; ucCounter++){
     f8a:	e1 14       	cp	r14, r1
     f8c:	f1 04       	cpc	r15, r1
     f8e:	c1 f6       	brne	.-80     	; 0xf40 <main+0x116>
				adc_start_conversion(&MY_ADC, MY_ADC_CH);
				adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
				sum_result += (adc_get_signed_result(&MY_ADC, MY_ADC_CH));
			}
			
		  	oversampled_result = ((sum_result/SAMPLES_PER_MEASUREMENT)*(REF_VOLTAGE_mV/2048.0));
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	5a e3       	ldi	r21, 0x3A	; 58
     f98:	0a d1       	rcall	.+532    	; 0x11ae <__mulsf3>
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	4a ef       	ldi	r20, 0xFA	; 250
     fa0:	5e e3       	ldi	r21, 0x3E	; 62
     fa2:	05 d1       	rcall	.+522    	; 0x11ae <__mulsf3>
			printf("%f\n",oversampled_result);
     fa4:	9f 93       	push	r25
     fa6:	8f 93       	push	r24
     fa8:	7f 93       	push	r23
     faa:	6f 93       	push	r22
     fac:	3f 92       	push	r3
     fae:	2f 92       	push	r2
     fb0:	ac d6       	rcall	.+3416   	; 0x1d0a <printf>
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	b0 cf       	rjmp	.-160    	; 0xf20 <main+0xf6>
		}
		else{
			printf("Nothing\n");
     fc0:	81 e1       	ldi	r24, 0x11	; 17
     fc2:	90 e2       	ldi	r25, 0x20	; 32
     fc4:	b3 d6       	rcall	.+3430   	; 0x1d2c <puts>
     fc6:	ac cf       	rjmp	.-168    	; 0xf20 <main+0xf6>

00000fc8 <__subsf3>:
     fc8:	50 58       	subi	r21, 0x80	; 128

00000fca <__addsf3>:
     fca:	bb 27       	eor	r27, r27
     fcc:	aa 27       	eor	r26, r26
     fce:	0e d0       	rcall	.+28     	; 0xfec <__addsf3x>
     fd0:	b4 c0       	rjmp	.+360    	; 0x113a <__fp_round>
     fd2:	a5 d0       	rcall	.+330    	; 0x111e <__fp_pscA>
     fd4:	30 f0       	brcs	.+12     	; 0xfe2 <__addsf3+0x18>
     fd6:	aa d0       	rcall	.+340    	; 0x112c <__fp_pscB>
     fd8:	20 f0       	brcs	.+8      	; 0xfe2 <__addsf3+0x18>
     fda:	31 f4       	brne	.+12     	; 0xfe8 <__addsf3+0x1e>
     fdc:	9f 3f       	cpi	r25, 0xFF	; 255
     fde:	11 f4       	brne	.+4      	; 0xfe4 <__addsf3+0x1a>
     fe0:	1e f4       	brtc	.+6      	; 0xfe8 <__addsf3+0x1e>
     fe2:	9a c0       	rjmp	.+308    	; 0x1118 <__fp_nan>
     fe4:	0e f4       	brtc	.+2      	; 0xfe8 <__addsf3+0x1e>
     fe6:	e0 95       	com	r30
     fe8:	e7 fb       	bst	r30, 7
     fea:	90 c0       	rjmp	.+288    	; 0x110c <__fp_inf>

00000fec <__addsf3x>:
     fec:	e9 2f       	mov	r30, r25
     fee:	b6 d0       	rcall	.+364    	; 0x115c <__fp_split3>
     ff0:	80 f3       	brcs	.-32     	; 0xfd2 <__addsf3+0x8>
     ff2:	ba 17       	cp	r27, r26
     ff4:	62 07       	cpc	r22, r18
     ff6:	73 07       	cpc	r23, r19
     ff8:	84 07       	cpc	r24, r20
     ffa:	95 07       	cpc	r25, r21
     ffc:	18 f0       	brcs	.+6      	; 0x1004 <__addsf3x+0x18>
     ffe:	71 f4       	brne	.+28     	; 0x101c <__addsf3x+0x30>
    1000:	9e f5       	brtc	.+102    	; 0x1068 <__addsf3x+0x7c>
    1002:	ce c0       	rjmp	.+412    	; 0x11a0 <__fp_zero>
    1004:	0e f4       	brtc	.+2      	; 0x1008 <__addsf3x+0x1c>
    1006:	e0 95       	com	r30
    1008:	0b 2e       	mov	r0, r27
    100a:	ba 2f       	mov	r27, r26
    100c:	a0 2d       	mov	r26, r0
    100e:	0b 01       	movw	r0, r22
    1010:	b9 01       	movw	r22, r18
    1012:	90 01       	movw	r18, r0
    1014:	0c 01       	movw	r0, r24
    1016:	ca 01       	movw	r24, r20
    1018:	a0 01       	movw	r20, r0
    101a:	11 24       	eor	r1, r1
    101c:	ff 27       	eor	r31, r31
    101e:	59 1b       	sub	r21, r25
    1020:	99 f0       	breq	.+38     	; 0x1048 <__addsf3x+0x5c>
    1022:	59 3f       	cpi	r21, 0xF9	; 249
    1024:	50 f4       	brcc	.+20     	; 0x103a <__addsf3x+0x4e>
    1026:	50 3e       	cpi	r21, 0xE0	; 224
    1028:	68 f1       	brcs	.+90     	; 0x1084 <__addsf3x+0x98>
    102a:	1a 16       	cp	r1, r26
    102c:	f0 40       	sbci	r31, 0x00	; 0
    102e:	a2 2f       	mov	r26, r18
    1030:	23 2f       	mov	r18, r19
    1032:	34 2f       	mov	r19, r20
    1034:	44 27       	eor	r20, r20
    1036:	58 5f       	subi	r21, 0xF8	; 248
    1038:	f3 cf       	rjmp	.-26     	; 0x1020 <__addsf3x+0x34>
    103a:	46 95       	lsr	r20
    103c:	37 95       	ror	r19
    103e:	27 95       	ror	r18
    1040:	a7 95       	ror	r26
    1042:	f0 40       	sbci	r31, 0x00	; 0
    1044:	53 95       	inc	r21
    1046:	c9 f7       	brne	.-14     	; 0x103a <__addsf3x+0x4e>
    1048:	7e f4       	brtc	.+30     	; 0x1068 <__addsf3x+0x7c>
    104a:	1f 16       	cp	r1, r31
    104c:	ba 0b       	sbc	r27, r26
    104e:	62 0b       	sbc	r22, r18
    1050:	73 0b       	sbc	r23, r19
    1052:	84 0b       	sbc	r24, r20
    1054:	ba f0       	brmi	.+46     	; 0x1084 <__addsf3x+0x98>
    1056:	91 50       	subi	r25, 0x01	; 1
    1058:	a1 f0       	breq	.+40     	; 0x1082 <__addsf3x+0x96>
    105a:	ff 0f       	add	r31, r31
    105c:	bb 1f       	adc	r27, r27
    105e:	66 1f       	adc	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	c2 f7       	brpl	.-16     	; 0x1056 <__addsf3x+0x6a>
    1066:	0e c0       	rjmp	.+28     	; 0x1084 <__addsf3x+0x98>
    1068:	ba 0f       	add	r27, r26
    106a:	62 1f       	adc	r22, r18
    106c:	73 1f       	adc	r23, r19
    106e:	84 1f       	adc	r24, r20
    1070:	48 f4       	brcc	.+18     	; 0x1084 <__addsf3x+0x98>
    1072:	87 95       	ror	r24
    1074:	77 95       	ror	r23
    1076:	67 95       	ror	r22
    1078:	b7 95       	ror	r27
    107a:	f7 95       	ror	r31
    107c:	9e 3f       	cpi	r25, 0xFE	; 254
    107e:	08 f0       	brcs	.+2      	; 0x1082 <__addsf3x+0x96>
    1080:	b3 cf       	rjmp	.-154    	; 0xfe8 <__addsf3+0x1e>
    1082:	93 95       	inc	r25
    1084:	88 0f       	add	r24, r24
    1086:	08 f0       	brcs	.+2      	; 0x108a <__addsf3x+0x9e>
    1088:	99 27       	eor	r25, r25
    108a:	ee 0f       	add	r30, r30
    108c:	97 95       	ror	r25
    108e:	87 95       	ror	r24
    1090:	08 95       	ret

00001092 <__floatunsisf>:
    1092:	e8 94       	clt
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <__floatsisf+0x12>

00001096 <__floatsisf>:
    1096:	97 fb       	bst	r25, 7
    1098:	3e f4       	brtc	.+14     	; 0x10a8 <__floatsisf+0x12>
    109a:	90 95       	com	r25
    109c:	80 95       	com	r24
    109e:	70 95       	com	r23
    10a0:	61 95       	neg	r22
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	8f 4f       	sbci	r24, 0xFF	; 255
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	99 23       	and	r25, r25
    10aa:	a9 f0       	breq	.+42     	; 0x10d6 <__floatsisf+0x40>
    10ac:	f9 2f       	mov	r31, r25
    10ae:	96 e9       	ldi	r25, 0x96	; 150
    10b0:	bb 27       	eor	r27, r27
    10b2:	93 95       	inc	r25
    10b4:	f6 95       	lsr	r31
    10b6:	87 95       	ror	r24
    10b8:	77 95       	ror	r23
    10ba:	67 95       	ror	r22
    10bc:	b7 95       	ror	r27
    10be:	f1 11       	cpse	r31, r1
    10c0:	f8 cf       	rjmp	.-16     	; 0x10b2 <__floatsisf+0x1c>
    10c2:	fa f4       	brpl	.+62     	; 0x1102 <__floatsisf+0x6c>
    10c4:	bb 0f       	add	r27, r27
    10c6:	11 f4       	brne	.+4      	; 0x10cc <__floatsisf+0x36>
    10c8:	60 ff       	sbrs	r22, 0
    10ca:	1b c0       	rjmp	.+54     	; 0x1102 <__floatsisf+0x6c>
    10cc:	6f 5f       	subi	r22, 0xFF	; 255
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	8f 4f       	sbci	r24, 0xFF	; 255
    10d2:	9f 4f       	sbci	r25, 0xFF	; 255
    10d4:	16 c0       	rjmp	.+44     	; 0x1102 <__floatsisf+0x6c>
    10d6:	88 23       	and	r24, r24
    10d8:	11 f0       	breq	.+4      	; 0x10de <__floatsisf+0x48>
    10da:	96 e9       	ldi	r25, 0x96	; 150
    10dc:	11 c0       	rjmp	.+34     	; 0x1100 <__floatsisf+0x6a>
    10de:	77 23       	and	r23, r23
    10e0:	21 f0       	breq	.+8      	; 0x10ea <__floatsisf+0x54>
    10e2:	9e e8       	ldi	r25, 0x8E	; 142
    10e4:	87 2f       	mov	r24, r23
    10e6:	76 2f       	mov	r23, r22
    10e8:	05 c0       	rjmp	.+10     	; 0x10f4 <__floatsisf+0x5e>
    10ea:	66 23       	and	r22, r22
    10ec:	71 f0       	breq	.+28     	; 0x110a <__floatsisf+0x74>
    10ee:	96 e8       	ldi	r25, 0x86	; 134
    10f0:	86 2f       	mov	r24, r22
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	2a f0       	brmi	.+10     	; 0x1102 <__floatsisf+0x6c>
    10f8:	9a 95       	dec	r25
    10fa:	66 0f       	add	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	88 1f       	adc	r24, r24
    1100:	da f7       	brpl	.-10     	; 0x10f8 <__floatsisf+0x62>
    1102:	88 0f       	add	r24, r24
    1104:	96 95       	lsr	r25
    1106:	87 95       	ror	r24
    1108:	97 f9       	bld	r25, 7
    110a:	08 95       	ret

0000110c <__fp_inf>:
    110c:	97 f9       	bld	r25, 7
    110e:	9f 67       	ori	r25, 0x7F	; 127
    1110:	80 e8       	ldi	r24, 0x80	; 128
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	08 95       	ret

00001118 <__fp_nan>:
    1118:	9f ef       	ldi	r25, 0xFF	; 255
    111a:	80 ec       	ldi	r24, 0xC0	; 192
    111c:	08 95       	ret

0000111e <__fp_pscA>:
    111e:	00 24       	eor	r0, r0
    1120:	0a 94       	dec	r0
    1122:	16 16       	cp	r1, r22
    1124:	17 06       	cpc	r1, r23
    1126:	18 06       	cpc	r1, r24
    1128:	09 06       	cpc	r0, r25
    112a:	08 95       	ret

0000112c <__fp_pscB>:
    112c:	00 24       	eor	r0, r0
    112e:	0a 94       	dec	r0
    1130:	12 16       	cp	r1, r18
    1132:	13 06       	cpc	r1, r19
    1134:	14 06       	cpc	r1, r20
    1136:	05 06       	cpc	r0, r21
    1138:	08 95       	ret

0000113a <__fp_round>:
    113a:	09 2e       	mov	r0, r25
    113c:	03 94       	inc	r0
    113e:	00 0c       	add	r0, r0
    1140:	11 f4       	brne	.+4      	; 0x1146 <__fp_round+0xc>
    1142:	88 23       	and	r24, r24
    1144:	52 f0       	brmi	.+20     	; 0x115a <__fp_round+0x20>
    1146:	bb 0f       	add	r27, r27
    1148:	40 f4       	brcc	.+16     	; 0x115a <__fp_round+0x20>
    114a:	bf 2b       	or	r27, r31
    114c:	11 f4       	brne	.+4      	; 0x1152 <__fp_round+0x18>
    114e:	60 ff       	sbrs	r22, 0
    1150:	04 c0       	rjmp	.+8      	; 0x115a <__fp_round+0x20>
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	8f 4f       	sbci	r24, 0xFF	; 255
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	08 95       	ret

0000115c <__fp_split3>:
    115c:	57 fd       	sbrc	r21, 7
    115e:	90 58       	subi	r25, 0x80	; 128
    1160:	44 0f       	add	r20, r20
    1162:	55 1f       	adc	r21, r21
    1164:	59 f0       	breq	.+22     	; 0x117c <__fp_splitA+0x10>
    1166:	5f 3f       	cpi	r21, 0xFF	; 255
    1168:	71 f0       	breq	.+28     	; 0x1186 <__fp_splitA+0x1a>
    116a:	47 95       	ror	r20

0000116c <__fp_splitA>:
    116c:	88 0f       	add	r24, r24
    116e:	97 fb       	bst	r25, 7
    1170:	99 1f       	adc	r25, r25
    1172:	61 f0       	breq	.+24     	; 0x118c <__fp_splitA+0x20>
    1174:	9f 3f       	cpi	r25, 0xFF	; 255
    1176:	79 f0       	breq	.+30     	; 0x1196 <__fp_splitA+0x2a>
    1178:	87 95       	ror	r24
    117a:	08 95       	ret
    117c:	12 16       	cp	r1, r18
    117e:	13 06       	cpc	r1, r19
    1180:	14 06       	cpc	r1, r20
    1182:	55 1f       	adc	r21, r21
    1184:	f2 cf       	rjmp	.-28     	; 0x116a <__fp_split3+0xe>
    1186:	46 95       	lsr	r20
    1188:	f1 df       	rcall	.-30     	; 0x116c <__fp_splitA>
    118a:	08 c0       	rjmp	.+16     	; 0x119c <__fp_splitA+0x30>
    118c:	16 16       	cp	r1, r22
    118e:	17 06       	cpc	r1, r23
    1190:	18 06       	cpc	r1, r24
    1192:	99 1f       	adc	r25, r25
    1194:	f1 cf       	rjmp	.-30     	; 0x1178 <__fp_splitA+0xc>
    1196:	86 95       	lsr	r24
    1198:	71 05       	cpc	r23, r1
    119a:	61 05       	cpc	r22, r1
    119c:	08 94       	sec
    119e:	08 95       	ret

000011a0 <__fp_zero>:
    11a0:	e8 94       	clt

000011a2 <__fp_szero>:
    11a2:	bb 27       	eor	r27, r27
    11a4:	66 27       	eor	r22, r22
    11a6:	77 27       	eor	r23, r23
    11a8:	cb 01       	movw	r24, r22
    11aa:	97 f9       	bld	r25, 7
    11ac:	08 95       	ret

000011ae <__mulsf3>:
    11ae:	0b d0       	rcall	.+22     	; 0x11c6 <__mulsf3x>
    11b0:	c4 cf       	rjmp	.-120    	; 0x113a <__fp_round>
    11b2:	b5 df       	rcall	.-150    	; 0x111e <__fp_pscA>
    11b4:	28 f0       	brcs	.+10     	; 0x11c0 <__mulsf3+0x12>
    11b6:	ba df       	rcall	.-140    	; 0x112c <__fp_pscB>
    11b8:	18 f0       	brcs	.+6      	; 0x11c0 <__mulsf3+0x12>
    11ba:	95 23       	and	r25, r21
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <__mulsf3+0x12>
    11be:	a6 cf       	rjmp	.-180    	; 0x110c <__fp_inf>
    11c0:	ab cf       	rjmp	.-170    	; 0x1118 <__fp_nan>
    11c2:	11 24       	eor	r1, r1
    11c4:	ee cf       	rjmp	.-36     	; 0x11a2 <__fp_szero>

000011c6 <__mulsf3x>:
    11c6:	ca df       	rcall	.-108    	; 0x115c <__fp_split3>
    11c8:	a0 f3       	brcs	.-24     	; 0x11b2 <__mulsf3+0x4>

000011ca <__mulsf3_pse>:
    11ca:	95 9f       	mul	r25, r21
    11cc:	d1 f3       	breq	.-12     	; 0x11c2 <__mulsf3+0x14>
    11ce:	95 0f       	add	r25, r21
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	55 1f       	adc	r21, r21
    11d4:	62 9f       	mul	r22, r18
    11d6:	f0 01       	movw	r30, r0
    11d8:	72 9f       	mul	r23, r18
    11da:	bb 27       	eor	r27, r27
    11dc:	f0 0d       	add	r31, r0
    11de:	b1 1d       	adc	r27, r1
    11e0:	63 9f       	mul	r22, r19
    11e2:	aa 27       	eor	r26, r26
    11e4:	f0 0d       	add	r31, r0
    11e6:	b1 1d       	adc	r27, r1
    11e8:	aa 1f       	adc	r26, r26
    11ea:	64 9f       	mul	r22, r20
    11ec:	66 27       	eor	r22, r22
    11ee:	b0 0d       	add	r27, r0
    11f0:	a1 1d       	adc	r26, r1
    11f2:	66 1f       	adc	r22, r22
    11f4:	82 9f       	mul	r24, r18
    11f6:	22 27       	eor	r18, r18
    11f8:	b0 0d       	add	r27, r0
    11fa:	a1 1d       	adc	r26, r1
    11fc:	62 1f       	adc	r22, r18
    11fe:	73 9f       	mul	r23, r19
    1200:	b0 0d       	add	r27, r0
    1202:	a1 1d       	adc	r26, r1
    1204:	62 1f       	adc	r22, r18
    1206:	83 9f       	mul	r24, r19
    1208:	a0 0d       	add	r26, r0
    120a:	61 1d       	adc	r22, r1
    120c:	22 1f       	adc	r18, r18
    120e:	74 9f       	mul	r23, r20
    1210:	33 27       	eor	r19, r19
    1212:	a0 0d       	add	r26, r0
    1214:	61 1d       	adc	r22, r1
    1216:	23 1f       	adc	r18, r19
    1218:	84 9f       	mul	r24, r20
    121a:	60 0d       	add	r22, r0
    121c:	21 1d       	adc	r18, r1
    121e:	82 2f       	mov	r24, r18
    1220:	76 2f       	mov	r23, r22
    1222:	6a 2f       	mov	r22, r26
    1224:	11 24       	eor	r1, r1
    1226:	9f 57       	subi	r25, 0x7F	; 127
    1228:	50 40       	sbci	r21, 0x00	; 0
    122a:	8a f0       	brmi	.+34     	; 0x124e <__mulsf3_pse+0x84>
    122c:	e1 f0       	breq	.+56     	; 0x1266 <__mulsf3_pse+0x9c>
    122e:	88 23       	and	r24, r24
    1230:	4a f0       	brmi	.+18     	; 0x1244 <__mulsf3_pse+0x7a>
    1232:	ee 0f       	add	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	bb 1f       	adc	r27, r27
    1238:	66 1f       	adc	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	91 50       	subi	r25, 0x01	; 1
    1240:	50 40       	sbci	r21, 0x00	; 0
    1242:	a9 f7       	brne	.-22     	; 0x122e <__mulsf3_pse+0x64>
    1244:	9e 3f       	cpi	r25, 0xFE	; 254
    1246:	51 05       	cpc	r21, r1
    1248:	70 f0       	brcs	.+28     	; 0x1266 <__mulsf3_pse+0x9c>
    124a:	60 cf       	rjmp	.-320    	; 0x110c <__fp_inf>
    124c:	aa cf       	rjmp	.-172    	; 0x11a2 <__fp_szero>
    124e:	5f 3f       	cpi	r21, 0xFF	; 255
    1250:	ec f3       	brlt	.-6      	; 0x124c <__mulsf3_pse+0x82>
    1252:	98 3e       	cpi	r25, 0xE8	; 232
    1254:	dc f3       	brlt	.-10     	; 0x124c <__mulsf3_pse+0x82>
    1256:	86 95       	lsr	r24
    1258:	77 95       	ror	r23
    125a:	67 95       	ror	r22
    125c:	b7 95       	ror	r27
    125e:	f7 95       	ror	r31
    1260:	e7 95       	ror	r30
    1262:	9f 5f       	subi	r25, 0xFF	; 255
    1264:	c1 f7       	brne	.-16     	; 0x1256 <__mulsf3_pse+0x8c>
    1266:	fe 2b       	or	r31, r30
    1268:	88 0f       	add	r24, r24
    126a:	91 1d       	adc	r25, r1
    126c:	96 95       	lsr	r25
    126e:	87 95       	ror	r24
    1270:	97 f9       	bld	r25, 7
    1272:	08 95       	ret

00001274 <vfprintf>:
    1274:	2f 92       	push	r2
    1276:	3f 92       	push	r3
    1278:	4f 92       	push	r4
    127a:	5f 92       	push	r5
    127c:	6f 92       	push	r6
    127e:	7f 92       	push	r7
    1280:	8f 92       	push	r8
    1282:	9f 92       	push	r9
    1284:	af 92       	push	r10
    1286:	bf 92       	push	r11
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	63 97       	sbiw	r28, 0x13	; 19
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	7c 01       	movw	r14, r24
    12a4:	1b 01       	movw	r2, r22
    12a6:	6a 01       	movw	r12, r20
    12a8:	fc 01       	movw	r30, r24
    12aa:	16 82       	std	Z+6, r1	; 0x06
    12ac:	17 82       	std	Z+7, r1	; 0x07
    12ae:	83 81       	ldd	r24, Z+3	; 0x03
    12b0:	81 ff       	sbrs	r24, 1
    12b2:	49 c3       	rjmp	.+1682   	; 0x1946 <vfprintf+0x6d2>
    12b4:	be 01       	movw	r22, r28
    12b6:	6f 5f       	subi	r22, 0xFF	; 255
    12b8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ba:	4b 01       	movw	r8, r22
    12bc:	f7 01       	movw	r30, r14
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	f1 01       	movw	r30, r2
    12c2:	93 fd       	sbrc	r25, 3
    12c4:	85 91       	lpm	r24, Z+
    12c6:	93 ff       	sbrs	r25, 3
    12c8:	81 91       	ld	r24, Z+
    12ca:	1f 01       	movw	r2, r30
    12cc:	88 23       	and	r24, r24
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <vfprintf+0x5e>
    12d0:	36 c3       	rjmp	.+1644   	; 0x193e <vfprintf+0x6ca>
    12d2:	85 32       	cpi	r24, 0x25	; 37
    12d4:	39 f4       	brne	.+14     	; 0x12e4 <vfprintf+0x70>
    12d6:	93 fd       	sbrc	r25, 3
    12d8:	85 91       	lpm	r24, Z+
    12da:	93 ff       	sbrs	r25, 3
    12dc:	81 91       	ld	r24, Z+
    12de:	1f 01       	movw	r2, r30
    12e0:	85 32       	cpi	r24, 0x25	; 37
    12e2:	31 f4       	brne	.+12     	; 0x12f0 <vfprintf+0x7c>
    12e4:	b7 01       	movw	r22, r14
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	de d4       	rcall	.+2492   	; 0x1ca6 <fputc>
    12ea:	56 01       	movw	r10, r12
    12ec:	65 01       	movw	r12, r10
    12ee:	e6 cf       	rjmp	.-52     	; 0x12bc <vfprintf+0x48>
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	51 2c       	mov	r5, r1
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	20 32       	cpi	r18, 0x20	; 32
    12f8:	a0 f4       	brcc	.+40     	; 0x1322 <vfprintf+0xae>
    12fa:	8b 32       	cpi	r24, 0x2B	; 43
    12fc:	69 f0       	breq	.+26     	; 0x1318 <vfprintf+0xa4>
    12fe:	30 f4       	brcc	.+12     	; 0x130c <vfprintf+0x98>
    1300:	80 32       	cpi	r24, 0x20	; 32
    1302:	59 f0       	breq	.+22     	; 0x131a <vfprintf+0xa6>
    1304:	83 32       	cpi	r24, 0x23	; 35
    1306:	69 f4       	brne	.+26     	; 0x1322 <vfprintf+0xae>
    1308:	20 61       	ori	r18, 0x10	; 16
    130a:	2c c0       	rjmp	.+88     	; 0x1364 <vfprintf+0xf0>
    130c:	8d 32       	cpi	r24, 0x2D	; 45
    130e:	39 f0       	breq	.+14     	; 0x131e <vfprintf+0xaa>
    1310:	80 33       	cpi	r24, 0x30	; 48
    1312:	39 f4       	brne	.+14     	; 0x1322 <vfprintf+0xae>
    1314:	21 60       	ori	r18, 0x01	; 1
    1316:	26 c0       	rjmp	.+76     	; 0x1364 <vfprintf+0xf0>
    1318:	22 60       	ori	r18, 0x02	; 2
    131a:	24 60       	ori	r18, 0x04	; 4
    131c:	23 c0       	rjmp	.+70     	; 0x1364 <vfprintf+0xf0>
    131e:	28 60       	ori	r18, 0x08	; 8
    1320:	21 c0       	rjmp	.+66     	; 0x1364 <vfprintf+0xf0>
    1322:	27 fd       	sbrc	r18, 7
    1324:	27 c0       	rjmp	.+78     	; 0x1374 <vfprintf+0x100>
    1326:	30 ed       	ldi	r19, 0xD0	; 208
    1328:	38 0f       	add	r19, r24
    132a:	3a 30       	cpi	r19, 0x0A	; 10
    132c:	78 f4       	brcc	.+30     	; 0x134c <vfprintf+0xd8>
    132e:	26 ff       	sbrs	r18, 6
    1330:	06 c0       	rjmp	.+12     	; 0x133e <vfprintf+0xca>
    1332:	fa e0       	ldi	r31, 0x0A	; 10
    1334:	1f 9f       	mul	r17, r31
    1336:	30 0d       	add	r19, r0
    1338:	11 24       	eor	r1, r1
    133a:	13 2f       	mov	r17, r19
    133c:	13 c0       	rjmp	.+38     	; 0x1364 <vfprintf+0xf0>
    133e:	6a e0       	ldi	r22, 0x0A	; 10
    1340:	56 9e       	mul	r5, r22
    1342:	30 0d       	add	r19, r0
    1344:	11 24       	eor	r1, r1
    1346:	53 2e       	mov	r5, r19
    1348:	20 62       	ori	r18, 0x20	; 32
    134a:	0c c0       	rjmp	.+24     	; 0x1364 <vfprintf+0xf0>
    134c:	8e 32       	cpi	r24, 0x2E	; 46
    134e:	21 f4       	brne	.+8      	; 0x1358 <vfprintf+0xe4>
    1350:	26 fd       	sbrc	r18, 6
    1352:	f5 c2       	rjmp	.+1514   	; 0x193e <vfprintf+0x6ca>
    1354:	20 64       	ori	r18, 0x40	; 64
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <vfprintf+0xf0>
    1358:	8c 36       	cpi	r24, 0x6C	; 108
    135a:	11 f4       	brne	.+4      	; 0x1360 <vfprintf+0xec>
    135c:	20 68       	ori	r18, 0x80	; 128
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <vfprintf+0xf0>
    1360:	88 36       	cpi	r24, 0x68	; 104
    1362:	41 f4       	brne	.+16     	; 0x1374 <vfprintf+0x100>
    1364:	f1 01       	movw	r30, r2
    1366:	93 fd       	sbrc	r25, 3
    1368:	85 91       	lpm	r24, Z+
    136a:	93 ff       	sbrs	r25, 3
    136c:	81 91       	ld	r24, Z+
    136e:	1f 01       	movw	r2, r30
    1370:	81 11       	cpse	r24, r1
    1372:	c1 cf       	rjmp	.-126    	; 0x12f6 <vfprintf+0x82>
    1374:	9b eb       	ldi	r25, 0xBB	; 187
    1376:	98 0f       	add	r25, r24
    1378:	93 30       	cpi	r25, 0x03	; 3
    137a:	18 f4       	brcc	.+6      	; 0x1382 <vfprintf+0x10e>
    137c:	20 61       	ori	r18, 0x10	; 16
    137e:	80 5e       	subi	r24, 0xE0	; 224
    1380:	06 c0       	rjmp	.+12     	; 0x138e <vfprintf+0x11a>
    1382:	9b e9       	ldi	r25, 0x9B	; 155
    1384:	98 0f       	add	r25, r24
    1386:	93 30       	cpi	r25, 0x03	; 3
    1388:	08 f0       	brcs	.+2      	; 0x138c <vfprintf+0x118>
    138a:	9a c1       	rjmp	.+820    	; 0x16c0 <vfprintf+0x44c>
    138c:	2f 7e       	andi	r18, 0xEF	; 239
    138e:	26 ff       	sbrs	r18, 6
    1390:	16 e0       	ldi	r17, 0x06	; 6
    1392:	2f 73       	andi	r18, 0x3F	; 63
    1394:	72 2e       	mov	r7, r18
    1396:	85 36       	cpi	r24, 0x65	; 101
    1398:	21 f4       	brne	.+8      	; 0x13a2 <vfprintf+0x12e>
    139a:	f2 2f       	mov	r31, r18
    139c:	f0 64       	ori	r31, 0x40	; 64
    139e:	7f 2e       	mov	r7, r31
    13a0:	08 c0       	rjmp	.+16     	; 0x13b2 <vfprintf+0x13e>
    13a2:	86 36       	cpi	r24, 0x66	; 102
    13a4:	21 f4       	brne	.+8      	; 0x13ae <vfprintf+0x13a>
    13a6:	62 2f       	mov	r22, r18
    13a8:	60 68       	ori	r22, 0x80	; 128
    13aa:	76 2e       	mov	r7, r22
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <vfprintf+0x13e>
    13ae:	11 11       	cpse	r17, r1
    13b0:	11 50       	subi	r17, 0x01	; 1
    13b2:	77 fe       	sbrs	r7, 7
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <vfprintf+0x150>
    13b6:	1c 33       	cpi	r17, 0x3C	; 60
    13b8:	48 f4       	brcc	.+18     	; 0x13cc <vfprintf+0x158>
    13ba:	44 24       	eor	r4, r4
    13bc:	43 94       	inc	r4
    13be:	41 0e       	add	r4, r17
    13c0:	27 e0       	ldi	r18, 0x07	; 7
    13c2:	0b c0       	rjmp	.+22     	; 0x13da <vfprintf+0x166>
    13c4:	18 30       	cpi	r17, 0x08	; 8
    13c6:	30 f4       	brcc	.+12     	; 0x13d4 <vfprintf+0x160>
    13c8:	21 2f       	mov	r18, r17
    13ca:	06 c0       	rjmp	.+12     	; 0x13d8 <vfprintf+0x164>
    13cc:	27 e0       	ldi	r18, 0x07	; 7
    13ce:	4c e3       	ldi	r20, 0x3C	; 60
    13d0:	44 2e       	mov	r4, r20
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <vfprintf+0x166>
    13d4:	27 e0       	ldi	r18, 0x07	; 7
    13d6:	17 e0       	ldi	r17, 0x07	; 7
    13d8:	41 2c       	mov	r4, r1
    13da:	56 01       	movw	r10, r12
    13dc:	74 e0       	ldi	r23, 0x04	; 4
    13de:	a7 0e       	add	r10, r23
    13e0:	b1 1c       	adc	r11, r1
    13e2:	f6 01       	movw	r30, r12
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	04 2d       	mov	r16, r4
    13ee:	a4 01       	movw	r20, r8
    13f0:	e4 d2       	rcall	.+1480   	; 0x19ba <__ftoa_engine>
    13f2:	6c 01       	movw	r12, r24
    13f4:	09 81       	ldd	r16, Y+1	; 0x01
    13f6:	00 ff       	sbrs	r16, 0
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <vfprintf+0x18a>
    13fa:	03 ff       	sbrs	r16, 3
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <vfprintf+0x196>
    13fe:	71 fc       	sbrc	r7, 1
    1400:	07 c0       	rjmp	.+14     	; 0x1410 <vfprintf+0x19c>
    1402:	72 fc       	sbrc	r7, 2
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <vfprintf+0x1a2>
    1406:	61 2c       	mov	r6, r1
    1408:	08 c0       	rjmp	.+16     	; 0x141a <vfprintf+0x1a6>
    140a:	3d e2       	ldi	r19, 0x2D	; 45
    140c:	63 2e       	mov	r6, r19
    140e:	05 c0       	rjmp	.+10     	; 0x141a <vfprintf+0x1a6>
    1410:	2b e2       	ldi	r18, 0x2B	; 43
    1412:	62 2e       	mov	r6, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfprintf+0x1a6>
    1416:	90 e2       	ldi	r25, 0x20	; 32
    1418:	69 2e       	mov	r6, r25
    141a:	80 2f       	mov	r24, r16
    141c:	8c 70       	andi	r24, 0x0C	; 12
    141e:	81 f1       	breq	.+96     	; 0x1480 <vfprintf+0x20c>
    1420:	66 20       	and	r6, r6
    1422:	11 f0       	breq	.+4      	; 0x1428 <vfprintf+0x1b4>
    1424:	84 e0       	ldi	r24, 0x04	; 4
    1426:	01 c0       	rjmp	.+2      	; 0x142a <vfprintf+0x1b6>
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	85 15       	cp	r24, r5
    142c:	10 f0       	brcs	.+4      	; 0x1432 <vfprintf+0x1be>
    142e:	51 2c       	mov	r5, r1
    1430:	0a c0       	rjmp	.+20     	; 0x1446 <vfprintf+0x1d2>
    1432:	58 1a       	sub	r5, r24
    1434:	73 fc       	sbrc	r7, 3
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <vfprintf+0x1d2>
    1438:	b7 01       	movw	r22, r14
    143a:	80 e2       	ldi	r24, 0x20	; 32
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	33 d4       	rcall	.+2150   	; 0x1ca6 <fputc>
    1440:	5a 94       	dec	r5
    1442:	d1 f7       	brne	.-12     	; 0x1438 <vfprintf+0x1c4>
    1444:	f4 cf       	rjmp	.-24     	; 0x142e <vfprintf+0x1ba>
    1446:	66 20       	and	r6, r6
    1448:	21 f0       	breq	.+8      	; 0x1452 <vfprintf+0x1de>
    144a:	b7 01       	movw	r22, r14
    144c:	86 2d       	mov	r24, r6
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	2a d4       	rcall	.+2132   	; 0x1ca6 <fputc>
    1452:	03 fd       	sbrc	r16, 3
    1454:	03 c0       	rjmp	.+6      	; 0x145c <vfprintf+0x1e8>
    1456:	00 e0       	ldi	r16, 0x00	; 0
    1458:	12 e0       	ldi	r17, 0x02	; 2
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <vfprintf+0x1ec>
    145c:	0c ef       	ldi	r16, 0xFC	; 252
    145e:	11 e0       	ldi	r17, 0x01	; 1
    1460:	f7 2d       	mov	r31, r7
    1462:	f0 71       	andi	r31, 0x10	; 16
    1464:	7f 2e       	mov	r7, r31
    1466:	f8 01       	movw	r30, r16
    1468:	84 91       	lpm	r24, Z
    146a:	88 23       	and	r24, r24
    146c:	09 f4       	brne	.+2      	; 0x1470 <vfprintf+0x1fc>
    146e:	5e c2       	rjmp	.+1212   	; 0x192c <vfprintf+0x6b8>
    1470:	71 10       	cpse	r7, r1
    1472:	80 52       	subi	r24, 0x20	; 32
    1474:	b7 01       	movw	r22, r14
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	16 d4       	rcall	.+2092   	; 0x1ca6 <fputc>
    147a:	0f 5f       	subi	r16, 0xFF	; 255
    147c:	1f 4f       	sbci	r17, 0xFF	; 255
    147e:	f3 cf       	rjmp	.-26     	; 0x1466 <vfprintf+0x1f2>
    1480:	77 fe       	sbrs	r7, 7
    1482:	0f c0       	rjmp	.+30     	; 0x14a2 <vfprintf+0x22e>
    1484:	4c 0c       	add	r4, r12
    1486:	04 ff       	sbrs	r16, 4
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <vfprintf+0x21e>
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	81 33       	cpi	r24, 0x31	; 49
    148e:	09 f4       	brne	.+2      	; 0x1492 <vfprintf+0x21e>
    1490:	4a 94       	dec	r4
    1492:	14 14       	cp	r1, r4
    1494:	74 f5       	brge	.+92     	; 0x14f2 <vfprintf+0x27e>
    1496:	f8 e0       	ldi	r31, 0x08	; 8
    1498:	f4 15       	cp	r31, r4
    149a:	78 f5       	brcc	.+94     	; 0x14fa <vfprintf+0x286>
    149c:	88 e0       	ldi	r24, 0x08	; 8
    149e:	48 2e       	mov	r4, r24
    14a0:	2c c0       	rjmp	.+88     	; 0x14fa <vfprintf+0x286>
    14a2:	76 fc       	sbrc	r7, 6
    14a4:	2a c0       	rjmp	.+84     	; 0x14fa <vfprintf+0x286>
    14a6:	81 2f       	mov	r24, r17
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	8c 15       	cp	r24, r12
    14ac:	9d 05       	cpc	r25, r13
    14ae:	9c f0       	brlt	.+38     	; 0x14d6 <vfprintf+0x262>
    14b0:	6c ef       	ldi	r22, 0xFC	; 252
    14b2:	c6 16       	cp	r12, r22
    14b4:	6f ef       	ldi	r22, 0xFF	; 255
    14b6:	d6 06       	cpc	r13, r22
    14b8:	74 f0       	brlt	.+28     	; 0x14d6 <vfprintf+0x262>
    14ba:	77 2d       	mov	r23, r7
    14bc:	70 68       	ori	r23, 0x80	; 128
    14be:	77 2e       	mov	r7, r23
    14c0:	0a c0       	rjmp	.+20     	; 0x14d6 <vfprintf+0x262>
    14c2:	e2 e0       	ldi	r30, 0x02	; 2
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	ec 0f       	add	r30, r28
    14c8:	fd 1f       	adc	r31, r29
    14ca:	e1 0f       	add	r30, r17
    14cc:	f1 1d       	adc	r31, r1
    14ce:	80 81       	ld	r24, Z
    14d0:	80 33       	cpi	r24, 0x30	; 48
    14d2:	19 f4       	brne	.+6      	; 0x14da <vfprintf+0x266>
    14d4:	11 50       	subi	r17, 0x01	; 1
    14d6:	11 11       	cpse	r17, r1
    14d8:	f4 cf       	rjmp	.-24     	; 0x14c2 <vfprintf+0x24e>
    14da:	77 fe       	sbrs	r7, 7
    14dc:	0e c0       	rjmp	.+28     	; 0x14fa <vfprintf+0x286>
    14de:	44 24       	eor	r4, r4
    14e0:	43 94       	inc	r4
    14e2:	41 0e       	add	r4, r17
    14e4:	81 2f       	mov	r24, r17
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	c8 16       	cp	r12, r24
    14ea:	d9 06       	cpc	r13, r25
    14ec:	2c f4       	brge	.+10     	; 0x14f8 <vfprintf+0x284>
    14ee:	1c 19       	sub	r17, r12
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <vfprintf+0x286>
    14f2:	44 24       	eor	r4, r4
    14f4:	43 94       	inc	r4
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <vfprintf+0x286>
    14f8:	10 e0       	ldi	r17, 0x00	; 0
    14fa:	77 fe       	sbrs	r7, 7
    14fc:	07 c0       	rjmp	.+14     	; 0x150c <vfprintf+0x298>
    14fe:	1c 14       	cp	r1, r12
    1500:	1d 04       	cpc	r1, r13
    1502:	3c f4       	brge	.+14     	; 0x1512 <vfprintf+0x29e>
    1504:	96 01       	movw	r18, r12
    1506:	2f 5f       	subi	r18, 0xFF	; 255
    1508:	3f 4f       	sbci	r19, 0xFF	; 255
    150a:	05 c0       	rjmp	.+10     	; 0x1516 <vfprintf+0x2a2>
    150c:	25 e0       	ldi	r18, 0x05	; 5
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <vfprintf+0x2a2>
    1512:	21 e0       	ldi	r18, 0x01	; 1
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	66 20       	and	r6, r6
    1518:	11 f0       	breq	.+4      	; 0x151e <vfprintf+0x2aa>
    151a:	2f 5f       	subi	r18, 0xFF	; 255
    151c:	3f 4f       	sbci	r19, 0xFF	; 255
    151e:	11 23       	and	r17, r17
    1520:	31 f0       	breq	.+12     	; 0x152e <vfprintf+0x2ba>
    1522:	41 2f       	mov	r20, r17
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	4f 5f       	subi	r20, 0xFF	; 255
    1528:	5f 4f       	sbci	r21, 0xFF	; 255
    152a:	24 0f       	add	r18, r20
    152c:	35 1f       	adc	r19, r21
    152e:	45 2d       	mov	r20, r5
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	24 17       	cp	r18, r20
    1534:	35 07       	cpc	r19, r21
    1536:	14 f4       	brge	.+4      	; 0x153c <vfprintf+0x2c8>
    1538:	52 1a       	sub	r5, r18
    153a:	01 c0       	rjmp	.+2      	; 0x153e <vfprintf+0x2ca>
    153c:	51 2c       	mov	r5, r1
    153e:	87 2d       	mov	r24, r7
    1540:	89 70       	andi	r24, 0x09	; 9
    1542:	41 f4       	brne	.+16     	; 0x1554 <vfprintf+0x2e0>
    1544:	55 20       	and	r5, r5
    1546:	31 f0       	breq	.+12     	; 0x1554 <vfprintf+0x2e0>
    1548:	b7 01       	movw	r22, r14
    154a:	80 e2       	ldi	r24, 0x20	; 32
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	ab d3       	rcall	.+1878   	; 0x1ca6 <fputc>
    1550:	5a 94       	dec	r5
    1552:	f8 cf       	rjmp	.-16     	; 0x1544 <vfprintf+0x2d0>
    1554:	66 20       	and	r6, r6
    1556:	21 f0       	breq	.+8      	; 0x1560 <vfprintf+0x2ec>
    1558:	b7 01       	movw	r22, r14
    155a:	86 2d       	mov	r24, r6
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a3 d3       	rcall	.+1862   	; 0x1ca6 <fputc>
    1560:	73 fc       	sbrc	r7, 3
    1562:	08 c0       	rjmp	.+16     	; 0x1574 <vfprintf+0x300>
    1564:	55 20       	and	r5, r5
    1566:	31 f0       	breq	.+12     	; 0x1574 <vfprintf+0x300>
    1568:	b7 01       	movw	r22, r14
    156a:	80 e3       	ldi	r24, 0x30	; 48
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9b d3       	rcall	.+1846   	; 0x1ca6 <fputc>
    1570:	5a 94       	dec	r5
    1572:	f8 cf       	rjmp	.-16     	; 0x1564 <vfprintf+0x2f0>
    1574:	77 fe       	sbrs	r7, 7
    1576:	5d c0       	rjmp	.+186    	; 0x1632 <vfprintf+0x3be>
    1578:	9c 2d       	mov	r25, r12
    157a:	8d 2d       	mov	r24, r13
    157c:	d7 fe       	sbrs	r13, 7
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <vfprintf+0x310>
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	69 2e       	mov	r6, r25
    1586:	78 2e       	mov	r7, r24
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	c6 01       	movw	r24, r12
    158e:	84 19       	sub	r24, r4
    1590:	91 09       	sbc	r25, r1
    1592:	8c 87       	std	Y+12, r24	; 0x0c
    1594:	9d 87       	std	Y+13, r25	; 0x0d
    1596:	96 01       	movw	r18, r12
    1598:	26 19       	sub	r18, r6
    159a:	37 09       	sbc	r19, r7
    159c:	28 0d       	add	r18, r8
    159e:	39 1d       	adc	r19, r9
    15a0:	81 2f       	mov	r24, r17
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	ee 27       	eor	r30, r30
    15a6:	ff 27       	eor	r31, r31
    15a8:	e8 1b       	sub	r30, r24
    15aa:	f9 0b       	sbc	r31, r25
    15ac:	ee 87       	std	Y+14, r30	; 0x0e
    15ae:	ff 87       	std	Y+15, r31	; 0x0f
    15b0:	ff ef       	ldi	r31, 0xFF	; 255
    15b2:	6f 16       	cp	r6, r31
    15b4:	7f 06       	cpc	r7, r31
    15b6:	61 f4       	brne	.+24     	; 0x15d0 <vfprintf+0x35c>
    15b8:	b7 01       	movw	r22, r14
    15ba:	8e e2       	ldi	r24, 0x2E	; 46
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	2b 8b       	std	Y+19, r18	; 0x13
    15c0:	3a 8b       	std	Y+18, r19	; 0x12
    15c2:	48 8b       	std	Y+16, r20	; 0x10
    15c4:	59 8b       	std	Y+17, r21	; 0x11
    15c6:	6f d3       	rcall	.+1758   	; 0x1ca6 <fputc>
    15c8:	59 89       	ldd	r21, Y+17	; 0x11
    15ca:	48 89       	ldd	r20, Y+16	; 0x10
    15cc:	3a 89       	ldd	r19, Y+18	; 0x12
    15ce:	2b 89       	ldd	r18, Y+19	; 0x13
    15d0:	c6 14       	cp	r12, r6
    15d2:	d7 04       	cpc	r13, r7
    15d4:	54 f0       	brlt	.+20     	; 0x15ea <vfprintf+0x376>
    15d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    15d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    15da:	66 15       	cp	r22, r6
    15dc:	77 05       	cpc	r23, r7
    15de:	2c f4       	brge	.+10     	; 0x15ea <vfprintf+0x376>
    15e0:	f9 01       	movw	r30, r18
    15e2:	e4 0f       	add	r30, r20
    15e4:	f5 1f       	adc	r31, r21
    15e6:	81 81       	ldd	r24, Z+1	; 0x01
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <vfprintf+0x378>
    15ea:	80 e3       	ldi	r24, 0x30	; 48
    15ec:	71 e0       	ldi	r23, 0x01	; 1
    15ee:	67 1a       	sub	r6, r23
    15f0:	71 08       	sbc	r7, r1
    15f2:	4f 5f       	subi	r20, 0xFF	; 255
    15f4:	5f 4f       	sbci	r21, 0xFF	; 255
    15f6:	ee 85       	ldd	r30, Y+14	; 0x0e
    15f8:	ff 85       	ldd	r31, Y+15	; 0x0f
    15fa:	6e 16       	cp	r6, r30
    15fc:	7f 06       	cpc	r7, r31
    15fe:	64 f0       	brlt	.+24     	; 0x1618 <vfprintf+0x3a4>
    1600:	b7 01       	movw	r22, r14
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	2b 8b       	std	Y+19, r18	; 0x13
    1606:	3a 8b       	std	Y+18, r19	; 0x12
    1608:	48 8b       	std	Y+16, r20	; 0x10
    160a:	59 8b       	std	Y+17, r21	; 0x11
    160c:	4c d3       	rcall	.+1688   	; 0x1ca6 <fputc>
    160e:	2b 89       	ldd	r18, Y+19	; 0x13
    1610:	3a 89       	ldd	r19, Y+18	; 0x12
    1612:	48 89       	ldd	r20, Y+16	; 0x10
    1614:	59 89       	ldd	r21, Y+17	; 0x11
    1616:	cc cf       	rjmp	.-104    	; 0x15b0 <vfprintf+0x33c>
    1618:	6c 14       	cp	r6, r12
    161a:	7d 04       	cpc	r7, r13
    161c:	39 f4       	brne	.+14     	; 0x162c <vfprintf+0x3b8>
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	96 33       	cpi	r25, 0x36	; 54
    1622:	18 f4       	brcc	.+6      	; 0x162a <vfprintf+0x3b6>
    1624:	95 33       	cpi	r25, 0x35	; 53
    1626:	11 f4       	brne	.+4      	; 0x162c <vfprintf+0x3b8>
    1628:	04 ff       	sbrs	r16, 4
    162a:	81 e3       	ldi	r24, 0x31	; 49
    162c:	b7 01       	movw	r22, r14
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	45 c0       	rjmp	.+138    	; 0x16bc <vfprintf+0x448>
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	81 33       	cpi	r24, 0x31	; 49
    1636:	09 f0       	breq	.+2      	; 0x163a <vfprintf+0x3c6>
    1638:	0f 7e       	andi	r16, 0xEF	; 239
    163a:	b7 01       	movw	r22, r14
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	33 d3       	rcall	.+1638   	; 0x1ca6 <fputc>
    1640:	11 11       	cpse	r17, r1
    1642:	05 c0       	rjmp	.+10     	; 0x164e <vfprintf+0x3da>
    1644:	74 fe       	sbrs	r7, 4
    1646:	16 c0       	rjmp	.+44     	; 0x1674 <vfprintf+0x400>
    1648:	85 e4       	ldi	r24, 0x45	; 69
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	15 c0       	rjmp	.+42     	; 0x1678 <vfprintf+0x404>
    164e:	b7 01       	movw	r22, r14
    1650:	8e e2       	ldi	r24, 0x2E	; 46
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	28 d3       	rcall	.+1616   	; 0x1ca6 <fputc>
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	66 24       	eor	r6, r6
    165a:	63 94       	inc	r6
    165c:	68 0e       	add	r6, r24
    165e:	f4 01       	movw	r30, r8
    1660:	e8 0f       	add	r30, r24
    1662:	f1 1d       	adc	r31, r1
    1664:	80 81       	ld	r24, Z
    1666:	b7 01       	movw	r22, r14
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	1d d3       	rcall	.+1594   	; 0x1ca6 <fputc>
    166c:	11 50       	subi	r17, 0x01	; 1
    166e:	51 f3       	breq	.-44     	; 0x1644 <vfprintf+0x3d0>
    1670:	86 2d       	mov	r24, r6
    1672:	f2 cf       	rjmp	.-28     	; 0x1658 <vfprintf+0x3e4>
    1674:	85 e6       	ldi	r24, 0x65	; 101
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	b7 01       	movw	r22, r14
    167a:	15 d3       	rcall	.+1578   	; 0x1ca6 <fputc>
    167c:	d7 fc       	sbrc	r13, 7
    167e:	05 c0       	rjmp	.+10     	; 0x168a <vfprintf+0x416>
    1680:	c1 14       	cp	r12, r1
    1682:	d1 04       	cpc	r13, r1
    1684:	39 f4       	brne	.+14     	; 0x1694 <vfprintf+0x420>
    1686:	04 ff       	sbrs	r16, 4
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <vfprintf+0x420>
    168a:	d1 94       	neg	r13
    168c:	c1 94       	neg	r12
    168e:	d1 08       	sbc	r13, r1
    1690:	8d e2       	ldi	r24, 0x2D	; 45
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <vfprintf+0x422>
    1694:	8b e2       	ldi	r24, 0x2B	; 43
    1696:	b7 01       	movw	r22, r14
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	05 d3       	rcall	.+1546   	; 0x1ca6 <fputc>
    169c:	80 e3       	ldi	r24, 0x30	; 48
    169e:	6a e0       	ldi	r22, 0x0A	; 10
    16a0:	c6 16       	cp	r12, r22
    16a2:	d1 04       	cpc	r13, r1
    16a4:	2c f0       	brlt	.+10     	; 0x16b0 <vfprintf+0x43c>
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	fa e0       	ldi	r31, 0x0A	; 10
    16aa:	cf 1a       	sub	r12, r31
    16ac:	d1 08       	sbc	r13, r1
    16ae:	f7 cf       	rjmp	.-18     	; 0x169e <vfprintf+0x42a>
    16b0:	b7 01       	movw	r22, r14
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	f8 d2       	rcall	.+1520   	; 0x1ca6 <fputc>
    16b6:	b7 01       	movw	r22, r14
    16b8:	c6 01       	movw	r24, r12
    16ba:	c0 96       	adiw	r24, 0x30	; 48
    16bc:	f4 d2       	rcall	.+1512   	; 0x1ca6 <fputc>
    16be:	36 c1       	rjmp	.+620    	; 0x192c <vfprintf+0x6b8>
    16c0:	83 36       	cpi	r24, 0x63	; 99
    16c2:	31 f0       	breq	.+12     	; 0x16d0 <vfprintf+0x45c>
    16c4:	83 37       	cpi	r24, 0x73	; 115
    16c6:	79 f0       	breq	.+30     	; 0x16e6 <vfprintf+0x472>
    16c8:	83 35       	cpi	r24, 0x53	; 83
    16ca:	09 f0       	breq	.+2      	; 0x16ce <vfprintf+0x45a>
    16cc:	54 c0       	rjmp	.+168    	; 0x1776 <vfprintf+0x502>
    16ce:	20 c0       	rjmp	.+64     	; 0x1710 <vfprintf+0x49c>
    16d0:	56 01       	movw	r10, r12
    16d2:	72 e0       	ldi	r23, 0x02	; 2
    16d4:	a7 0e       	add	r10, r23
    16d6:	b1 1c       	adc	r11, r1
    16d8:	f6 01       	movw	r30, r12
    16da:	80 81       	ld	r24, Z
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	01 e0       	ldi	r16, 0x01	; 1
    16e0:	10 e0       	ldi	r17, 0x00	; 0
    16e2:	64 01       	movw	r12, r8
    16e4:	13 c0       	rjmp	.+38     	; 0x170c <vfprintf+0x498>
    16e6:	56 01       	movw	r10, r12
    16e8:	f2 e0       	ldi	r31, 0x02	; 2
    16ea:	af 0e       	add	r10, r31
    16ec:	b1 1c       	adc	r11, r1
    16ee:	f6 01       	movw	r30, r12
    16f0:	c0 80       	ld	r12, Z
    16f2:	d1 80       	ldd	r13, Z+1	; 0x01
    16f4:	26 ff       	sbrs	r18, 6
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <vfprintf+0x48a>
    16f8:	61 2f       	mov	r22, r17
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <vfprintf+0x48e>
    16fe:	6f ef       	ldi	r22, 0xFF	; 255
    1700:	7f ef       	ldi	r23, 0xFF	; 255
    1702:	c6 01       	movw	r24, r12
    1704:	2b 8b       	std	Y+19, r18	; 0x13
    1706:	3c d2       	rcall	.+1144   	; 0x1b80 <strnlen>
    1708:	8c 01       	movw	r16, r24
    170a:	2b 89       	ldd	r18, Y+19	; 0x13
    170c:	2f 77       	andi	r18, 0x7F	; 127
    170e:	14 c0       	rjmp	.+40     	; 0x1738 <vfprintf+0x4c4>
    1710:	56 01       	movw	r10, r12
    1712:	f2 e0       	ldi	r31, 0x02	; 2
    1714:	af 0e       	add	r10, r31
    1716:	b1 1c       	adc	r11, r1
    1718:	f6 01       	movw	r30, r12
    171a:	c0 80       	ld	r12, Z
    171c:	d1 80       	ldd	r13, Z+1	; 0x01
    171e:	26 ff       	sbrs	r18, 6
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <vfprintf+0x4b4>
    1722:	61 2f       	mov	r22, r17
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <vfprintf+0x4b8>
    1728:	6f ef       	ldi	r22, 0xFF	; 255
    172a:	7f ef       	ldi	r23, 0xFF	; 255
    172c:	c6 01       	movw	r24, r12
    172e:	2b 8b       	std	Y+19, r18	; 0x13
    1730:	1c d2       	rcall	.+1080   	; 0x1b6a <strnlen_P>
    1732:	8c 01       	movw	r16, r24
    1734:	2b 89       	ldd	r18, Y+19	; 0x13
    1736:	20 68       	ori	r18, 0x80	; 128
    1738:	72 2e       	mov	r7, r18
    173a:	23 fd       	sbrc	r18, 3
    173c:	18 c0       	rjmp	.+48     	; 0x176e <vfprintf+0x4fa>
    173e:	85 2d       	mov	r24, r5
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	08 17       	cp	r16, r24
    1744:	19 07       	cpc	r17, r25
    1746:	98 f4       	brcc	.+38     	; 0x176e <vfprintf+0x4fa>
    1748:	b7 01       	movw	r22, r14
    174a:	80 e2       	ldi	r24, 0x20	; 32
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	ab d2       	rcall	.+1366   	; 0x1ca6 <fputc>
    1750:	5a 94       	dec	r5
    1752:	f5 cf       	rjmp	.-22     	; 0x173e <vfprintf+0x4ca>
    1754:	f6 01       	movw	r30, r12
    1756:	77 fc       	sbrc	r7, 7
    1758:	85 91       	lpm	r24, Z+
    175a:	77 fe       	sbrs	r7, 7
    175c:	81 91       	ld	r24, Z+
    175e:	6f 01       	movw	r12, r30
    1760:	b7 01       	movw	r22, r14
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 d2       	rcall	.+1344   	; 0x1ca6 <fputc>
    1766:	51 10       	cpse	r5, r1
    1768:	5a 94       	dec	r5
    176a:	01 50       	subi	r16, 0x01	; 1
    176c:	11 09       	sbc	r17, r1
    176e:	01 15       	cp	r16, r1
    1770:	11 05       	cpc	r17, r1
    1772:	81 f7       	brne	.-32     	; 0x1754 <vfprintf+0x4e0>
    1774:	db c0       	rjmp	.+438    	; 0x192c <vfprintf+0x6b8>
    1776:	84 36       	cpi	r24, 0x64	; 100
    1778:	11 f0       	breq	.+4      	; 0x177e <vfprintf+0x50a>
    177a:	89 36       	cpi	r24, 0x69	; 105
    177c:	49 f5       	brne	.+82     	; 0x17d0 <vfprintf+0x55c>
    177e:	56 01       	movw	r10, r12
    1780:	27 ff       	sbrs	r18, 7
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <vfprintf+0x522>
    1784:	f4 e0       	ldi	r31, 0x04	; 4
    1786:	af 0e       	add	r10, r31
    1788:	b1 1c       	adc	r11, r1
    178a:	f6 01       	movw	r30, r12
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	0a c0       	rjmp	.+20     	; 0x17aa <vfprintf+0x536>
    1796:	f2 e0       	ldi	r31, 0x02	; 2
    1798:	af 0e       	add	r10, r31
    179a:	b1 1c       	adc	r11, r1
    179c:	f6 01       	movw	r30, r12
    179e:	60 81       	ld	r22, Z
    17a0:	71 81       	ldd	r23, Z+1	; 0x01
    17a2:	88 27       	eor	r24, r24
    17a4:	77 fd       	sbrc	r23, 7
    17a6:	80 95       	com	r24
    17a8:	98 2f       	mov	r25, r24
    17aa:	02 2f       	mov	r16, r18
    17ac:	0f 76       	andi	r16, 0x6F	; 111
    17ae:	97 ff       	sbrs	r25, 7
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <vfprintf+0x54e>
    17b2:	90 95       	com	r25
    17b4:	80 95       	com	r24
    17b6:	70 95       	com	r23
    17b8:	61 95       	neg	r22
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	00 68       	ori	r16, 0x80	; 128
    17c2:	2a e0       	ldi	r18, 0x0A	; 10
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	a4 01       	movw	r20, r8
    17c8:	de d2       	rcall	.+1468   	; 0x1d86 <__ultoa_invert>
    17ca:	c8 2e       	mov	r12, r24
    17cc:	c8 18       	sub	r12, r8
    17ce:	3d c0       	rjmp	.+122    	; 0x184a <vfprintf+0x5d6>
    17d0:	02 2f       	mov	r16, r18
    17d2:	85 37       	cpi	r24, 0x75	; 117
    17d4:	21 f4       	brne	.+8      	; 0x17de <vfprintf+0x56a>
    17d6:	0f 7e       	andi	r16, 0xEF	; 239
    17d8:	2a e0       	ldi	r18, 0x0A	; 10
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	1d c0       	rjmp	.+58     	; 0x1818 <vfprintf+0x5a4>
    17de:	09 7f       	andi	r16, 0xF9	; 249
    17e0:	8f 36       	cpi	r24, 0x6F	; 111
    17e2:	91 f0       	breq	.+36     	; 0x1808 <vfprintf+0x594>
    17e4:	18 f4       	brcc	.+6      	; 0x17ec <vfprintf+0x578>
    17e6:	88 35       	cpi	r24, 0x58	; 88
    17e8:	59 f0       	breq	.+22     	; 0x1800 <vfprintf+0x58c>
    17ea:	a9 c0       	rjmp	.+338    	; 0x193e <vfprintf+0x6ca>
    17ec:	80 37       	cpi	r24, 0x70	; 112
    17ee:	19 f0       	breq	.+6      	; 0x17f6 <vfprintf+0x582>
    17f0:	88 37       	cpi	r24, 0x78	; 120
    17f2:	11 f0       	breq	.+4      	; 0x17f8 <vfprintf+0x584>
    17f4:	a4 c0       	rjmp	.+328    	; 0x193e <vfprintf+0x6ca>
    17f6:	00 61       	ori	r16, 0x10	; 16
    17f8:	04 ff       	sbrs	r16, 4
    17fa:	09 c0       	rjmp	.+18     	; 0x180e <vfprintf+0x59a>
    17fc:	04 60       	ori	r16, 0x04	; 4
    17fe:	07 c0       	rjmp	.+14     	; 0x180e <vfprintf+0x59a>
    1800:	24 ff       	sbrs	r18, 4
    1802:	08 c0       	rjmp	.+16     	; 0x1814 <vfprintf+0x5a0>
    1804:	06 60       	ori	r16, 0x06	; 6
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <vfprintf+0x5a0>
    1808:	28 e0       	ldi	r18, 0x08	; 8
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <vfprintf+0x5a4>
    180e:	20 e1       	ldi	r18, 0x10	; 16
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x5a4>
    1814:	20 e1       	ldi	r18, 0x10	; 16
    1816:	32 e0       	ldi	r19, 0x02	; 2
    1818:	56 01       	movw	r10, r12
    181a:	07 ff       	sbrs	r16, 7
    181c:	09 c0       	rjmp	.+18     	; 0x1830 <vfprintf+0x5bc>
    181e:	f4 e0       	ldi	r31, 0x04	; 4
    1820:	af 0e       	add	r10, r31
    1822:	b1 1c       	adc	r11, r1
    1824:	f6 01       	movw	r30, r12
    1826:	60 81       	ld	r22, Z
    1828:	71 81       	ldd	r23, Z+1	; 0x01
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	93 81       	ldd	r25, Z+3	; 0x03
    182e:	08 c0       	rjmp	.+16     	; 0x1840 <vfprintf+0x5cc>
    1830:	f2 e0       	ldi	r31, 0x02	; 2
    1832:	af 0e       	add	r10, r31
    1834:	b1 1c       	adc	r11, r1
    1836:	f6 01       	movw	r30, r12
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a4 01       	movw	r20, r8
    1842:	a1 d2       	rcall	.+1346   	; 0x1d86 <__ultoa_invert>
    1844:	c8 2e       	mov	r12, r24
    1846:	c8 18       	sub	r12, r8
    1848:	0f 77       	andi	r16, 0x7F	; 127
    184a:	06 ff       	sbrs	r16, 6
    184c:	0b c0       	rjmp	.+22     	; 0x1864 <vfprintf+0x5f0>
    184e:	20 2f       	mov	r18, r16
    1850:	2e 7f       	andi	r18, 0xFE	; 254
    1852:	c1 16       	cp	r12, r17
    1854:	50 f4       	brcc	.+20     	; 0x186a <vfprintf+0x5f6>
    1856:	04 ff       	sbrs	r16, 4
    1858:	0a c0       	rjmp	.+20     	; 0x186e <vfprintf+0x5fa>
    185a:	02 fd       	sbrc	r16, 2
    185c:	08 c0       	rjmp	.+16     	; 0x186e <vfprintf+0x5fa>
    185e:	20 2f       	mov	r18, r16
    1860:	2e 7e       	andi	r18, 0xEE	; 238
    1862:	05 c0       	rjmp	.+10     	; 0x186e <vfprintf+0x5fa>
    1864:	dc 2c       	mov	r13, r12
    1866:	20 2f       	mov	r18, r16
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <vfprintf+0x5fc>
    186a:	dc 2c       	mov	r13, r12
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <vfprintf+0x5fc>
    186e:	d1 2e       	mov	r13, r17
    1870:	24 ff       	sbrs	r18, 4
    1872:	0d c0       	rjmp	.+26     	; 0x188e <vfprintf+0x61a>
    1874:	fe 01       	movw	r30, r28
    1876:	ec 0d       	add	r30, r12
    1878:	f1 1d       	adc	r31, r1
    187a:	80 81       	ld	r24, Z
    187c:	80 33       	cpi	r24, 0x30	; 48
    187e:	11 f4       	brne	.+4      	; 0x1884 <vfprintf+0x610>
    1880:	29 7e       	andi	r18, 0xE9	; 233
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <vfprintf+0x622>
    1884:	22 ff       	sbrs	r18, 2
    1886:	06 c0       	rjmp	.+12     	; 0x1894 <vfprintf+0x620>
    1888:	d3 94       	inc	r13
    188a:	d3 94       	inc	r13
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <vfprintf+0x622>
    188e:	82 2f       	mov	r24, r18
    1890:	86 78       	andi	r24, 0x86	; 134
    1892:	09 f0       	breq	.+2      	; 0x1896 <vfprintf+0x622>
    1894:	d3 94       	inc	r13
    1896:	23 fd       	sbrc	r18, 3
    1898:	12 c0       	rjmp	.+36     	; 0x18be <vfprintf+0x64a>
    189a:	20 ff       	sbrs	r18, 0
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <vfprintf+0x636>
    189e:	1c 2d       	mov	r17, r12
    18a0:	d5 14       	cp	r13, r5
    18a2:	18 f4       	brcc	.+6      	; 0x18aa <vfprintf+0x636>
    18a4:	15 0d       	add	r17, r5
    18a6:	1d 19       	sub	r17, r13
    18a8:	d5 2c       	mov	r13, r5
    18aa:	d5 14       	cp	r13, r5
    18ac:	60 f4       	brcc	.+24     	; 0x18c6 <vfprintf+0x652>
    18ae:	b7 01       	movw	r22, r14
    18b0:	80 e2       	ldi	r24, 0x20	; 32
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	2b 8b       	std	Y+19, r18	; 0x13
    18b6:	f7 d1       	rcall	.+1006   	; 0x1ca6 <fputc>
    18b8:	d3 94       	inc	r13
    18ba:	2b 89       	ldd	r18, Y+19	; 0x13
    18bc:	f6 cf       	rjmp	.-20     	; 0x18aa <vfprintf+0x636>
    18be:	d5 14       	cp	r13, r5
    18c0:	10 f4       	brcc	.+4      	; 0x18c6 <vfprintf+0x652>
    18c2:	5d 18       	sub	r5, r13
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <vfprintf+0x654>
    18c6:	51 2c       	mov	r5, r1
    18c8:	24 ff       	sbrs	r18, 4
    18ca:	11 c0       	rjmp	.+34     	; 0x18ee <vfprintf+0x67a>
    18cc:	b7 01       	movw	r22, r14
    18ce:	80 e3       	ldi	r24, 0x30	; 48
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	2b 8b       	std	Y+19, r18	; 0x13
    18d4:	e8 d1       	rcall	.+976    	; 0x1ca6 <fputc>
    18d6:	2b 89       	ldd	r18, Y+19	; 0x13
    18d8:	22 ff       	sbrs	r18, 2
    18da:	16 c0       	rjmp	.+44     	; 0x1908 <vfprintf+0x694>
    18dc:	21 ff       	sbrs	r18, 1
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <vfprintf+0x672>
    18e0:	88 e5       	ldi	r24, 0x58	; 88
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <vfprintf+0x676>
    18e6:	88 e7       	ldi	r24, 0x78	; 120
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	b7 01       	movw	r22, r14
    18ec:	0c c0       	rjmp	.+24     	; 0x1906 <vfprintf+0x692>
    18ee:	82 2f       	mov	r24, r18
    18f0:	86 78       	andi	r24, 0x86	; 134
    18f2:	51 f0       	breq	.+20     	; 0x1908 <vfprintf+0x694>
    18f4:	21 fd       	sbrc	r18, 1
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <vfprintf+0x688>
    18f8:	80 e2       	ldi	r24, 0x20	; 32
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <vfprintf+0x68a>
    18fc:	8b e2       	ldi	r24, 0x2B	; 43
    18fe:	27 fd       	sbrc	r18, 7
    1900:	8d e2       	ldi	r24, 0x2D	; 45
    1902:	b7 01       	movw	r22, r14
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	cf d1       	rcall	.+926    	; 0x1ca6 <fputc>
    1908:	c1 16       	cp	r12, r17
    190a:	30 f4       	brcc	.+12     	; 0x1918 <vfprintf+0x6a4>
    190c:	b7 01       	movw	r22, r14
    190e:	80 e3       	ldi	r24, 0x30	; 48
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	c9 d1       	rcall	.+914    	; 0x1ca6 <fputc>
    1914:	11 50       	subi	r17, 0x01	; 1
    1916:	f8 cf       	rjmp	.-16     	; 0x1908 <vfprintf+0x694>
    1918:	ca 94       	dec	r12
    191a:	f4 01       	movw	r30, r8
    191c:	ec 0d       	add	r30, r12
    191e:	f1 1d       	adc	r31, r1
    1920:	80 81       	ld	r24, Z
    1922:	b7 01       	movw	r22, r14
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	bf d1       	rcall	.+894    	; 0x1ca6 <fputc>
    1928:	c1 10       	cpse	r12, r1
    192a:	f6 cf       	rjmp	.-20     	; 0x1918 <vfprintf+0x6a4>
    192c:	55 20       	and	r5, r5
    192e:	09 f4       	brne	.+2      	; 0x1932 <vfprintf+0x6be>
    1930:	dd cc       	rjmp	.-1606   	; 0x12ec <vfprintf+0x78>
    1932:	b7 01       	movw	r22, r14
    1934:	80 e2       	ldi	r24, 0x20	; 32
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	b6 d1       	rcall	.+876    	; 0x1ca6 <fputc>
    193a:	5a 94       	dec	r5
    193c:	f7 cf       	rjmp	.-18     	; 0x192c <vfprintf+0x6b8>
    193e:	f7 01       	movw	r30, r14
    1940:	86 81       	ldd	r24, Z+6	; 0x06
    1942:	97 81       	ldd	r25, Z+7	; 0x07
    1944:	02 c0       	rjmp	.+4      	; 0x194a <vfprintf+0x6d6>
    1946:	8f ef       	ldi	r24, 0xFF	; 255
    1948:	9f ef       	ldi	r25, 0xFF	; 255
    194a:	63 96       	adiw	r28, 0x13	; 19
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	bf 90       	pop	r11
    1962:	af 90       	pop	r10
    1964:	9f 90       	pop	r9
    1966:	8f 90       	pop	r8
    1968:	7f 90       	pop	r7
    196a:	6f 90       	pop	r6
    196c:	5f 90       	pop	r5
    196e:	4f 90       	pop	r4
    1970:	3f 90       	pop	r3
    1972:	2f 90       	pop	r2
    1974:	08 95       	ret

00001976 <__udivmodsi4>:
    1976:	a1 e2       	ldi	r26, 0x21	; 33
    1978:	1a 2e       	mov	r1, r26
    197a:	aa 1b       	sub	r26, r26
    197c:	bb 1b       	sub	r27, r27
    197e:	fd 01       	movw	r30, r26
    1980:	0d c0       	rjmp	.+26     	; 0x199c <__udivmodsi4_ep>

00001982 <__udivmodsi4_loop>:
    1982:	aa 1f       	adc	r26, r26
    1984:	bb 1f       	adc	r27, r27
    1986:	ee 1f       	adc	r30, r30
    1988:	ff 1f       	adc	r31, r31
    198a:	a2 17       	cp	r26, r18
    198c:	b3 07       	cpc	r27, r19
    198e:	e4 07       	cpc	r30, r20
    1990:	f5 07       	cpc	r31, r21
    1992:	20 f0       	brcs	.+8      	; 0x199c <__udivmodsi4_ep>
    1994:	a2 1b       	sub	r26, r18
    1996:	b3 0b       	sbc	r27, r19
    1998:	e4 0b       	sbc	r30, r20
    199a:	f5 0b       	sbc	r31, r21

0000199c <__udivmodsi4_ep>:
    199c:	66 1f       	adc	r22, r22
    199e:	77 1f       	adc	r23, r23
    19a0:	88 1f       	adc	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	1a 94       	dec	r1
    19a6:	69 f7       	brne	.-38     	; 0x1982 <__udivmodsi4_loop>
    19a8:	60 95       	com	r22
    19aa:	70 95       	com	r23
    19ac:	80 95       	com	r24
    19ae:	90 95       	com	r25
    19b0:	9b 01       	movw	r18, r22
    19b2:	ac 01       	movw	r20, r24
    19b4:	bd 01       	movw	r22, r26
    19b6:	cf 01       	movw	r24, r30
    19b8:	08 95       	ret

000019ba <__ftoa_engine>:
    19ba:	28 30       	cpi	r18, 0x08	; 8
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <__ftoa_engine+0x6>
    19be:	27 e0       	ldi	r18, 0x07	; 7
    19c0:	33 27       	eor	r19, r19
    19c2:	da 01       	movw	r26, r20
    19c4:	99 0f       	add	r25, r25
    19c6:	31 1d       	adc	r19, r1
    19c8:	87 fd       	sbrc	r24, 7
    19ca:	91 60       	ori	r25, 0x01	; 1
    19cc:	00 96       	adiw	r24, 0x00	; 0
    19ce:	61 05       	cpc	r22, r1
    19d0:	71 05       	cpc	r23, r1
    19d2:	39 f4       	brne	.+14     	; 0x19e2 <__ftoa_engine+0x28>
    19d4:	32 60       	ori	r19, 0x02	; 2
    19d6:	2e 5f       	subi	r18, 0xFE	; 254
    19d8:	3d 93       	st	X+, r19
    19da:	30 e3       	ldi	r19, 0x30	; 48
    19dc:	2a 95       	dec	r18
    19de:	e1 f7       	brne	.-8      	; 0x19d8 <__ftoa_engine+0x1e>
    19e0:	08 95       	ret
    19e2:	9f 3f       	cpi	r25, 0xFF	; 255
    19e4:	30 f0       	brcs	.+12     	; 0x19f2 <__ftoa_engine+0x38>
    19e6:	80 38       	cpi	r24, 0x80	; 128
    19e8:	71 05       	cpc	r23, r1
    19ea:	61 05       	cpc	r22, r1
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <__ftoa_engine+0x36>
    19ee:	3c 5f       	subi	r19, 0xFC	; 252
    19f0:	3c 5f       	subi	r19, 0xFC	; 252
    19f2:	3d 93       	st	X+, r19
    19f4:	91 30       	cpi	r25, 0x01	; 1
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <__ftoa_engine+0x40>
    19f8:	80 68       	ori	r24, 0x80	; 128
    19fa:	91 1d       	adc	r25, r1
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	1f 93       	push	r17
    1a02:	0f 93       	push	r16
    1a04:	ff 92       	push	r15
    1a06:	ef 92       	push	r14
    1a08:	19 2f       	mov	r17, r25
    1a0a:	98 7f       	andi	r25, 0xF8	; 248
    1a0c:	96 95       	lsr	r25
    1a0e:	e9 2f       	mov	r30, r25
    1a10:	96 95       	lsr	r25
    1a12:	96 95       	lsr	r25
    1a14:	e9 0f       	add	r30, r25
    1a16:	ff 27       	eor	r31, r31
    1a18:	e2 5a       	subi	r30, 0xA2	; 162
    1a1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a1c:	99 27       	eor	r25, r25
    1a1e:	33 27       	eor	r19, r19
    1a20:	ee 24       	eor	r14, r14
    1a22:	ff 24       	eor	r15, r15
    1a24:	a7 01       	movw	r20, r14
    1a26:	e7 01       	movw	r28, r14
    1a28:	05 90       	lpm	r0, Z+
    1a2a:	08 94       	sec
    1a2c:	07 94       	ror	r0
    1a2e:	28 f4       	brcc	.+10     	; 0x1a3a <__ftoa_engine+0x80>
    1a30:	36 0f       	add	r19, r22
    1a32:	e7 1e       	adc	r14, r23
    1a34:	f8 1e       	adc	r15, r24
    1a36:	49 1f       	adc	r20, r25
    1a38:	51 1d       	adc	r21, r1
    1a3a:	66 0f       	add	r22, r22
    1a3c:	77 1f       	adc	r23, r23
    1a3e:	88 1f       	adc	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	06 94       	lsr	r0
    1a44:	a1 f7       	brne	.-24     	; 0x1a2e <__ftoa_engine+0x74>
    1a46:	05 90       	lpm	r0, Z+
    1a48:	07 94       	ror	r0
    1a4a:	28 f4       	brcc	.+10     	; 0x1a56 <__ftoa_engine+0x9c>
    1a4c:	e7 0e       	add	r14, r23
    1a4e:	f8 1e       	adc	r15, r24
    1a50:	49 1f       	adc	r20, r25
    1a52:	56 1f       	adc	r21, r22
    1a54:	c1 1d       	adc	r28, r1
    1a56:	77 0f       	add	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	66 1f       	adc	r22, r22
    1a5e:	06 94       	lsr	r0
    1a60:	a1 f7       	brne	.-24     	; 0x1a4a <__ftoa_engine+0x90>
    1a62:	05 90       	lpm	r0, Z+
    1a64:	07 94       	ror	r0
    1a66:	28 f4       	brcc	.+10     	; 0x1a72 <__ftoa_engine+0xb8>
    1a68:	f8 0e       	add	r15, r24
    1a6a:	49 1f       	adc	r20, r25
    1a6c:	56 1f       	adc	r21, r22
    1a6e:	c7 1f       	adc	r28, r23
    1a70:	d1 1d       	adc	r29, r1
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	66 1f       	adc	r22, r22
    1a78:	77 1f       	adc	r23, r23
    1a7a:	06 94       	lsr	r0
    1a7c:	a1 f7       	brne	.-24     	; 0x1a66 <__ftoa_engine+0xac>
    1a7e:	05 90       	lpm	r0, Z+
    1a80:	07 94       	ror	r0
    1a82:	20 f4       	brcc	.+8      	; 0x1a8c <__ftoa_engine+0xd2>
    1a84:	49 0f       	add	r20, r25
    1a86:	56 1f       	adc	r21, r22
    1a88:	c7 1f       	adc	r28, r23
    1a8a:	d8 1f       	adc	r29, r24
    1a8c:	99 0f       	add	r25, r25
    1a8e:	66 1f       	adc	r22, r22
    1a90:	77 1f       	adc	r23, r23
    1a92:	88 1f       	adc	r24, r24
    1a94:	06 94       	lsr	r0
    1a96:	a9 f7       	brne	.-22     	; 0x1a82 <__ftoa_engine+0xc8>
    1a98:	84 91       	lpm	r24, Z
    1a9a:	10 95       	com	r17
    1a9c:	17 70       	andi	r17, 0x07	; 7
    1a9e:	41 f0       	breq	.+16     	; 0x1ab0 <__ftoa_engine+0xf6>
    1aa0:	d6 95       	lsr	r29
    1aa2:	c7 95       	ror	r28
    1aa4:	57 95       	ror	r21
    1aa6:	47 95       	ror	r20
    1aa8:	f7 94       	ror	r15
    1aaa:	e7 94       	ror	r14
    1aac:	1a 95       	dec	r17
    1aae:	c1 f7       	brne	.-16     	; 0x1aa0 <__ftoa_engine+0xe6>
    1ab0:	e4 e0       	ldi	r30, 0x04	; 4
    1ab2:	f2 e0       	ldi	r31, 0x02	; 2
    1ab4:	68 94       	set
    1ab6:	15 90       	lpm	r1, Z+
    1ab8:	15 91       	lpm	r17, Z+
    1aba:	35 91       	lpm	r19, Z+
    1abc:	65 91       	lpm	r22, Z+
    1abe:	95 91       	lpm	r25, Z+
    1ac0:	05 90       	lpm	r0, Z+
    1ac2:	7f e2       	ldi	r23, 0x2F	; 47
    1ac4:	73 95       	inc	r23
    1ac6:	e1 18       	sub	r14, r1
    1ac8:	f1 0a       	sbc	r15, r17
    1aca:	43 0b       	sbc	r20, r19
    1acc:	56 0b       	sbc	r21, r22
    1ace:	c9 0b       	sbc	r28, r25
    1ad0:	d0 09       	sbc	r29, r0
    1ad2:	c0 f7       	brcc	.-16     	; 0x1ac4 <__ftoa_engine+0x10a>
    1ad4:	e1 0c       	add	r14, r1
    1ad6:	f1 1e       	adc	r15, r17
    1ad8:	43 1f       	adc	r20, r19
    1ada:	56 1f       	adc	r21, r22
    1adc:	c9 1f       	adc	r28, r25
    1ade:	d0 1d       	adc	r29, r0
    1ae0:	7e f4       	brtc	.+30     	; 0x1b00 <__ftoa_engine+0x146>
    1ae2:	70 33       	cpi	r23, 0x30	; 48
    1ae4:	11 f4       	brne	.+4      	; 0x1aea <__ftoa_engine+0x130>
    1ae6:	8a 95       	dec	r24
    1ae8:	e6 cf       	rjmp	.-52     	; 0x1ab6 <__ftoa_engine+0xfc>
    1aea:	e8 94       	clt
    1aec:	01 50       	subi	r16, 0x01	; 1
    1aee:	30 f0       	brcs	.+12     	; 0x1afc <__ftoa_engine+0x142>
    1af0:	08 0f       	add	r16, r24
    1af2:	0a f4       	brpl	.+2      	; 0x1af6 <__ftoa_engine+0x13c>
    1af4:	00 27       	eor	r16, r16
    1af6:	02 17       	cp	r16, r18
    1af8:	08 f4       	brcc	.+2      	; 0x1afc <__ftoa_engine+0x142>
    1afa:	20 2f       	mov	r18, r16
    1afc:	23 95       	inc	r18
    1afe:	02 2f       	mov	r16, r18
    1b00:	7a 33       	cpi	r23, 0x3A	; 58
    1b02:	28 f0       	brcs	.+10     	; 0x1b0e <__ftoa_engine+0x154>
    1b04:	79 e3       	ldi	r23, 0x39	; 57
    1b06:	7d 93       	st	X+, r23
    1b08:	2a 95       	dec	r18
    1b0a:	e9 f7       	brne	.-6      	; 0x1b06 <__ftoa_engine+0x14c>
    1b0c:	10 c0       	rjmp	.+32     	; 0x1b2e <__ftoa_engine+0x174>
    1b0e:	7d 93       	st	X+, r23
    1b10:	2a 95       	dec	r18
    1b12:	89 f6       	brne	.-94     	; 0x1ab6 <__ftoa_engine+0xfc>
    1b14:	06 94       	lsr	r0
    1b16:	97 95       	ror	r25
    1b18:	67 95       	ror	r22
    1b1a:	37 95       	ror	r19
    1b1c:	17 95       	ror	r17
    1b1e:	17 94       	ror	r1
    1b20:	e1 18       	sub	r14, r1
    1b22:	f1 0a       	sbc	r15, r17
    1b24:	43 0b       	sbc	r20, r19
    1b26:	56 0b       	sbc	r21, r22
    1b28:	c9 0b       	sbc	r28, r25
    1b2a:	d0 09       	sbc	r29, r0
    1b2c:	98 f0       	brcs	.+38     	; 0x1b54 <__ftoa_engine+0x19a>
    1b2e:	23 95       	inc	r18
    1b30:	7e 91       	ld	r23, -X
    1b32:	73 95       	inc	r23
    1b34:	7a 33       	cpi	r23, 0x3A	; 58
    1b36:	08 f0       	brcs	.+2      	; 0x1b3a <__ftoa_engine+0x180>
    1b38:	70 e3       	ldi	r23, 0x30	; 48
    1b3a:	7c 93       	st	X, r23
    1b3c:	20 13       	cpse	r18, r16
    1b3e:	b8 f7       	brcc	.-18     	; 0x1b2e <__ftoa_engine+0x174>
    1b40:	7e 91       	ld	r23, -X
    1b42:	70 61       	ori	r23, 0x10	; 16
    1b44:	7d 93       	st	X+, r23
    1b46:	30 f0       	brcs	.+12     	; 0x1b54 <__ftoa_engine+0x19a>
    1b48:	83 95       	inc	r24
    1b4a:	71 e3       	ldi	r23, 0x31	; 49
    1b4c:	7d 93       	st	X+, r23
    1b4e:	70 e3       	ldi	r23, 0x30	; 48
    1b50:	2a 95       	dec	r18
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <__ftoa_engine+0x192>
    1b54:	11 24       	eor	r1, r1
    1b56:	ef 90       	pop	r14
    1b58:	ff 90       	pop	r15
    1b5a:	0f 91       	pop	r16
    1b5c:	1f 91       	pop	r17
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	99 27       	eor	r25, r25
    1b64:	87 fd       	sbrc	r24, 7
    1b66:	90 95       	com	r25
    1b68:	08 95       	ret

00001b6a <strnlen_P>:
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	05 90       	lpm	r0, Z+
    1b6e:	61 50       	subi	r22, 0x01	; 1
    1b70:	70 40       	sbci	r23, 0x00	; 0
    1b72:	01 10       	cpse	r0, r1
    1b74:	d8 f7       	brcc	.-10     	; 0x1b6c <strnlen_P+0x2>
    1b76:	80 95       	com	r24
    1b78:	90 95       	com	r25
    1b7a:	8e 0f       	add	r24, r30
    1b7c:	9f 1f       	adc	r25, r31
    1b7e:	08 95       	ret

00001b80 <strnlen>:
    1b80:	fc 01       	movw	r30, r24
    1b82:	61 50       	subi	r22, 0x01	; 1
    1b84:	70 40       	sbci	r23, 0x00	; 0
    1b86:	01 90       	ld	r0, Z+
    1b88:	01 10       	cpse	r0, r1
    1b8a:	d8 f7       	brcc	.-10     	; 0x1b82 <strnlen+0x2>
    1b8c:	80 95       	com	r24
    1b8e:	90 95       	com	r25
    1b90:	8e 0f       	add	r24, r30
    1b92:	9f 1f       	adc	r25, r31
    1b94:	08 95       	ret

00001b96 <fdevopen>:
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	ec 01       	movw	r28, r24
    1ba0:	8b 01       	movw	r16, r22
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	31 f4       	brne	.+12     	; 0x1bb2 <fdevopen+0x1c>
    1ba6:	61 15       	cp	r22, r1
    1ba8:	71 05       	cpc	r23, r1
    1baa:	19 f4       	brne	.+6      	; 0x1bb2 <fdevopen+0x1c>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	37 c0       	rjmp	.+110    	; 0x1c20 <fdevopen+0x8a>
    1bb2:	6e e0       	ldi	r22, 0x0E	; 14
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	43 d1       	rcall	.+646    	; 0x1e42 <calloc>
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	a9 f3       	breq	.-22     	; 0x1bac <fdevopen+0x16>
    1bc2:	80 e8       	ldi	r24, 0x80	; 128
    1bc4:	83 83       	std	Z+3, r24	; 0x03
    1bc6:	01 15       	cp	r16, r1
    1bc8:	11 05       	cpc	r17, r1
    1bca:	71 f0       	breq	.+28     	; 0x1be8 <fdevopen+0x52>
    1bcc:	02 87       	std	Z+10, r16	; 0x0a
    1bce:	13 87       	std	Z+11, r17	; 0x0b
    1bd0:	81 e8       	ldi	r24, 0x81	; 129
    1bd2:	83 83       	std	Z+3, r24	; 0x03
    1bd4:	80 91 2c 20 	lds	r24, 0x202C
    1bd8:	90 91 2d 20 	lds	r25, 0x202D
    1bdc:	89 2b       	or	r24, r25
    1bde:	21 f4       	brne	.+8      	; 0x1be8 <fdevopen+0x52>
    1be0:	e0 93 2c 20 	sts	0x202C, r30
    1be4:	f0 93 2d 20 	sts	0x202D, r31
    1be8:	20 97       	sbiw	r28, 0x00	; 0
    1bea:	c9 f0       	breq	.+50     	; 0x1c1e <fdevopen+0x88>
    1bec:	c0 87       	std	Z+8, r28	; 0x08
    1bee:	d1 87       	std	Z+9, r29	; 0x09
    1bf0:	83 81       	ldd	r24, Z+3	; 0x03
    1bf2:	82 60       	ori	r24, 0x02	; 2
    1bf4:	83 83       	std	Z+3, r24	; 0x03
    1bf6:	80 91 2e 20 	lds	r24, 0x202E
    1bfa:	90 91 2f 20 	lds	r25, 0x202F
    1bfe:	89 2b       	or	r24, r25
    1c00:	71 f4       	brne	.+28     	; 0x1c1e <fdevopen+0x88>
    1c02:	e0 93 2e 20 	sts	0x202E, r30
    1c06:	f0 93 2f 20 	sts	0x202F, r31
    1c0a:	80 91 30 20 	lds	r24, 0x2030
    1c0e:	90 91 31 20 	lds	r25, 0x2031
    1c12:	89 2b       	or	r24, r25
    1c14:	21 f4       	brne	.+8      	; 0x1c1e <fdevopen+0x88>
    1c16:	e0 93 30 20 	sts	0x2030, r30
    1c1a:	f0 93 31 20 	sts	0x2031, r31
    1c1e:	cf 01       	movw	r24, r30
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	08 95       	ret

00001c2a <fgetc>:
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	ec 01       	movw	r28, r24
    1c30:	2b 81       	ldd	r18, Y+3	; 0x03
    1c32:	20 ff       	sbrs	r18, 0
    1c34:	33 c0       	rjmp	.+102    	; 0x1c9c <fgetc+0x72>
    1c36:	26 ff       	sbrs	r18, 6
    1c38:	0a c0       	rjmp	.+20     	; 0x1c4e <fgetc+0x24>
    1c3a:	2f 7b       	andi	r18, 0xBF	; 191
    1c3c:	2b 83       	std	Y+3, r18	; 0x03
    1c3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c40:	9f 81       	ldd	r25, Y+7	; 0x07
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	8e 83       	std	Y+6, r24	; 0x06
    1c46:	9f 83       	std	Y+7, r25	; 0x07
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	29 c0       	rjmp	.+82     	; 0x1ca0 <fgetc+0x76>
    1c4e:	22 ff       	sbrs	r18, 2
    1c50:	0f c0       	rjmp	.+30     	; 0x1c70 <fgetc+0x46>
    1c52:	e8 81       	ld	r30, Y
    1c54:	f9 81       	ldd	r31, Y+1	; 0x01
    1c56:	80 81       	ld	r24, Z
    1c58:	99 27       	eor	r25, r25
    1c5a:	87 fd       	sbrc	r24, 7
    1c5c:	90 95       	com	r25
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	19 f4       	brne	.+6      	; 0x1c68 <fgetc+0x3e>
    1c62:	20 62       	ori	r18, 0x20	; 32
    1c64:	2b 83       	std	Y+3, r18	; 0x03
    1c66:	1a c0       	rjmp	.+52     	; 0x1c9c <fgetc+0x72>
    1c68:	31 96       	adiw	r30, 0x01	; 1
    1c6a:	e8 83       	st	Y, r30
    1c6c:	f9 83       	std	Y+1, r31	; 0x01
    1c6e:	0e c0       	rjmp	.+28     	; 0x1c8c <fgetc+0x62>
    1c70:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c72:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c74:	19 95       	eicall
    1c76:	97 ff       	sbrs	r25, 7
    1c78:	09 c0       	rjmp	.+18     	; 0x1c8c <fgetc+0x62>
    1c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7c:	01 96       	adiw	r24, 0x01	; 1
    1c7e:	11 f4       	brne	.+4      	; 0x1c84 <fgetc+0x5a>
    1c80:	80 e1       	ldi	r24, 0x10	; 16
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <fgetc+0x5c>
    1c84:	80 e2       	ldi	r24, 0x20	; 32
    1c86:	82 2b       	or	r24, r18
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	08 c0       	rjmp	.+16     	; 0x1c9c <fgetc+0x72>
    1c8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c90:	2f 5f       	subi	r18, 0xFF	; 255
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	2e 83       	std	Y+6, r18	; 0x06
    1c96:	3f 83       	std	Y+7, r19	; 0x07
    1c98:	99 27       	eor	r25, r25
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <fgetc+0x76>
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <fputc>:
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	18 2f       	mov	r17, r24
    1cb0:	09 2f       	mov	r16, r25
    1cb2:	eb 01       	movw	r28, r22
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	81 fd       	sbrc	r24, 1
    1cb8:	03 c0       	rjmp	.+6      	; 0x1cc0 <fputc+0x1a>
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	9f ef       	ldi	r25, 0xFF	; 255
    1cbe:	20 c0       	rjmp	.+64     	; 0x1d00 <fputc+0x5a>
    1cc0:	82 ff       	sbrs	r24, 2
    1cc2:	10 c0       	rjmp	.+32     	; 0x1ce4 <fputc+0x3e>
    1cc4:	4e 81       	ldd	r20, Y+6	; 0x06
    1cc6:	5f 81       	ldd	r21, Y+7	; 0x07
    1cc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cca:	3d 81       	ldd	r19, Y+5	; 0x05
    1ccc:	42 17       	cp	r20, r18
    1cce:	53 07       	cpc	r21, r19
    1cd0:	7c f4       	brge	.+30     	; 0x1cf0 <fputc+0x4a>
    1cd2:	e8 81       	ld	r30, Y
    1cd4:	f9 81       	ldd	r31, Y+1	; 0x01
    1cd6:	9f 01       	movw	r18, r30
    1cd8:	2f 5f       	subi	r18, 0xFF	; 255
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	28 83       	st	Y, r18
    1cde:	39 83       	std	Y+1, r19	; 0x01
    1ce0:	10 83       	st	Z, r17
    1ce2:	06 c0       	rjmp	.+12     	; 0x1cf0 <fputc+0x4a>
    1ce4:	e8 85       	ldd	r30, Y+8	; 0x08
    1ce6:	f9 85       	ldd	r31, Y+9	; 0x09
    1ce8:	81 2f       	mov	r24, r17
    1cea:	19 95       	eicall
    1cec:	89 2b       	or	r24, r25
    1cee:	29 f7       	brne	.-54     	; 0x1cba <fputc+0x14>
    1cf0:	2e 81       	ldd	r18, Y+6	; 0x06
    1cf2:	3f 81       	ldd	r19, Y+7	; 0x07
    1cf4:	2f 5f       	subi	r18, 0xFF	; 255
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf8:	2e 83       	std	Y+6, r18	; 0x06
    1cfa:	3f 83       	std	Y+7, r19	; 0x07
    1cfc:	81 2f       	mov	r24, r17
    1cfe:	90 2f       	mov	r25, r16
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	08 95       	ret

00001d0a <printf>:
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	fe 01       	movw	r30, r28
    1d14:	36 96       	adiw	r30, 0x06	; 6
    1d16:	61 91       	ld	r22, Z+
    1d18:	71 91       	ld	r23, Z+
    1d1a:	af 01       	movw	r20, r30
    1d1c:	80 91 2e 20 	lds	r24, 0x202E
    1d20:	90 91 2f 20 	lds	r25, 0x202F
    1d24:	a7 da       	rcall	.-2738   	; 0x1274 <vfprintf>
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	08 95       	ret

00001d2c <puts>:
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	e0 91 2e 20 	lds	r30, 0x202E
    1d38:	f0 91 2f 20 	lds	r31, 0x202F
    1d3c:	23 81       	ldd	r18, Z+3	; 0x03
    1d3e:	21 ff       	sbrs	r18, 1
    1d40:	1b c0       	rjmp	.+54     	; 0x1d78 <puts+0x4c>
    1d42:	ec 01       	movw	r28, r24
    1d44:	00 e0       	ldi	r16, 0x00	; 0
    1d46:	10 e0       	ldi	r17, 0x00	; 0
    1d48:	89 91       	ld	r24, Y+
    1d4a:	60 91 2e 20 	lds	r22, 0x202E
    1d4e:	70 91 2f 20 	lds	r23, 0x202F
    1d52:	db 01       	movw	r26, r22
    1d54:	18 96       	adiw	r26, 0x08	; 8
    1d56:	ed 91       	ld	r30, X+
    1d58:	fc 91       	ld	r31, X
    1d5a:	19 97       	sbiw	r26, 0x09	; 9
    1d5c:	88 23       	and	r24, r24
    1d5e:	31 f0       	breq	.+12     	; 0x1d6c <puts+0x40>
    1d60:	19 95       	eicall
    1d62:	89 2b       	or	r24, r25
    1d64:	89 f3       	breq	.-30     	; 0x1d48 <puts+0x1c>
    1d66:	0f ef       	ldi	r16, 0xFF	; 255
    1d68:	1f ef       	ldi	r17, 0xFF	; 255
    1d6a:	ee cf       	rjmp	.-36     	; 0x1d48 <puts+0x1c>
    1d6c:	8a e0       	ldi	r24, 0x0A	; 10
    1d6e:	19 95       	eicall
    1d70:	89 2b       	or	r24, r25
    1d72:	11 f4       	brne	.+4      	; 0x1d78 <puts+0x4c>
    1d74:	c8 01       	movw	r24, r16
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <puts+0x50>
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	9f ef       	ldi	r25, 0xFF	; 255
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	08 95       	ret

00001d86 <__ultoa_invert>:
    1d86:	fa 01       	movw	r30, r20
    1d88:	aa 27       	eor	r26, r26
    1d8a:	28 30       	cpi	r18, 0x08	; 8
    1d8c:	51 f1       	breq	.+84     	; 0x1de2 <__ultoa_invert+0x5c>
    1d8e:	20 31       	cpi	r18, 0x10	; 16
    1d90:	81 f1       	breq	.+96     	; 0x1df2 <__ultoa_invert+0x6c>
    1d92:	e8 94       	clt
    1d94:	6f 93       	push	r22
    1d96:	6e 7f       	andi	r22, 0xFE	; 254
    1d98:	6e 5f       	subi	r22, 0xFE	; 254
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1da0:	af 4f       	sbci	r26, 0xFF	; 255
    1da2:	b1 e0       	ldi	r27, 0x01	; 1
    1da4:	3e d0       	rcall	.+124    	; 0x1e22 <__ultoa_invert+0x9c>
    1da6:	b4 e0       	ldi	r27, 0x04	; 4
    1da8:	3c d0       	rcall	.+120    	; 0x1e22 <__ultoa_invert+0x9c>
    1daa:	67 0f       	add	r22, r23
    1dac:	78 1f       	adc	r23, r24
    1dae:	89 1f       	adc	r24, r25
    1db0:	9a 1f       	adc	r25, r26
    1db2:	a1 1d       	adc	r26, r1
    1db4:	68 0f       	add	r22, r24
    1db6:	79 1f       	adc	r23, r25
    1db8:	8a 1f       	adc	r24, r26
    1dba:	91 1d       	adc	r25, r1
    1dbc:	a1 1d       	adc	r26, r1
    1dbe:	6a 0f       	add	r22, r26
    1dc0:	71 1d       	adc	r23, r1
    1dc2:	81 1d       	adc	r24, r1
    1dc4:	91 1d       	adc	r25, r1
    1dc6:	a1 1d       	adc	r26, r1
    1dc8:	20 d0       	rcall	.+64     	; 0x1e0a <__ultoa_invert+0x84>
    1dca:	09 f4       	brne	.+2      	; 0x1dce <__ultoa_invert+0x48>
    1dcc:	68 94       	set
    1dce:	3f 91       	pop	r19
    1dd0:	2a e0       	ldi	r18, 0x0A	; 10
    1dd2:	26 9f       	mul	r18, r22
    1dd4:	11 24       	eor	r1, r1
    1dd6:	30 19       	sub	r19, r0
    1dd8:	30 5d       	subi	r19, 0xD0	; 208
    1dda:	31 93       	st	Z+, r19
    1ddc:	de f6       	brtc	.-74     	; 0x1d94 <__ultoa_invert+0xe>
    1dde:	cf 01       	movw	r24, r30
    1de0:	08 95       	ret
    1de2:	46 2f       	mov	r20, r22
    1de4:	47 70       	andi	r20, 0x07	; 7
    1de6:	40 5d       	subi	r20, 0xD0	; 208
    1de8:	41 93       	st	Z+, r20
    1dea:	b3 e0       	ldi	r27, 0x03	; 3
    1dec:	0f d0       	rcall	.+30     	; 0x1e0c <__ultoa_invert+0x86>
    1dee:	c9 f7       	brne	.-14     	; 0x1de2 <__ultoa_invert+0x5c>
    1df0:	f6 cf       	rjmp	.-20     	; 0x1dde <__ultoa_invert+0x58>
    1df2:	46 2f       	mov	r20, r22
    1df4:	4f 70       	andi	r20, 0x0F	; 15
    1df6:	40 5d       	subi	r20, 0xD0	; 208
    1df8:	4a 33       	cpi	r20, 0x3A	; 58
    1dfa:	18 f0       	brcs	.+6      	; 0x1e02 <__ultoa_invert+0x7c>
    1dfc:	49 5d       	subi	r20, 0xD9	; 217
    1dfe:	31 fd       	sbrc	r19, 1
    1e00:	40 52       	subi	r20, 0x20	; 32
    1e02:	41 93       	st	Z+, r20
    1e04:	02 d0       	rcall	.+4      	; 0x1e0a <__ultoa_invert+0x84>
    1e06:	a9 f7       	brne	.-22     	; 0x1df2 <__ultoa_invert+0x6c>
    1e08:	ea cf       	rjmp	.-44     	; 0x1dde <__ultoa_invert+0x58>
    1e0a:	b4 e0       	ldi	r27, 0x04	; 4
    1e0c:	a6 95       	lsr	r26
    1e0e:	97 95       	ror	r25
    1e10:	87 95       	ror	r24
    1e12:	77 95       	ror	r23
    1e14:	67 95       	ror	r22
    1e16:	ba 95       	dec	r27
    1e18:	c9 f7       	brne	.-14     	; 0x1e0c <__ultoa_invert+0x86>
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	61 05       	cpc	r22, r1
    1e1e:	71 05       	cpc	r23, r1
    1e20:	08 95       	ret
    1e22:	9b 01       	movw	r18, r22
    1e24:	ac 01       	movw	r20, r24
    1e26:	0a 2e       	mov	r0, r26
    1e28:	06 94       	lsr	r0
    1e2a:	57 95       	ror	r21
    1e2c:	47 95       	ror	r20
    1e2e:	37 95       	ror	r19
    1e30:	27 95       	ror	r18
    1e32:	ba 95       	dec	r27
    1e34:	c9 f7       	brne	.-14     	; 0x1e28 <__ultoa_invert+0xa2>
    1e36:	62 0f       	add	r22, r18
    1e38:	73 1f       	adc	r23, r19
    1e3a:	84 1f       	adc	r24, r20
    1e3c:	95 1f       	adc	r25, r21
    1e3e:	a0 1d       	adc	r26, r0
    1e40:	08 95       	ret

00001e42 <calloc>:
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	86 9f       	mul	r24, r22
    1e4c:	80 01       	movw	r16, r0
    1e4e:	87 9f       	mul	r24, r23
    1e50:	10 0d       	add	r17, r0
    1e52:	96 9f       	mul	r25, r22
    1e54:	10 0d       	add	r17, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	c8 01       	movw	r24, r16
    1e5a:	0d d0       	rcall	.+26     	; 0x1e76 <malloc>
    1e5c:	ec 01       	movw	r28, r24
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	21 f0       	breq	.+8      	; 0x1e6a <calloc+0x28>
    1e62:	a8 01       	movw	r20, r16
    1e64:	60 e0       	ldi	r22, 0x00	; 0
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	2d d1       	rcall	.+602    	; 0x20c4 <memset>
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	08 95       	ret

00001e76 <malloc>:
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	10 f4       	brcc	.+4      	; 0x1e84 <malloc+0xe>
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	e0 91 34 20 	lds	r30, 0x2034
    1e88:	f0 91 35 20 	lds	r31, 0x2035
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	a0 e0       	ldi	r26, 0x00	; 0
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	30 97       	sbiw	r30, 0x00	; 0
    1e96:	39 f1       	breq	.+78     	; 0x1ee6 <malloc+0x70>
    1e98:	40 81       	ld	r20, Z
    1e9a:	51 81       	ldd	r21, Z+1	; 0x01
    1e9c:	48 17       	cp	r20, r24
    1e9e:	59 07       	cpc	r21, r25
    1ea0:	b8 f0       	brcs	.+46     	; 0x1ed0 <malloc+0x5a>
    1ea2:	48 17       	cp	r20, r24
    1ea4:	59 07       	cpc	r21, r25
    1ea6:	71 f4       	brne	.+28     	; 0x1ec4 <malloc+0x4e>
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	10 97       	sbiw	r26, 0x00	; 0
    1eae:	29 f0       	breq	.+10     	; 0x1eba <malloc+0x44>
    1eb0:	12 96       	adiw	r26, 0x02	; 2
    1eb2:	8d 93       	st	X+, r24
    1eb4:	9c 93       	st	X, r25
    1eb6:	13 97       	sbiw	r26, 0x03	; 3
    1eb8:	2c c0       	rjmp	.+88     	; 0x1f12 <malloc+0x9c>
    1eba:	80 93 34 20 	sts	0x2034, r24
    1ebe:	90 93 35 20 	sts	0x2035, r25
    1ec2:	27 c0       	rjmp	.+78     	; 0x1f12 <malloc+0x9c>
    1ec4:	21 15       	cp	r18, r1
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	31 f0       	breq	.+12     	; 0x1ed6 <malloc+0x60>
    1eca:	42 17       	cp	r20, r18
    1ecc:	53 07       	cpc	r21, r19
    1ece:	18 f0       	brcs	.+6      	; 0x1ed6 <malloc+0x60>
    1ed0:	a9 01       	movw	r20, r18
    1ed2:	db 01       	movw	r26, r22
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <malloc+0x62>
    1ed6:	ef 01       	movw	r28, r30
    1ed8:	9a 01       	movw	r18, r20
    1eda:	bd 01       	movw	r22, r26
    1edc:	df 01       	movw	r26, r30
    1ede:	02 80       	ldd	r0, Z+2	; 0x02
    1ee0:	f3 81       	ldd	r31, Z+3	; 0x03
    1ee2:	e0 2d       	mov	r30, r0
    1ee4:	d7 cf       	rjmp	.-82     	; 0x1e94 <malloc+0x1e>
    1ee6:	21 15       	cp	r18, r1
    1ee8:	31 05       	cpc	r19, r1
    1eea:	f9 f0       	breq	.+62     	; 0x1f2a <malloc+0xb4>
    1eec:	28 1b       	sub	r18, r24
    1eee:	39 0b       	sbc	r19, r25
    1ef0:	24 30       	cpi	r18, 0x04	; 4
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	80 f4       	brcc	.+32     	; 0x1f16 <malloc+0xa0>
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    1efa:	61 15       	cp	r22, r1
    1efc:	71 05       	cpc	r23, r1
    1efe:	21 f0       	breq	.+8      	; 0x1f08 <malloc+0x92>
    1f00:	fb 01       	movw	r30, r22
    1f02:	82 83       	std	Z+2, r24	; 0x02
    1f04:	93 83       	std	Z+3, r25	; 0x03
    1f06:	04 c0       	rjmp	.+8      	; 0x1f10 <malloc+0x9a>
    1f08:	80 93 34 20 	sts	0x2034, r24
    1f0c:	90 93 35 20 	sts	0x2035, r25
    1f10:	fe 01       	movw	r30, r28
    1f12:	32 96       	adiw	r30, 0x02	; 2
    1f14:	44 c0       	rjmp	.+136    	; 0x1f9e <malloc+0x128>
    1f16:	fe 01       	movw	r30, r28
    1f18:	e2 0f       	add	r30, r18
    1f1a:	f3 1f       	adc	r31, r19
    1f1c:	81 93       	st	Z+, r24
    1f1e:	91 93       	st	Z+, r25
    1f20:	22 50       	subi	r18, 0x02	; 2
    1f22:	31 09       	sbc	r19, r1
    1f24:	28 83       	st	Y, r18
    1f26:	39 83       	std	Y+1, r19	; 0x01
    1f28:	3a c0       	rjmp	.+116    	; 0x1f9e <malloc+0x128>
    1f2a:	20 91 32 20 	lds	r18, 0x2032
    1f2e:	30 91 33 20 	lds	r19, 0x2033
    1f32:	23 2b       	or	r18, r19
    1f34:	41 f4       	brne	.+16     	; 0x1f46 <malloc+0xd0>
    1f36:	20 91 02 20 	lds	r18, 0x2002
    1f3a:	30 91 03 20 	lds	r19, 0x2003
    1f3e:	20 93 32 20 	sts	0x2032, r18
    1f42:	30 93 33 20 	sts	0x2033, r19
    1f46:	20 91 00 20 	lds	r18, 0x2000
    1f4a:	30 91 01 20 	lds	r19, 0x2001
    1f4e:	21 15       	cp	r18, r1
    1f50:	31 05       	cpc	r19, r1
    1f52:	41 f4       	brne	.+16     	; 0x1f64 <malloc+0xee>
    1f54:	2d b7       	in	r18, 0x3d	; 61
    1f56:	3e b7       	in	r19, 0x3e	; 62
    1f58:	40 91 04 20 	lds	r20, 0x2004
    1f5c:	50 91 05 20 	lds	r21, 0x2005
    1f60:	24 1b       	sub	r18, r20
    1f62:	35 0b       	sbc	r19, r21
    1f64:	e0 91 32 20 	lds	r30, 0x2032
    1f68:	f0 91 33 20 	lds	r31, 0x2033
    1f6c:	e2 17       	cp	r30, r18
    1f6e:	f3 07       	cpc	r31, r19
    1f70:	a0 f4       	brcc	.+40     	; 0x1f9a <malloc+0x124>
    1f72:	2e 1b       	sub	r18, r30
    1f74:	3f 0b       	sbc	r19, r31
    1f76:	28 17       	cp	r18, r24
    1f78:	39 07       	cpc	r19, r25
    1f7a:	78 f0       	brcs	.+30     	; 0x1f9a <malloc+0x124>
    1f7c:	ac 01       	movw	r20, r24
    1f7e:	4e 5f       	subi	r20, 0xFE	; 254
    1f80:	5f 4f       	sbci	r21, 0xFF	; 255
    1f82:	24 17       	cp	r18, r20
    1f84:	35 07       	cpc	r19, r21
    1f86:	48 f0       	brcs	.+18     	; 0x1f9a <malloc+0x124>
    1f88:	4e 0f       	add	r20, r30
    1f8a:	5f 1f       	adc	r21, r31
    1f8c:	40 93 32 20 	sts	0x2032, r20
    1f90:	50 93 33 20 	sts	0x2033, r21
    1f94:	81 93       	st	Z+, r24
    1f96:	91 93       	st	Z+, r25
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <malloc+0x128>
    1f9a:	e0 e0       	ldi	r30, 0x00	; 0
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	cf 01       	movw	r24, r30
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	08 95       	ret

00001fa6 <free>:
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <free+0xa>
    1fae:	87 c0       	rjmp	.+270    	; 0x20be <free+0x118>
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	32 97       	sbiw	r30, 0x02	; 2
    1fb4:	12 82       	std	Z+2, r1	; 0x02
    1fb6:	13 82       	std	Z+3, r1	; 0x03
    1fb8:	c0 91 34 20 	lds	r28, 0x2034
    1fbc:	d0 91 35 20 	lds	r29, 0x2035
    1fc0:	20 97       	sbiw	r28, 0x00	; 0
    1fc2:	81 f4       	brne	.+32     	; 0x1fe4 <free+0x3e>
    1fc4:	20 81       	ld	r18, Z
    1fc6:	31 81       	ldd	r19, Z+1	; 0x01
    1fc8:	28 0f       	add	r18, r24
    1fca:	39 1f       	adc	r19, r25
    1fcc:	80 91 32 20 	lds	r24, 0x2032
    1fd0:	90 91 33 20 	lds	r25, 0x2033
    1fd4:	82 17       	cp	r24, r18
    1fd6:	93 07       	cpc	r25, r19
    1fd8:	79 f5       	brne	.+94     	; 0x2038 <free+0x92>
    1fda:	e0 93 32 20 	sts	0x2032, r30
    1fde:	f0 93 33 20 	sts	0x2033, r31
    1fe2:	6d c0       	rjmp	.+218    	; 0x20be <free+0x118>
    1fe4:	de 01       	movw	r26, r28
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	ae 17       	cp	r26, r30
    1fec:	bf 07       	cpc	r27, r31
    1fee:	50 f4       	brcc	.+20     	; 0x2004 <free+0x5e>
    1ff0:	12 96       	adiw	r26, 0x02	; 2
    1ff2:	4d 91       	ld	r20, X+
    1ff4:	5c 91       	ld	r21, X
    1ff6:	13 97       	sbiw	r26, 0x03	; 3
    1ff8:	9d 01       	movw	r18, r26
    1ffa:	41 15       	cp	r20, r1
    1ffc:	51 05       	cpc	r21, r1
    1ffe:	09 f1       	breq	.+66     	; 0x2042 <free+0x9c>
    2000:	da 01       	movw	r26, r20
    2002:	f3 cf       	rjmp	.-26     	; 0x1fea <free+0x44>
    2004:	a2 83       	std	Z+2, r26	; 0x02
    2006:	b3 83       	std	Z+3, r27	; 0x03
    2008:	40 81       	ld	r20, Z
    200a:	51 81       	ldd	r21, Z+1	; 0x01
    200c:	84 0f       	add	r24, r20
    200e:	95 1f       	adc	r25, r21
    2010:	8a 17       	cp	r24, r26
    2012:	9b 07       	cpc	r25, r27
    2014:	71 f4       	brne	.+28     	; 0x2032 <free+0x8c>
    2016:	8d 91       	ld	r24, X+
    2018:	9c 91       	ld	r25, X
    201a:	11 97       	sbiw	r26, 0x01	; 1
    201c:	84 0f       	add	r24, r20
    201e:	95 1f       	adc	r25, r21
    2020:	02 96       	adiw	r24, 0x02	; 2
    2022:	80 83       	st	Z, r24
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	12 96       	adiw	r26, 0x02	; 2
    2028:	8d 91       	ld	r24, X+
    202a:	9c 91       	ld	r25, X
    202c:	13 97       	sbiw	r26, 0x03	; 3
    202e:	82 83       	std	Z+2, r24	; 0x02
    2030:	93 83       	std	Z+3, r25	; 0x03
    2032:	21 15       	cp	r18, r1
    2034:	31 05       	cpc	r19, r1
    2036:	29 f4       	brne	.+10     	; 0x2042 <free+0x9c>
    2038:	e0 93 34 20 	sts	0x2034, r30
    203c:	f0 93 35 20 	sts	0x2035, r31
    2040:	3e c0       	rjmp	.+124    	; 0x20be <free+0x118>
    2042:	d9 01       	movw	r26, r18
    2044:	12 96       	adiw	r26, 0x02	; 2
    2046:	ed 93       	st	X+, r30
    2048:	fc 93       	st	X, r31
    204a:	13 97       	sbiw	r26, 0x03	; 3
    204c:	4d 91       	ld	r20, X+
    204e:	5d 91       	ld	r21, X+
    2050:	a4 0f       	add	r26, r20
    2052:	b5 1f       	adc	r27, r21
    2054:	ea 17       	cp	r30, r26
    2056:	fb 07       	cpc	r31, r27
    2058:	79 f4       	brne	.+30     	; 0x2078 <free+0xd2>
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	84 0f       	add	r24, r20
    2060:	95 1f       	adc	r25, r21
    2062:	02 96       	adiw	r24, 0x02	; 2
    2064:	d9 01       	movw	r26, r18
    2066:	8d 93       	st	X+, r24
    2068:	9c 93       	st	X, r25
    206a:	11 97       	sbiw	r26, 0x01	; 1
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	12 96       	adiw	r26, 0x02	; 2
    2072:	8d 93       	st	X+, r24
    2074:	9c 93       	st	X, r25
    2076:	13 97       	sbiw	r26, 0x03	; 3
    2078:	e0 e0       	ldi	r30, 0x00	; 0
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	19 f0       	breq	.+6      	; 0x208a <free+0xe4>
    2084:	fe 01       	movw	r30, r28
    2086:	ec 01       	movw	r28, r24
    2088:	f9 cf       	rjmp	.-14     	; 0x207c <free+0xd6>
    208a:	ce 01       	movw	r24, r28
    208c:	02 96       	adiw	r24, 0x02	; 2
    208e:	28 81       	ld	r18, Y
    2090:	39 81       	ldd	r19, Y+1	; 0x01
    2092:	82 0f       	add	r24, r18
    2094:	93 1f       	adc	r25, r19
    2096:	20 91 32 20 	lds	r18, 0x2032
    209a:	30 91 33 20 	lds	r19, 0x2033
    209e:	28 17       	cp	r18, r24
    20a0:	39 07       	cpc	r19, r25
    20a2:	69 f4       	brne	.+26     	; 0x20be <free+0x118>
    20a4:	30 97       	sbiw	r30, 0x00	; 0
    20a6:	29 f4       	brne	.+10     	; 0x20b2 <free+0x10c>
    20a8:	10 92 34 20 	sts	0x2034, r1
    20ac:	10 92 35 20 	sts	0x2035, r1
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <free+0x110>
    20b2:	12 82       	std	Z+2, r1	; 0x02
    20b4:	13 82       	std	Z+3, r1	; 0x03
    20b6:	c0 93 32 20 	sts	0x2032, r28
    20ba:	d0 93 33 20 	sts	0x2033, r29
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	08 95       	ret

000020c4 <memset>:
    20c4:	dc 01       	movw	r26, r24
    20c6:	01 c0       	rjmp	.+2      	; 0x20ca <memset+0x6>
    20c8:	6d 93       	st	X+, r22
    20ca:	41 50       	subi	r20, 0x01	; 1
    20cc:	50 40       	sbci	r21, 0x00	; 0
    20ce:	e0 f7       	brcc	.-8      	; 0x20c8 <memset+0x4>
    20d0:	08 95       	ret

000020d2 <_exit>:
    20d2:	f8 94       	cli

000020d4 <__stop_program>:
    20d4:	ff cf       	rjmp	.-2      	; 0x20d4 <__stop_program>
